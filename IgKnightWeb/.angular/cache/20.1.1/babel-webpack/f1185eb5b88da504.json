{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: changePasteTypeCommandId,\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    return CopyPasteController.get(editor)?.changePasteType();\n  }\n}());\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: 'editor.hidePasteWidget',\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    CopyPasteController.get(editor)?.clearWidgets();\n  }\n}());\nregisterEditorAction(class PasteAsAction extends EditorAction {\n  static #_ = this.argsSchema = {\n    type: 'object',\n    properties: {\n      kind: {\n        type: 'string',\n        description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\")\n      }\n    }\n  };\n  constructor() {\n    super({\n      id: 'editor.action.pasteAs',\n      label: nls.localize('pasteAs', \"Paste As...\"),\n      alias: 'Paste As...',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: 'Paste as',\n        args: [{\n          name: 'args',\n          schema: PasteAsAction.argsSchema\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, args) {\n    let kind = typeof args?.kind === 'string' ? args.kind : undefined;\n    if (!kind && args) {\n      // Support old id property\n      // TODO: remove this in the future\n      kind = typeof args.id === 'string' ? args.id : undefined;\n    }\n    return CopyPasteController.get(editor)?.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n  }\n});\nregisterEditorAction(class extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAsText',\n      label: nls.localize('pasteAsText', \"Paste as Text\"),\n      alias: 'Paste as Text',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    return CopyPasteController.get(editor)?.pasteAs({\n      providerId: DefaultTextPasteOrDropEditProvider.id\n    });\n  }\n});","map":{"version":3,"names":["HierarchicalKind","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","EditorContextKeys","registerEditorFeature","CopyPasteController","changePasteTypeCommandId","pasteWidgetVisibleCtx","DefaultPasteProvidersFeature","DefaultTextPasteOrDropEditProvider","nls","ID","constructor","id","precondition","kbOpts","weight","primary","runEditorCommand","_accessor","editor","get","changePasteType","clearWidgets","PasteAsAction","_","argsSchema","type","properties","kind","description","localize","label","alias","writable","metadata","args","name","schema","run","undefined","pasteAs","providerId"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        return CopyPasteController.get(editor)?.changePasteType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hidePasteWidget',\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        CopyPasteController.get(editor)?.clearWidgets();\n    }\n});\nregisterEditorAction(class PasteAsAction extends EditorAction {\n    static { this.argsSchema = {\n        type: 'object',\n        properties: {\n            kind: {\n                type: 'string',\n                description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n            }\n        },\n    }; }\n    constructor() {\n        super({\n            id: 'editor.action.pasteAs',\n            label: nls.localize('pasteAs', \"Paste As...\"),\n            alias: 'Paste As...',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: 'Paste as',\n                args: [{\n                        name: 'args',\n                        schema: PasteAsAction.argsSchema\n                    }]\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let kind = typeof args?.kind === 'string' ? args.kind : undefined;\n        if (!kind && args) {\n            // Support old id property\n            // TODO: remove this in the future\n            kind = typeof args.id === 'string' ? args.id : undefined;\n        }\n        return CopyPasteController.get(editor)?.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n    }\n});\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAsText',\n            label: nls.localize('pasteAsText', \"Paste as Text\"),\n            alias: 'Paste as Text',\n            precondition: EditorContextKeys.writable,\n        });\n    }\n    run(_accessor, editor) {\n        return CopyPasteController.get(editor)?.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}