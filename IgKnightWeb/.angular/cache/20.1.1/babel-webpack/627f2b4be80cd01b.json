{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\nclass ModelData {\n  constructor(model, onWillDispose, onDidChangeLanguage) {\n    this.model = model;\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n    this._modelEventListeners.add(model.onDidChangeLanguage(e => onDidChangeLanguage(model, e)));\n  }\n  dispose() {\n    this._modelEventListeners.dispose();\n  }\n}\nconst DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n  constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n    this.uri = uri;\n    this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n    this.time = time;\n    this.sharesUndoRedoStack = sharesUndoRedoStack;\n    this.heapSize = heapSize;\n    this.sha1 = sha1;\n    this.versionId = versionId;\n    this.alternativeVersionId = alternativeVersionId;\n  }\n}\nlet ModelService = /*#__PURE__*/(() => {\n  let ModelService = class ModelService extends Disposable {\n    static #_ = ModelService_1 = this;\n    static #_2 = this.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _instantiationService) {\n      super();\n      this._configurationService = _configurationService;\n      this._resourcePropertiesService = _resourcePropertiesService;\n      this._undoRedoService = _undoRedoService;\n      this._instantiationService = _instantiationService;\n      this._onModelAdded = this._register(new Emitter());\n      this.onModelAdded = this._onModelAdded.event;\n      this._onModelRemoved = this._register(new Emitter());\n      this.onModelRemoved = this._onModelRemoved.event;\n      this._onModelModeChanged = this._register(new Emitter());\n      this.onModelLanguageChanged = this._onModelModeChanged.event;\n      this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n      this._models = {};\n      this._disposedModels = new Map();\n      this._disposedModelsHeapSize = 0;\n      this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n      this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n      let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n      if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n        const parsedTabSize = parseInt(config.editor.tabSize, 10);\n        if (!isNaN(parsedTabSize)) {\n          tabSize = parsedTabSize;\n        }\n        if (tabSize < 1) {\n          tabSize = 1;\n        }\n      }\n      let indentSize = 'tabSize';\n      if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n        const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n        if (!isNaN(parsedIndentSize)) {\n          indentSize = Math.max(parsedIndentSize, 1);\n        }\n      }\n      let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n      if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n        insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n      }\n      let newDefaultEOL = DEFAULT_EOL;\n      const eol = config.eol;\n      if (eol === '\\r\\n') {\n        newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n      } else if (eol === '\\n') {\n        newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n      }\n      let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n      if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n        trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n      }\n      let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n      if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n        detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n      }\n      let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n      if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n        largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n      }\n      let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n      if (config.editor?.bracketPairColorization && typeof config.editor.bracketPairColorization === 'object') {\n        bracketPairColorizationOptions = {\n          enabled: !!config.editor.bracketPairColorization.enabled,\n          independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n        };\n      }\n      return {\n        isForSimpleWidget: isForSimpleWidget,\n        tabSize: tabSize,\n        indentSize: indentSize,\n        insertSpaces: insertSpaces,\n        detectIndentation: detectIndentation,\n        defaultEOL: newDefaultEOL,\n        trimAutoWhitespace: trimAutoWhitespace,\n        largeFileOptimizations: largeFileOptimizations,\n        bracketPairColorizationOptions\n      };\n    }\n    _getEOL(resource, language) {\n      if (resource) {\n        return this._resourcePropertiesService.getEOL(resource, language);\n      }\n      const eol = this._configurationService.getValue('files.eol', {\n        overrideIdentifier: language\n      });\n      if (eol && typeof eol === 'string' && eol !== 'auto') {\n        return eol;\n      }\n      return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n      const result = this._configurationService.getValue('files.restoreUndoStack');\n      if (typeof result === 'boolean') {\n        return result;\n      }\n      return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n      const language = typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId;\n      let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n      if (!creationOptions) {\n        const editor = this._configurationService.getValue('editor', {\n          overrideIdentifier: language,\n          resource\n        });\n        const eol = this._getEOL(resource, language);\n        creationOptions = ModelService_1._readModelOptions({\n          editor,\n          eol\n        }, isForSimpleWidget);\n        this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n      }\n      return creationOptions;\n    }\n    _updateModelOptions(e) {\n      const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n      this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n      // Update options on all models\n      const keys = Object.keys(this._models);\n      for (let i = 0, len = keys.length; i < len; i++) {\n        const modelId = keys[i];\n        const modelData = this._models[modelId];\n        const language = modelData.model.getLanguageId();\n        const uri = modelData.model.uri;\n        if (e && !e.affectsConfiguration('editor', {\n          overrideIdentifier: language,\n          resource: uri\n        }) && !e.affectsConfiguration('files.eol', {\n          overrideIdentifier: language,\n          resource: uri\n        })) {\n          continue; // perf: skip if this model is not affected by configuration change\n        }\n        const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n        const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n      }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n      if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n        model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n      }\n      if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n        // Same indent opts, no need to touch the model\n        return;\n      }\n      if (newOptions.detectIndentation) {\n        model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n        model.updateOptions({\n          trimAutoWhitespace: newOptions.trimAutoWhitespace,\n          bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n        });\n      } else {\n        model.updateOptions({\n          insertSpaces: newOptions.insertSpaces,\n          tabSize: newOptions.tabSize,\n          indentSize: newOptions.indentSize,\n          trimAutoWhitespace: newOptions.trimAutoWhitespace,\n          bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n        });\n      }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n      this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n      this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n      const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n      if (disposedModelData) {\n        this._disposedModelsHeapSize -= disposedModelData.heapSize;\n      }\n      this._disposedModels.delete(MODEL_ID(resource));\n      return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n      if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n        // we must remove some old undo stack elements to free up some memory\n        const disposedModels = [];\n        this._disposedModels.forEach(entry => {\n          if (!entry.sharesUndoRedoStack) {\n            disposedModels.push(entry);\n          }\n        });\n        disposedModels.sort((a, b) => a.time - b.time);\n        while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n          const disposedModel = disposedModels.shift();\n          this._removeDisposedModel(disposedModel.uri);\n          if (disposedModel.initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n          }\n        }\n      }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n      // create & save the model\n      const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n      const model = this._instantiationService.createInstance(TextModel, value, languageIdOrSelection, options, resource);\n      if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n        const disposedModelData = this._removeDisposedModel(resource);\n        const elements = this._undoRedoService.getElements(resource);\n        const sha1Computer = this._getSHA1Computer();\n        const sha1IsEqual = sha1Computer.canComputeSHA1(model) ? sha1Computer.computeSHA1(model) === disposedModelData.sha1 : false;\n        if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n          for (const element of elements.past) {\n            if (isEditStackElement(element) && element.matchesResource(resource)) {\n              element.setModel(model);\n            }\n          }\n          for (const element of elements.future) {\n            if (isEditStackElement(element) && element.matchesResource(resource)) {\n              element.setModel(model);\n            }\n          }\n          this._undoRedoService.setElementsValidFlag(resource, true, element => isEditStackElement(element) && element.matchesResource(resource));\n          if (sha1IsEqual) {\n            model._overwriteVersionId(disposedModelData.versionId);\n            model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n            model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n          }\n        } else {\n          if (disposedModelData.initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n          }\n        }\n      }\n      const modelId = MODEL_ID(model.uri);\n      if (this._models[modelId]) {\n        // There already exists a model with this id => this is a programmer error\n        throw new Error('ModelService: Cannot add model because it already exists!');\n      }\n      const modelData = new ModelData(model, model => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n      this._models[modelId] = modelData;\n      return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n      let modelData;\n      if (languageSelection) {\n        modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n      } else {\n        modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n      }\n      this._onModelAdded.fire(modelData.model);\n      return modelData.model;\n    }\n    getModels() {\n      const ret = [];\n      const keys = Object.keys(this._models);\n      for (let i = 0, len = keys.length; i < len; i++) {\n        const modelId = keys[i];\n        ret.push(this._models[modelId].model);\n      }\n      return ret;\n    }\n    getModel(resource) {\n      const modelId = MODEL_ID(resource);\n      const modelData = this._models[modelId];\n      if (!modelData) {\n        return null;\n      }\n      return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n      return resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote || resource.scheme === Schemas.vscodeUserData || resource.scheme === Schemas.vscodeNotebookCell || resource.scheme === 'fake-fs' // for tests\n      ;\n    }\n    _onWillDispose(model) {\n      const modelId = MODEL_ID(model.uri);\n      const modelData = this._models[modelId];\n      const sharesUndoRedoStack = this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString();\n      let maintainUndoRedoStack = false;\n      let heapSize = 0;\n      if (sharesUndoRedoStack || this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri)) {\n        const elements = this._undoRedoService.getElements(model.uri);\n        if (elements.past.length > 0 || elements.future.length > 0) {\n          for (const element of elements.past) {\n            if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n              maintainUndoRedoStack = true;\n              heapSize += element.heapSize(model.uri);\n              element.setModel(model.uri); // remove reference from text buffer instance\n            }\n          }\n          for (const element of elements.future) {\n            if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n              maintainUndoRedoStack = true;\n              heapSize += element.heapSize(model.uri);\n              element.setModel(model.uri); // remove reference from text buffer instance\n            }\n          }\n        }\n      }\n      const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n      const sha1Computer = this._getSHA1Computer();\n      if (!maintainUndoRedoStack) {\n        if (!sharesUndoRedoStack) {\n          const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n          if (initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n          }\n        }\n      } else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n        // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n        const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n        if (initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n        }\n      } else {\n        this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n        // We only invalidate the elements, but they remain in the undo-redo service.\n        this._undoRedoService.setElementsValidFlag(model.uri, false, element => isEditStackElement(element) && element.matchesResource(model.uri));\n        this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n      }\n      delete this._models[modelId];\n      modelData.dispose();\n      // clean up cache\n      delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n      this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n      const oldLanguageId = e.oldLanguage;\n      const newLanguageId = model.getLanguageId();\n      const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n      const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n      ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n      this._onModelModeChanged.fire({\n        model,\n        oldLanguageId: oldLanguageId\n      });\n    }\n    _getSHA1Computer() {\n      return new DefaultModelSHA1Computer();\n    }\n  };\n  return ModelService;\n})();\nModelService = ModelService_1 = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService), __param(2, IUndoRedoService), __param(3, IInstantiationService)], ModelService);\nexport { ModelService };\nexport let DefaultModelSHA1Computer = /*#__PURE__*/(() => {\n  class DefaultModelSHA1Computer {\n    static #_ = this.MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n    canComputeSHA1(model) {\n      return model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE;\n    }\n    computeSHA1(model) {\n      // compute the sha1\n      const shaComputer = new StringSHA1();\n      const snapshot = model.createSnapshot();\n      let text;\n      while (text = snapshot.read()) {\n        shaComputer.update(text);\n      }\n      return shaComputer.digest();\n    }\n  }\n  return DefaultModelSHA1Computer;\n})();","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","ModelService_1","Emitter","Disposable","DisposableStore","platform","TextModel","EDITOR_MODEL_DEFAULTS","PLAINTEXT_LANGUAGE_ID","ITextResourcePropertiesService","IConfigurationService","IUndoRedoService","StringSHA1","isEditStackElement","Schemas","equals","IInstantiationService","MODEL_ID","resource","toString","ModelData","constructor","model","onWillDispose","onDidChangeLanguage","_modelEventListeners","add","e","dispose","DEFAULT_EOL","isLinux","isMacintosh","DisposedModelInfo","uri","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","versionId","alternativeVersionId","ModelService","_","_2","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","_configurationService","_resourcePropertiesService","_undoRedoService","_instantiationService","_onModelAdded","_register","onModelAdded","event","_onModelRemoved","onModelRemoved","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","create","_models","_disposedModels","Map","_disposedModelsHeapSize","onDidChangeConfiguration","_updateModelOptions","undefined","_readModelOptions","config","isForSimpleWidget","tabSize","editor","parsedTabSize","parseInt","isNaN","indentSize","parsedIndentSize","Math","max","insertSpaces","Boolean","newDefaultEOL","eol","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","_getEOL","language","getEOL","getValue","overrideIdentifier","OS","_shouldRestoreUndoStack","result","getCreationOptions","languageIdOrSelection","languageId","creationOptions","oldOptionsByLanguageAndResource","keys","len","modelId","modelData","getLanguageId","affectsConfiguration","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","getLineCount","setEOL","updateOptions","bracketColorizationOptions","_insertDisposedModel","disposedModelData","set","_removeDisposedModel","get","delete","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","forEach","entry","push","sort","a","b","disposedModel","shift","restoreSnapshot","_createModelData","value","options","createInstance","has","elements","getElements","sha1Computer","_getSHA1Computer","sha1IsEqual","canComputeSHA1","computeSHA1","element","past","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","Error","_onWillDispose","_onDidChangeLanguage","createModel","languageSelection","fire","getModels","ret","getModel","_schemaShouldMaintainUndoRedoElements","scheme","file","vscodeRemote","vscodeUserData","vscodeNotebookCell","getUriComparisonKey","maintainUndoRedoStack","maxMemory","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","DefaultModelSHA1Computer","MAX_MODEL_SIZE","getValueLength","shaComputer","snapshot","createSnapshot","text","read","update","digest"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = class ModelService extends Disposable {\n    static { ModelService_1 = this; }\n    static { this.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024; }\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _instantiationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._undoRedoService = _undoRedoService;\n        this._instantiationService = _instantiationService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n        this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = 'tabSize';\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = Math.max(parsedIndentSize, 1);\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (config.editor?.bracketPairColorization && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n        const language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService_1._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions(e) {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            if (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n                continue; // perf: skip if this model is not affected by configuration change\n            }\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n        const model = this._instantiationService.createInstance(TextModel, value, languageIdOrSelection, options, resource);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1Computer = this._getSHA1Computer();\n            const sha1IsEqual = (sha1Computer.canComputeSHA1(model)\n                ? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n                : false);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        const sha1Computer = this._getSHA1Computer();\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n            // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n    _getSHA1Computer() {\n        return new DefaultModelSHA1Computer();\n    }\n};\nModelService = ModelService_1 = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IUndoRedoService),\n    __param(3, IInstantiationService)\n], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n    static { this.MAX_MODEL_SIZE = 10 * 1024 * 1024; } // takes 200ms to compute a sha1 on a 10MB model on a new machine\n    canComputeSHA1(model) {\n        return (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n    }\n    computeSHA1(model) {\n        // compute the sha1\n        const shaComputer = new StringSHA1();\n        const snapshot = model.createSnapshot();\n        let text;\n        while ((text = snapshot.read())) {\n            shaComputer.update(text);\n        }\n        return shaComputer.digest();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}