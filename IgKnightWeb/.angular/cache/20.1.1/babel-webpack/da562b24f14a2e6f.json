{"ast":null,"code":"import { selectFeatures, selectIsLoggedIn, selectPrivileges, selectRole } from './auth.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let RequestContextService = /*#__PURE__*/(() => {\n  class RequestContextService {\n    store;\n    isLoggedIn = false;\n    privileges = [];\n    features = [];\n    role = 'user';\n    isAdmin = false;\n    constructor(store) {\n      this.store = store;\n      this.store.select(selectIsLoggedIn).subscribe(value => {\n        this.isLoggedIn = value;\n      });\n      this.store.select(selectPrivileges).subscribe(value => {\n        this.privileges = value;\n      });\n      this.store.select(selectFeatures).subscribe(value => {\n        this.features = value;\n      });\n      this.store.select(selectRole).subscribe(value => {\n        this.role = value;\n        this.isAdmin = this.role === 'Admin' || this.role === 'admin';\n      });\n    }\n    hasPrivilege(privilege) {\n      return this.privileges.includes(privilege);\n    }\n    canAccessAdminPanel() {\n      return this.role != null && this.role !== 'user' && this.role != undefined;\n    }\n    static ɵfac = function RequestContextService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RequestContextService)(i0.ɵɵinject(i1.Store));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestContextService,\n      factory: RequestContextService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RequestContextService;\n})();","map":{"version":3,"names":["selectFeatures","selectIsLoggedIn","selectPrivileges","selectRole","RequestContextService","store","isLoggedIn","privileges","features","role","isAdmin","constructor","select","subscribe","value","hasPrivilege","privilege","includes","canAccessAdminPanel","undefined","i0","ɵɵinject","i1","Store","factory","ɵfac","providedIn"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\core\\services\\request.context.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { selectFeatures, selectIsLoggedIn, selectPrivileges, selectRole } from './auth.selectors';\r\nimport { Privileges } from '../../models/privileges.constant';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RequestContextService {\r\n    isLoggedIn: boolean = false;\r\n    privileges: string[] = [];\r\n    features: string[] = [];\r\n    role: string = 'user';\r\n    isAdmin: boolean = false;\r\n\r\n  constructor(private store: Store) \r\n  {\r\n    this.store.select(selectIsLoggedIn).subscribe(value => {\r\n        this.isLoggedIn = value;\r\n    });\r\n\r\n    this.store.select(selectPrivileges).subscribe(value => {\r\n        this.privileges = value;\r\n    });\r\n\r\n    this.store.select(selectFeatures).subscribe(value => {\r\n        this.features = value;\r\n    });\r\n\r\n    this.store.select(selectRole).subscribe(value => {\r\n        this.role = value;\r\n        this.isAdmin = (this.role === 'Admin' || this.role === 'admin');\r\n    });\r\n}\r\n\r\n    hasPrivilege(privilege: Privileges): boolean {\r\n    return this.privileges.includes(privilege);\r\n    }\r\n\r\n    canAccessAdminPanel(): boolean {\r\n        return (this.role != null && this.role !== 'user' && this.role!= undefined);\r\n    }\r\n}\r\n"],"mappings":"AAGA,SAASA,cAAc,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,kBAAkB;;;AAMjG,WAAaC,qBAAqB;EAA5B,MAAOA,qBAAqB;IAOZC,KAAA;IANlBC,UAAU,GAAY,KAAK;IAC3BC,UAAU,GAAa,EAAE;IACzBC,QAAQ,GAAa,EAAE;IACvBC,IAAI,GAAW,MAAM;IACrBC,OAAO,GAAY,KAAK;IAE1BC,YAAoBN,KAAY;MAAZ,KAAAA,KAAK,GAALA,KAAK;MAEvB,IAAI,CAACA,KAAK,CAACO,MAAM,CAACX,gBAAgB,CAAC,CAACY,SAAS,CAACC,KAAK,IAAG;QAClD,IAAI,CAACR,UAAU,GAAGQ,KAAK;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACT,KAAK,CAACO,MAAM,CAACV,gBAAgB,CAAC,CAACW,SAAS,CAACC,KAAK,IAAG;QAClD,IAAI,CAACP,UAAU,GAAGO,KAAK;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACT,KAAK,CAACO,MAAM,CAACZ,cAAc,CAAC,CAACa,SAAS,CAACC,KAAK,IAAG;QAChD,IAAI,CAACN,QAAQ,GAAGM,KAAK;MACzB,CAAC,CAAC;MAEF,IAAI,CAACT,KAAK,CAACO,MAAM,CAACT,UAAU,CAAC,CAACU,SAAS,CAACC,KAAK,IAAG;QAC5C,IAAI,CAACL,IAAI,GAAGK,KAAK;QACjB,IAAI,CAACJ,OAAO,GAAI,IAAI,CAACD,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAQ;MACnE,CAAC,CAAC;IACN;IAEIM,YAAYA,CAACC,SAAqB;MAClC,OAAO,IAAI,CAACT,UAAU,CAACU,QAAQ,CAACD,SAAS,CAAC;IAC1C;IAEAE,mBAAmBA,CAAA;MACf,OAAQ,IAAI,CAACT,IAAI,IAAI,IAAI,IAAI,IAAI,CAACA,IAAI,KAAK,MAAM,IAAI,IAAI,CAACA,IAAI,IAAGU,SAAS;IAC9E;;uCAjCSf,qBAAqB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA;IAAA;;aAArBnB,qBAAqB;MAAAoB,OAAA,EAArBpB,qBAAqB,CAAAqB,IAAA;MAAAC,UAAA,EAFpB;IAAM;;SAEPtB,qBAAqB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}