{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { Range } from '../core/range.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\nimport { WorkerTextModelSyncServer } from './textModelSync/textModelSync.impl.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n/**\n * @internal\n */\nexport let BaseEditorSimpleWorker = /*#__PURE__*/(() => {\n  class BaseEditorSimpleWorker {\n    constructor() {\n      this._workerTextModelSyncServer = new WorkerTextModelSyncServer();\n    }\n    dispose() {}\n    _getModel(uri) {\n      return this._workerTextModelSyncServer.getModel(uri);\n    }\n    _getModels() {\n      return this._workerTextModelSyncServer.getModels();\n    }\n    $acceptNewModel(data) {\n      this._workerTextModelSyncServer.$acceptNewModel(data);\n    }\n    $acceptModelChanged(uri, e) {\n      this._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n    }\n    $acceptRemovedModel(uri) {\n      this._workerTextModelSyncServer.$acceptRemovedModel(uri);\n    }\n    $computeUnicodeHighlights(url, options, range) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const model = _this._getModel(url);\n        if (!model) {\n          return {\n            ranges: [],\n            hasMore: false,\n            ambiguousCharacterCount: 0,\n            invisibleCharacterCount: 0,\n            nonBasicAsciiCharacterCount: 0\n          };\n        }\n        return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n      })();\n    }\n    $findSectionHeaders(url, options) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this2._getModel(url);\n        if (!model) {\n          return [];\n        }\n        return findSectionHeaders(model, options);\n      })();\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    $computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const original = _this3._getModel(originalUrl);\n        const modified = _this3._getModel(modifiedUrl);\n        if (!original || !modified) {\n          return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n      })();\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n      const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n      const originalLines = originalTextModel.getLinesContent();\n      const modifiedLines = modifiedTextModel.getLinesContent();\n      const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n      const identical = result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel);\n      function getLineChanges(changes) {\n        return changes.map(m => [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, m.innerChanges?.map(m => [m.originalRange.startLineNumber, m.originalRange.startColumn, m.originalRange.endLineNumber, m.originalRange.endColumn, m.modifiedRange.startLineNumber, m.modifiedRange.startColumn, m.modifiedRange.endLineNumber, m.modifiedRange.endColumn])]);\n      }\n      return {\n        identical,\n        quitEarly: result.hitTimeout,\n        changes: getLineChanges(result.changes),\n        moves: result.moves.map(m => [m.lineRangeMapping.original.startLineNumber, m.lineRangeMapping.original.endLineNumberExclusive, m.lineRangeMapping.modified.startLineNumber, m.lineRangeMapping.modified.endLineNumberExclusive, getLineChanges(m.changes)])\n      };\n    }\n    static _modelsAreIdentical(original, modified) {\n      const originalLineCount = original.getLineCount();\n      const modifiedLineCount = modified.getLineCount();\n      if (originalLineCount !== modifiedLineCount) {\n        return false;\n      }\n      for (let line = 1; line <= originalLineCount; line++) {\n        const originalLine = original.getLineContent(line);\n        const modifiedLine = modified.getLineContent(line);\n        if (originalLine !== modifiedLine) {\n          return false;\n        }\n      }\n      return true;\n    }\n    // ---- END diff --------------------------------------------------------------------------\n    // ---- BEGIN minimal edits ---------------------------------------------------------------\n    static #_ = this._diffLimit = 100000;\n    $computeMoreMinimalEdits(modelUrl, edits, pretty) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this4._getModel(modelUrl);\n        if (!model) {\n          return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n          if (a.range && b.range) {\n            return Range.compareRangesUsingStarts(a.range, b.range);\n          }\n          // eol only changes should go to the end\n          const aRng = a.range ? 0 : 1;\n          const bRng = b.range ? 0 : 1;\n          return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n          if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n            edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n            edits[writeIndex].text += edits[readIndex].text;\n          } else {\n            writeIndex++;\n            edits[writeIndex] = edits[readIndex];\n          }\n        }\n        edits.length = writeIndex + 1;\n        for (let {\n          range,\n          text,\n          eol\n        } of edits) {\n          if (typeof eol === 'number') {\n            lastEol = eol;\n          }\n          if (Range.isEmpty(range) && !text) {\n            // empty change\n            continue;\n          }\n          const original = model.getValueInRange(range);\n          text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n          if (original === text) {\n            // noop\n            continue;\n          }\n          // make sure diff won't take too long\n          if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n            result.push({\n              range,\n              text\n            });\n            continue;\n          }\n          // compute diff between original and edit.text\n          const changes = stringDiff(original, text, pretty);\n          const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n          for (const change of changes) {\n            const start = model.positionAt(editOffset + change.originalStart);\n            const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n            const newEdit = {\n              text: text.substr(change.modifiedStart, change.modifiedLength),\n              range: {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n              }\n            };\n            if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n              result.push(newEdit);\n            }\n          }\n        }\n        if (typeof lastEol === 'number') {\n          result.push({\n            eol: lastEol,\n            text: '',\n            range: {\n              startLineNumber: 0,\n              startColumn: 0,\n              endLineNumber: 0,\n              endColumn: 0\n            }\n          });\n        }\n        return result;\n      })();\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    $computeLinks(modelUrl) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this5._getModel(modelUrl);\n        if (!model) {\n          return null;\n        }\n        return computeLinks(model);\n      })();\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    $computeDefaultDocumentColors(modelUrl) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this6._getModel(modelUrl);\n        if (!model) {\n          return null;\n        }\n        return computeDefaultDocumentColors(model);\n      })();\n    }\n    // ---- BEGIN suggest --------------------------------------------------------------------------\n    static #_2 = this._suggestionsLimit = 10000;\n    $textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        const sw = new StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n          const model = _this7._getModel(url);\n          if (!model) {\n            continue;\n          }\n          for (const word of model.words(wordDefRegExp)) {\n            if (word === leadingWord || !isNaN(Number(word))) {\n              continue;\n            }\n            seen.add(word);\n            if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n              break outer;\n            }\n          }\n        }\n        return {\n          words: Array.from(seen),\n          duration: sw.elapsed()\n        };\n      })();\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    $computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this8._getModel(modelUrl);\n        if (!model) {\n          return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n          const words = model.getLineWords(line, wordDefRegExp);\n          for (const word of words) {\n            if (!isNaN(Number(word.word))) {\n              continue;\n            }\n            let array = result[word.word];\n            if (!array) {\n              array = [];\n              result[word.word] = array;\n            }\n            array.push({\n              startLineNumber: line,\n              startColumn: word.startColumn,\n              endLineNumber: line,\n              endColumn: word.endColumn\n            });\n          }\n        }\n        return result;\n      })();\n    }\n    //#endregion\n    $navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this9._getModel(modelUrl);\n        if (!model) {\n          return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n          range = {\n            startLineNumber: range.startLineNumber,\n            startColumn: range.startColumn,\n            endLineNumber: range.endLineNumber,\n            endColumn: range.endColumn + 1\n          };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({\n          lineNumber: range.startLineNumber,\n          column: range.startColumn\n        }, wordDefRegExp);\n        if (!wordRange) {\n          return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n      })();\n    }\n  }\n  return BaseEditorSimpleWorker;\n})();\n/**\n * @internal\n */\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n  constructor(_host, _foreignModuleFactory) {\n    super();\n    this._host = _host;\n    this._foreignModuleFactory = _foreignModuleFactory;\n    this._foreignModule = null;\n  }\n  $ping() {\n    return _asyncToGenerator(function* () {\n      return 'pong';\n    })();\n  }\n  // ---- BEGIN foreign module support --------------------------------------------------------------------------\n  $loadForeignModule(moduleId, createData, foreignHostMethods) {\n    const proxyMethodRequest = (method, args) => {\n      return this._host.$fhr(method, args);\n    };\n    const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n    const ctx = {\n      host: foreignHost,\n      getMirrorModels: () => {\n        return this._getModels();\n      }\n    };\n    if (this._foreignModuleFactory) {\n      this._foreignModule = this._foreignModuleFactory(ctx, createData);\n      // static foreing module\n      return Promise.resolve(getAllMethodNames(this._foreignModule));\n    }\n    return new Promise((resolve, reject) => {\n      const onModuleCallback = foreignModule => {\n        this._foreignModule = foreignModule.create(ctx, createData);\n        resolve(getAllMethodNames(this._foreignModule));\n      };\n      if (!isESM) {\n        require([`${moduleId}`], onModuleCallback, reject);\n      } else {\n        const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n        import(`${url}`).then(onModuleCallback).catch(reject);\n      }\n    });\n  }\n  // foreign method request\n  $fmr(method, args) {\n    if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer) {\n  return new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null);\n}\nif (typeof importScripts === 'function') {\n  // Running in a web worker\n  globalThis.monaco = createMonacoBaseAPI();\n}","map":{"version":3,"names":["stringDiff","Range","computeLinks","BasicInplaceReplace","createMonacoBaseAPI","EditorWorkerHost","StopWatch","UnicodeTextModelHighlighter","linesDiffComputers","createProxyObject","getAllMethodNames","FileAccess","computeDefaultDocumentColors","findSectionHeaders","WorkerTextModelSyncServer","isESM","BaseEditorSimpleWorker","constructor","_workerTextModelSyncServer","dispose","_getModel","uri","getModel","_getModels","getModels","$acceptNewModel","data","$acceptModelChanged","e","$acceptRemovedModel","$computeUnicodeHighlights","url","options","range","_this","_asyncToGenerator","model","ranges","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeUnicodeHighlights","$findSectionHeaders","_this2","$computeDiff","originalUrl","modifiedUrl","algorithm","_this3","original","modified","result","EditorSimpleWorker","computeDiff","originalTextModel","modifiedTextModel","diffAlgorithm","getDefault","getLegacy","originalLines","getLinesContent","modifiedLines","identical","changes","length","_modelsAreIdentical","getLineChanges","map","m","startLineNumber","endLineNumberExclusive","innerChanges","originalRange","startColumn","endLineNumber","endColumn","modifiedRange","quitEarly","hitTimeout","moves","lineRangeMapping","originalLineCount","getLineCount","modifiedLineCount","line","originalLine","getLineContent","modifiedLine","_","_diffLimit","$computeMoreMinimalEdits","modelUrl","edits","pretty","_this4","lastEol","undefined","slice","sort","a","b","compareRangesUsingStarts","aRng","bRng","writeIndex","readIndex","getEndPosition","equals","getStartPosition","fromPositions","text","eol","isEmpty","getValueInRange","replace","Math","max","push","editOffset","offsetAt","lift","change","start","positionAt","originalStart","end","originalLength","newEdit","substr","modifiedStart","modifiedLength","lineNumber","column","$computeLinks","_this5","$computeDefaultDocumentColors","_this6","_2","_suggestionsLimit","$textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","_this7","sw","wordDefRegExp","RegExp","seen","Set","outer","word","words","isNaN","Number","add","size","Array","from","duration","elapsed","$computeWordRanges","_this8","Object","create","getLineWords","array","$navigateValueSet","up","_this9","selectionText","wordRange","getWordAtPosition","INSTANCE","navigateValueSet","_host","_foreignModuleFactory","_foreignModule","$ping","$loadForeignModule","moduleId","createData","foreignHostMethods","proxyMethodRequest","method","args","$fhr","foreignHost","ctx","host","getMirrorModels","Promise","resolve","reject","onModuleCallback","foreignModule","require","asBrowserUri","toString","then","catch","$fmr","Error","apply","workerServer","getChannel","importScripts","globalThis","monaco"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { Range } from '../core/range.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\nimport { WorkerTextModelSyncServer } from './textModelSync/textModelSync.impl.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n/**\n * @internal\n */\nexport class BaseEditorSimpleWorker {\n    constructor() {\n        this._workerTextModelSyncServer = new WorkerTextModelSyncServer();\n    }\n    dispose() {\n    }\n    _getModel(uri) {\n        return this._workerTextModelSyncServer.getModel(uri);\n    }\n    _getModels() {\n        return this._workerTextModelSyncServer.getModels();\n    }\n    $acceptNewModel(data) {\n        this._workerTextModelSyncServer.$acceptNewModel(data);\n    }\n    $acceptModelChanged(uri, e) {\n        this._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n    }\n    $acceptRemovedModel(uri) {\n        this._workerTextModelSyncServer.$acceptRemovedModel(uri);\n    }\n    async $computeUnicodeHighlights(url, options, range) {\n        const model = this._getModel(url);\n        if (!model) {\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n        }\n        return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    }\n    async $findSectionHeaders(url, options) {\n        const model = this._getModel(url);\n        if (!model) {\n            return [];\n        }\n        return findSectionHeaders(model, options);\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    async $computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        const original = this._getModel(originalUrl);\n        const modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, m.innerChanges?.map(m => [\n                    m.originalRange.startLineNumber,\n                    m.originalRange.startColumn,\n                    m.originalRange.endLineNumber,\n                    m.originalRange.endColumn,\n                    m.modifiedRange.startLineNumber,\n                    m.modifiedRange.startColumn,\n                    m.modifiedRange.endLineNumber,\n                    m.modifiedRange.endColumn,\n                ])]));\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // ---- END diff --------------------------------------------------------------------------\n    // ---- BEGIN minimal edits ---------------------------------------------------------------\n    static { this._diffLimit = 100000; }\n    async $computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n            if (a.range && b.range) {\n                return Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            const aRng = a.range ? 0 : 1;\n            const bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n            if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n                edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n                edits[writeIndex].text += edits[readIndex].text;\n            }\n            else {\n                writeIndex++;\n                edits[writeIndex] = edits[readIndex];\n            }\n        }\n        edits.length = writeIndex + 1;\n        for (let { range, text, eol } of edits) {\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            const original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                result.push({ range, text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            const changes = stringDiff(original, text, pretty);\n            const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n            for (const change of changes) {\n                const start = model.positionAt(editOffset + change.originalStart);\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                const newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return result;\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    async $computeLinks(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeLinks(model);\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    async $computeDefaultDocumentColors(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeDefaultDocumentColors(model);\n    }\n    // ---- BEGIN suggest --------------------------------------------------------------------------\n    static { this._suggestionsLimit = 10000; }\n    async $textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        const sw = new StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n            const model = this._getModel(url);\n            if (!model) {\n                continue;\n            }\n            for (const word of model.words(wordDefRegExp)) {\n                if (word === leadingWord || !isNaN(Number(word))) {\n                    continue;\n                }\n                seen.add(word);\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                    break outer;\n                }\n            }\n        }\n        return { words: Array.from(seen), duration: sw.elapsed() };\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    async $computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n            const words = model.getLineWords(line, wordDefRegExp);\n            for (const word of words) {\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                let array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return result;\n    }\n    //#endregion\n    async $navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n    constructor(_host, _foreignModuleFactory) {\n        super();\n        this._host = _host;\n        this._foreignModuleFactory = _foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    async $ping() {\n        return 'pong';\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    $loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.$fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        return new Promise((resolve, reject) => {\n            const onModuleCallback = (foreignModule) => {\n                this._foreignModule = foreignModule.create(ctx, createData);\n                resolve(getAllMethodNames(this._foreignModule));\n            };\n            if (!isESM) {\n                require([`${moduleId}`], onModuleCallback, reject);\n            }\n            else {\n                const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n                import(`${url}`).then(onModuleCallback).catch(reject);\n            }\n        });\n    }\n    // foreign method request\n    $fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer) {\n    return new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = createMonacoBaseAPI();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}