{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Inject, ViewChild, Output, forwardRef, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"editorContainer\"];\nconst NGX_MONACO_EDITOR_CONFIG = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');\nlet loadedMonaco = false;\nlet loadPromise;\nlet BaseEditor = /*#__PURE__*/(() => {\n  class BaseEditor {\n    constructor(config) {\n      this.config = config;\n      this.onInit = new EventEmitter();\n    }\n    ngAfterViewInit() {\n      if (loadedMonaco) {\n        // Wait until monaco editor is available\n        loadPromise.then(() => {\n          this.initMonaco(this._options);\n        });\n      } else {\n        loadedMonaco = true;\n        loadPromise = new Promise(resolve => {\n          const baseUrl = (this.config.baseUrl || './assets') + '/monaco-editor/min/vs';\n          if (typeof window.monaco === 'object') {\n            resolve();\n            return;\n          }\n          const onGotAmdLoader = () => {\n            // Load monaco\n            window.require.config({\n              paths: {\n                'vs': `${baseUrl}`\n              }\n            });\n            window.require([`vs/editor/editor.main`], () => {\n              if (typeof this.config.onMonacoLoad === 'function') {\n                this.config.onMonacoLoad();\n              }\n              this.initMonaco(this._options);\n              resolve();\n            });\n          };\n          // Load AMD loader if necessary\n          if (!window.require) {\n            const loaderScript = document.createElement('script');\n            loaderScript.type = 'text/javascript';\n            loaderScript.src = `${baseUrl}/loader.js`;\n            loaderScript.addEventListener('load', onGotAmdLoader);\n            document.body.appendChild(loaderScript);\n          } else {\n            onGotAmdLoader();\n          }\n        });\n      }\n    }\n    ngOnDestroy() {\n      if (this._windowResizeSubscription) {\n        this._windowResizeSubscription.unsubscribe();\n      }\n      if (this._editor) {\n        this._editor.dispose();\n        this._editor = undefined;\n      }\n    }\n  }\n  BaseEditor.ɵfac = function BaseEditor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BaseEditor)(i0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG));\n  };\n  BaseEditor.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BaseEditor,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function BaseEditor_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._editorContainer = _t.first);\n      }\n    },\n    outputs: {\n      onInit: \"onInit\"\n    },\n    standalone: false,\n    decls: 0,\n    vars: 0,\n    template: function BaseEditor_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return BaseEditor;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet EditorComponent = /*#__PURE__*/(() => {\n  class EditorComponent extends BaseEditor {\n    constructor(zone, editorConfig) {\n      super(editorConfig);\n      this.zone = zone;\n      this.editorConfig = editorConfig;\n      this._value = '';\n      this.propagateChange = _ => {};\n      this.onTouched = () => {};\n    }\n    set options(options) {\n      this._options = Object.assign({}, this.config.defaultOptions, options);\n      if (this._editor) {\n        this._editor.dispose();\n        this.initMonaco(options);\n      }\n    }\n    get options() {\n      return this._options;\n    }\n    set model(model) {\n      this.options.model = model;\n      if (this._editor) {\n        this._editor.dispose();\n        this.initMonaco(this.options);\n      }\n    }\n    writeValue(value) {\n      this._value = value || '';\n      // Fix for value change while dispose in process.\n      setTimeout(() => {\n        if (this._editor && !this.options.model) {\n          this._editor.setValue(this._value);\n        }\n      });\n    }\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    initMonaco(options) {\n      const hasModel = !!options.model;\n      if (hasModel) {\n        const model = monaco.editor.getModel(options.model.uri || '');\n        if (model) {\n          options.model = model;\n          options.model.setValue(this._value);\n        } else {\n          options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);\n        }\n      }\n      this._editor = monaco.editor.create(this._editorContainer.nativeElement, options);\n      if (!hasModel) {\n        this._editor.setValue(this._value);\n      }\n      this._editor.onDidChangeModelContent(e => {\n        const value = this._editor.getValue();\n        // value is not propagated to parent when executing outside zone.\n        this.zone.run(() => {\n          this.propagateChange(value);\n          this._value = value;\n        });\n      });\n      this._editor.onDidBlurEditorWidget(() => {\n        this.onTouched();\n      });\n      // refresh layout on resize event.\n      if (this._windowResizeSubscription) {\n        this._windowResizeSubscription.unsubscribe();\n      }\n      this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n      this.onInit.emit(this._editor);\n    }\n  }\n  EditorComponent.ɵfac = function EditorComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || EditorComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG));\n  };\n  EditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: EditorComponent,\n    selectors: [[\"ngx-monaco-editor\"]],\n    inputs: {\n      options: \"options\",\n      model: \"model\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => EditorComponent),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"editorContainer\", \"\"], [1, \"editor-container\"]],\n    template: function EditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 1, 0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n          display: block;\\n          height: 200px;\\n      }\\n\\n      .editor-container[_ngcontent-%COMP%] {\\n          width: 100%;\\n          height: 98%;\\n      }\"]\n  });\n  return EditorComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DiffEditorComponent = /*#__PURE__*/(() => {\n  class DiffEditorComponent extends BaseEditor {\n    constructor(editorConfig) {\n      super(editorConfig);\n      this.editorConfig = editorConfig;\n    }\n    set options(options) {\n      this._options = Object.assign({}, this.config.defaultOptions, options);\n      if (this._editor) {\n        this._editor.dispose();\n        this.initMonaco(options);\n      }\n    }\n    get options() {\n      return this._options;\n    }\n    set originalModel(model) {\n      this._originalModel = model;\n      if (this._editor) {\n        this._editor.dispose();\n        this.initMonaco(this.options);\n      }\n    }\n    set modifiedModel(model) {\n      this._modifiedModel = model;\n      if (this._editor) {\n        this._editor.dispose();\n        this.initMonaco(this.options);\n      }\n    }\n    initMonaco(options) {\n      if (!this._originalModel || !this._modifiedModel) {\n        throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');\n      }\n      this._originalModel.language = this._originalModel.language || options.language;\n      this._modifiedModel.language = this._modifiedModel.language || options.language;\n      let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);\n      let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);\n      this._editorContainer.nativeElement.innerHTML = '';\n      const theme = options.theme;\n      this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);\n      options.theme = theme;\n      this._editor.setModel({\n        original: originalModel,\n        modified: modifiedModel\n      });\n      // refresh layout on resize event.\n      if (this._windowResizeSubscription) {\n        this._windowResizeSubscription.unsubscribe();\n      }\n      this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n      this.onInit.emit(this._editor);\n    }\n  }\n  DiffEditorComponent.ɵfac = function DiffEditorComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DiffEditorComponent)(i0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG));\n  };\n  DiffEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DiffEditorComponent,\n    selectors: [[\"ngx-monaco-diff-editor\"]],\n    inputs: {\n      options: \"options\",\n      originalModel: \"originalModel\",\n      modifiedModel: \"modifiedModel\"\n    },\n    standalone: false,\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"editorContainer\", \"\"], [1, \"editor-container\"]],\n    template: function DiffEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 1, 0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n      display: block;\\n      height: 200px;\\n    }\\n\\n    .editor-container[_ngcontent-%COMP%] {\\n      width: 100%;\\n      height: 98%;\\n    }\"]\n  });\n  return DiffEditorComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MonacoEditorModule = /*#__PURE__*/(() => {\n  class MonacoEditorModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: MonacoEditorModule,\n        providers: [{\n          provide: NGX_MONACO_EDITOR_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }\n  MonacoEditorModule.ɵfac = function MonacoEditorModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MonacoEditorModule)();\n  };\n  MonacoEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MonacoEditorModule\n  });\n  MonacoEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MonacoEditorModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DiffEditorComponent, EditorComponent, MonacoEditorModule, NGX_MONACO_EDITOR_CONFIG };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Component","Inject","ViewChild","Output","forwardRef","Input","NgModule","NG_VALUE_ACCESSOR","fromEvent","CommonModule","_c0","NGX_MONACO_EDITOR_CONFIG","loadedMonaco","loadPromise","BaseEditor","constructor","config","onInit","ngAfterViewInit","then","initMonaco","_options","Promise","resolve","baseUrl","window","monaco","onGotAmdLoader","require","paths","onMonacoLoad","loaderScript","document","createElement","type","src","addEventListener","body","appendChild","ngOnDestroy","_windowResizeSubscription","unsubscribe","_editor","dispose","undefined","ɵfac","BaseEditor_Factory","__ngFactoryType__","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","BaseEditor_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_editorContainer","first","outputs","standalone","decls","vars","template","BaseEditor_Template","encapsulation","ngDevMode","EditorComponent","zone","editorConfig","_value","propagateChange","_","onTouched","options","Object","assign","defaultOptions","model","writeValue","value","setTimeout","setValue","registerOnChange","fn","registerOnTouched","hasModel","editor","getModel","uri","createModel","language","create","nativeElement","onDidChangeModelContent","e","getValue","run","onDidBlurEditorWidget","subscribe","layout","emit","EditorComponent_Factory","NgZone","inputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵInheritDefinitionFeature","consts","EditorComponent_Template","ɵɵelement","styles","DiffEditorComponent","originalModel","_originalModel","modifiedModel","_modifiedModel","Error","code","innerHTML","theme","createDiffEditor","setModel","original","modified","DiffEditorComponent_Factory","DiffEditorComponent_Template","MonacoEditorModule","forRoot","ngModule","providers","useValue","MonacoEditorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/ngx-monaco-editor/fesm2015/ngx-monaco-editor.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Inject, ViewChild, Output, forwardRef, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nconst NGX_MONACO_EDITOR_CONFIG = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');\n\nlet loadedMonaco = false;\nlet loadPromise;\nclass BaseEditor {\n    constructor(config) {\n        this.config = config;\n        this.onInit = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        if (loadedMonaco) {\n            // Wait until monaco editor is available\n            loadPromise.then(() => {\n                this.initMonaco(this._options);\n            });\n        }\n        else {\n            loadedMonaco = true;\n            loadPromise = new Promise((resolve) => {\n                const baseUrl = (this.config.baseUrl || './assets') + '/monaco-editor/min/vs';\n                if (typeof (window.monaco) === 'object') {\n                    resolve();\n                    return;\n                }\n                const onGotAmdLoader = () => {\n                    // Load monaco\n                    window.require.config({ paths: { 'vs': `${baseUrl}` } });\n                    window.require([`vs/editor/editor.main`], () => {\n                        if (typeof this.config.onMonacoLoad === 'function') {\n                            this.config.onMonacoLoad();\n                        }\n                        this.initMonaco(this._options);\n                        resolve();\n                    });\n                };\n                // Load AMD loader if necessary\n                if (!window.require) {\n                    const loaderScript = document.createElement('script');\n                    loaderScript.type = 'text/javascript';\n                    loaderScript.src = `${baseUrl}/loader.js`;\n                    loaderScript.addEventListener('load', onGotAmdLoader);\n                    document.body.appendChild(loaderScript);\n                }\n                else {\n                    onGotAmdLoader();\n                }\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._windowResizeSubscription) {\n            this._windowResizeSubscription.unsubscribe();\n        }\n        if (this._editor) {\n            this._editor.dispose();\n            this._editor = undefined;\n        }\n    }\n}\nBaseEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: BaseEditor, deps: [{ token: NGX_MONACO_EDITOR_CONFIG }], target: i0.ɵɵFactoryTarget.Component });\nBaseEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: BaseEditor, selector: \"ng-component\", outputs: { onInit: \"onInit\" }, viewQueries: [{ propertyName: \"_editorContainer\", first: true, predicate: [\"editorContainer\"], descendants: true, static: true }], ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: BaseEditor, decorators: [{\n            type: Component,\n            args: [{\n                    template: ''\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MONACO_EDITOR_CONFIG]\n                }] }]; }, propDecorators: { _editorContainer: [{\n                type: ViewChild,\n                args: ['editorContainer', { static: true }]\n            }], onInit: [{\n                type: Output\n            }] } });\n\nclass EditorComponent extends BaseEditor {\n    constructor(zone, editorConfig) {\n        super(editorConfig);\n        this.zone = zone;\n        this.editorConfig = editorConfig;\n        this._value = '';\n        this.propagateChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    set options(options) {\n        this._options = Object.assign({}, this.config.defaultOptions, options);\n        if (this._editor) {\n            this._editor.dispose();\n            this.initMonaco(options);\n        }\n    }\n    get options() {\n        return this._options;\n    }\n    set model(model) {\n        this.options.model = model;\n        if (this._editor) {\n            this._editor.dispose();\n            this.initMonaco(this.options);\n        }\n    }\n    writeValue(value) {\n        this._value = value || '';\n        // Fix for value change while dispose in process.\n        setTimeout(() => {\n            if (this._editor && !this.options.model) {\n                this._editor.setValue(this._value);\n            }\n        });\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    initMonaco(options) {\n        const hasModel = !!options.model;\n        if (hasModel) {\n            const model = monaco.editor.getModel(options.model.uri || '');\n            if (model) {\n                options.model = model;\n                options.model.setValue(this._value);\n            }\n            else {\n                options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);\n            }\n        }\n        this._editor = monaco.editor.create(this._editorContainer.nativeElement, options);\n        if (!hasModel) {\n            this._editor.setValue(this._value);\n        }\n        this._editor.onDidChangeModelContent((e) => {\n            const value = this._editor.getValue();\n            // value is not propagated to parent when executing outside zone.\n            this.zone.run(() => {\n                this.propagateChange(value);\n                this._value = value;\n            });\n        });\n        this._editor.onDidBlurEditorWidget(() => {\n            this.onTouched();\n        });\n        // refresh layout on resize event.\n        if (this._windowResizeSubscription) {\n            this._windowResizeSubscription.unsubscribe();\n        }\n        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n        this.onInit.emit(this._editor);\n    }\n}\nEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: EditorComponent, deps: [{ token: i0.NgZone }, { token: NGX_MONACO_EDITOR_CONFIG }], target: i0.ɵɵFactoryTarget.Component });\nEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: EditorComponent, selector: \"ngx-monaco-editor\", inputs: { options: \"options\", model: \"model\" }, providers: [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => EditorComponent),\n            multi: true\n        }], usesInheritance: true, ngImport: i0, template: '<div class=\"editor-container\" #editorContainer></div>', isInline: true, styles: [\"\\n      :host {\\n          display: block;\\n          height: 200px;\\n      }\\n\\n      .editor-container {\\n          width: 100%;\\n          height: 98%;\\n      }\\n  \"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: EditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-monaco-editor',\n                    template: '<div class=\"editor-container\" #editorContainer></div>',\n                    styles: [`\n      :host {\n          display: block;\n          height: 200px;\n      }\n\n      .editor-container {\n          width: 100%;\n          height: 98%;\n      }\n  `],\n                    providers: [{\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => EditorComponent),\n                            multi: true\n                        }]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MONACO_EDITOR_CONFIG]\n                }] }]; }, propDecorators: { options: [{\n                type: Input,\n                args: ['options']\n            }], model: [{\n                type: Input,\n                args: ['model']\n            }] } });\n\nclass DiffEditorComponent extends BaseEditor {\n    constructor(editorConfig) {\n        super(editorConfig);\n        this.editorConfig = editorConfig;\n    }\n    set options(options) {\n        this._options = Object.assign({}, this.config.defaultOptions, options);\n        if (this._editor) {\n            this._editor.dispose();\n            this.initMonaco(options);\n        }\n    }\n    get options() {\n        return this._options;\n    }\n    set originalModel(model) {\n        this._originalModel = model;\n        if (this._editor) {\n            this._editor.dispose();\n            this.initMonaco(this.options);\n        }\n    }\n    set modifiedModel(model) {\n        this._modifiedModel = model;\n        if (this._editor) {\n            this._editor.dispose();\n            this.initMonaco(this.options);\n        }\n    }\n    initMonaco(options) {\n        if (!this._originalModel || !this._modifiedModel) {\n            throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');\n        }\n        this._originalModel.language = this._originalModel.language || options.language;\n        this._modifiedModel.language = this._modifiedModel.language || options.language;\n        let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);\n        let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);\n        this._editorContainer.nativeElement.innerHTML = '';\n        const theme = options.theme;\n        this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);\n        options.theme = theme;\n        this._editor.setModel({\n            original: originalModel,\n            modified: modifiedModel\n        });\n        // refresh layout on resize event.\n        if (this._windowResizeSubscription) {\n            this._windowResizeSubscription.unsubscribe();\n        }\n        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n        this.onInit.emit(this._editor);\n    }\n}\nDiffEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: DiffEditorComponent, deps: [{ token: NGX_MONACO_EDITOR_CONFIG }], target: i0.ɵɵFactoryTarget.Component });\nDiffEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: DiffEditorComponent, selector: \"ngx-monaco-diff-editor\", inputs: { options: \"options\", originalModel: \"originalModel\", modifiedModel: \"modifiedModel\" }, usesInheritance: true, ngImport: i0, template: '<div class=\"editor-container\" #editorContainer></div>', isInline: true, styles: [\"\\n    :host {\\n      display: block;\\n      height: 200px;\\n    }\\n\\n    .editor-container {\\n      width: 100%;\\n      height: 98%;\\n    }\\n  \"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: DiffEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-monaco-diff-editor',\n                    template: '<div class=\"editor-container\" #editorContainer></div>',\n                    styles: [`\n    :host {\n      display: block;\n      height: 200px;\n    }\n\n    .editor-container {\n      width: 100%;\n      height: 98%;\n    }\n  `]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MONACO_EDITOR_CONFIG]\n                }] }]; }, propDecorators: { options: [{\n                type: Input,\n                args: ['options']\n            }], originalModel: [{\n                type: Input,\n                args: ['originalModel']\n            }], modifiedModel: [{\n                type: Input,\n                args: ['modifiedModel']\n            }] } });\n\nclass MonacoEditorModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: MonacoEditorModule,\n            providers: [\n                { provide: NGX_MONACO_EDITOR_CONFIG, useValue: config }\n            ]\n        };\n    }\n}\nMonacoEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MonacoEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMonacoEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MonacoEditorModule, declarations: [EditorComponent,\n        DiffEditorComponent], imports: [CommonModule], exports: [EditorComponent,\n        DiffEditorComponent] });\nMonacoEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MonacoEditorModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: MonacoEditorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        EditorComponent,\n                        DiffEditorComponent\n                    ],\n                    exports: [\n                        EditorComponent,\n                        DiffEditorComponent\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DiffEditorComponent, EditorComponent, MonacoEditorModule, NGX_MONACO_EDITOR_CONFIG };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}