{"ast":null,"code":"import { from } from 'rxjs';\nimport { loadStaticContent, loadStaticTopics } from './static-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DocumentationService = /*#__PURE__*/(() => {\n  class DocumentationService {\n    http;\n    // Toggle between static data and API\n    useStatic = true;\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Get list of topics for a given technology\n     */\n    getTopics(technology) {\n      if (this.useStatic) {\n        return from(loadStaticTopics(technology));\n      } else {\n        return this.http.get(`/api/docs/${technology}`);\n      }\n    }\n    /**\n     * Get topic content (markdown, HTML, or JSON data)\n     */\n    getTopicContent(technology, slug) {\n      if (this.useStatic) {\n        return from(loadStaticContent(technology, slug)); // async lazy load\n      } else {\n        return this.http.get(`/api/docs/${technology}/${slug}`);\n      }\n    }\n    static ɵfac = function DocumentationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DocumentationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DocumentationService,\n      factory: DocumentationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DocumentationService;\n})();","map":{"version":3,"names":["from","loadStaticContent","loadStaticTopics","DocumentationService","http","useStatic","constructor","getTopics","technology","get","getTopicContent","slug","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\services\\documentation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { Topic, TopicContent } from '../../../models/topic.model';\r\nimport { loadStaticContent, loadStaticTopics } from './static-loader';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocumentationService {\r\n\r\n  // Toggle between static data and API\r\n  private readonly useStatic = true;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Get list of topics for a given technology\r\n   */\r\n  getTopics(technology: string): Observable<Topic[]> {\r\n    if (this.useStatic) {\r\n      return from(loadStaticTopics(technology));\r\n    } else {\r\n      return this.http.get<Topic[]>(`/api/docs/${technology}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get topic content (markdown, HTML, or JSON data)\r\n   */\r\n  getTopicContent(technology: string, slug: string): Observable<TopicContent | undefined> {\r\n    if (this.useStatic) {\r\n      return from(loadStaticContent(technology, slug)); // async lazy load\r\n    } else {\r\n      return this.http.get<TopicContent>(`/api/docs/${technology}/${slug}`);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,IAAI,QAAwB,MAAM;AAE3C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,iBAAiB;;;AAKrE,WAAaC,oBAAoB;EAA3B,MAAOA,oBAAoB;IAKXC,IAAA;IAHpB;IACiBC,SAAS,GAAG,IAAI;IAEjCC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;;;IAGAG,SAASA,CAACC,UAAkB;MAC1B,IAAI,IAAI,CAACH,SAAS,EAAE;QAClB,OAAOL,IAAI,CAACE,gBAAgB,CAACM,UAAU,CAAC,CAAC;MAC3C,CAAC,MAAM;QACL,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,aAAaD,UAAU,EAAE,CAAC;MAC1D;IACF;IAEA;;;IAGAE,eAAeA,CAACF,UAAkB,EAAEG,IAAY;MAC9C,IAAI,IAAI,CAACN,SAAS,EAAE;QAClB,OAAOL,IAAI,CAACC,iBAAiB,CAACO,UAAU,EAAEG,IAAI,CAAC,CAAC,CAAC,CAAC;MACpD,CAAC,MAAM;QACL,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAe,aAAaD,UAAU,IAAIG,IAAI,EAAE,CAAC;MACvE;IACF;;uCA3BWR,oBAAoB,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAApBZ,oBAAoB;MAAAa,OAAA,EAApBb,oBAAoB,CAAAc,IAAA;MAAAC,UAAA,EAFnB;IAAM;;SAEPf,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}