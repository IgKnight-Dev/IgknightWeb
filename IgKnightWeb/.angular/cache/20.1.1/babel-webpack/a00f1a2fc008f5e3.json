{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nclass SuggestInlineCompletion {\n  constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n    this.range = range;\n    this.insertText = insertText;\n    this.filterText = filterText;\n    this.additionalTextEdits = additionalTextEdits;\n    this.command = command;\n    this.completion = completion;\n  }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n  constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n    super(completions.disposable);\n    this.model = model;\n    this.line = line;\n    this.word = word;\n    this.completionModel = completionModel;\n    this._suggestMemoryService = _suggestMemoryService;\n  }\n  canBeReused(model, line, word) {\n    return this.model === model // same model\n    && this.line === line && this.word.word.length > 0 && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n    && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n  }\n  get items() {\n    const result = [];\n    // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n    // ranked items are before/after\n    const {\n      items\n    } = this.completionModel;\n    const selectedIndex = this._suggestMemoryService.select(this.model, {\n      lineNumber: this.line,\n      column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta\n    }, items);\n    const first = Iterable.slice(items, selectedIndex);\n    const second = Iterable.slice(items, 0, selectedIndex);\n    let resolveCount = 5;\n    for (const item of Iterable.concat(first, second)) {\n      if (item.score === FuzzyScore.Default) {\n        // skip items that have no overlap\n        continue;\n      }\n      const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n      );\n      const insertText = item.completion.insertTextRules && item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */ ? {\n        snippet: item.completion.insertText\n      } : item.completion.insertText;\n      result.push(new SuggestInlineCompletion(range, insertText, item.filterTextLow ?? item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n      // resolve the first N suggestions eagerly\n      if (resolveCount-- >= 0) {\n        item.resolve(CancellationToken.None);\n      }\n    }\n    return result;\n  }\n};\nInlineCompletionResults = __decorate([__param(5, ISuggestMemoryService)], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions extends Disposable {\n  constructor(_languageFeatureService, _clipboardService, _suggestMemoryService, _editorService) {\n    super();\n    this._languageFeatureService = _languageFeatureService;\n    this._clipboardService = _clipboardService;\n    this._suggestMemoryService = _suggestMemoryService;\n    this._editorService = _editorService;\n    this._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n  }\n  provideInlineCompletions(model, position, context, token) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (context.selectedSuggestionInfo) {\n        return;\n      }\n      let editor;\n      for (const candidate of _this._editorService.listCodeEditors()) {\n        if (candidate.getModel() === model) {\n          editor = candidate;\n          break;\n        }\n      }\n      if (!editor) {\n        return;\n      }\n      const config = editor.getOption(90 /* EditorOption.quickSuggestions */);\n      if (QuickSuggestionsOptions.isAllOff(config)) {\n        // quick suggest is off (for this model/language)\n        return;\n      }\n      model.tokenization.tokenizeIfCheap(position.lineNumber);\n      const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n      const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n      if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n        // quick suggest is off (for this token)\n        return undefined;\n      }\n      // We consider non-empty leading words and trigger characters. The latter only\n      // when no word is being typed (word characters superseed trigger characters)\n      let wordInfo = model.getWordAtPosition(position);\n      let triggerCharacterInfo;\n      if (!wordInfo?.word) {\n        triggerCharacterInfo = _this._getTriggerCharacterInfo(model, position);\n      }\n      if (!wordInfo?.word && !triggerCharacterInfo) {\n        // not at word, not a trigger character\n        return;\n      }\n      // ensure that we have word information and that we are at the end of a word\n      // otherwise we stop because we don't want to do quick suggestions inside words\n      if (!wordInfo) {\n        wordInfo = model.getWordUntilPosition(position);\n      }\n      if (wordInfo.endColumn !== position.column) {\n        return;\n      }\n      let result;\n      const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n      if (!triggerCharacterInfo && _this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n        // reuse a previous result iff possible, only a refilter is needed\n        // TODO@jrieken this can be improved further and only incomplete results can be updated\n        // console.log(`REUSE with ${wordInfo.word}`);\n        const newLineContext = new LineContext(leadingLineContents, position.column - _this._lastResult.word.endColumn);\n        _this._lastResult.completionModel.lineContext = newLineContext;\n        _this._lastResult.acquire();\n        result = _this._lastResult;\n      } else {\n        // refesh model is required\n        const completions = yield provideSuggestionItems(_this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo?.providers), triggerCharacterInfo && {\n          triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n          triggerCharacter: triggerCharacterInfo.ch\n        }, token);\n        let clipboardText;\n        if (completions.needsClipboard) {\n          clipboardText = yield _this._clipboardService.readText();\n        }\n        const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, editor.getOption(119 /* EditorOption.suggest */), editor.getOption(113 /* EditorOption.snippetSuggestions */), {\n          boostFullMatch: false,\n          firstMatchCanBeWeak: false\n        }, clipboardText);\n        result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, _this._suggestMemoryService);\n      }\n      _this._lastResult = result;\n      return result;\n    })();\n  }\n  handleItemDidShow(_completions, item) {\n    item.completion.resolve(CancellationToken.None);\n  }\n  freeInlineCompletions(result) {\n    result.release();\n  }\n  _getTriggerCharacterInfo(model, position) {\n    const ch = model.getValueInRange(Range.fromPositions({\n      lineNumber: position.lineNumber,\n      column: position.column - 1\n    }, position));\n    const providers = new Set();\n    for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n      if (provider.triggerCharacters?.includes(ch)) {\n        providers.add(provider);\n      }\n    }\n    if (providers.size === 0) {\n      return undefined;\n    }\n    return {\n      providers,\n      ch\n    };\n  }\n};\nSuggestInlineCompletions = __decorate([__param(0, ILanguageFeaturesService), __param(1, IClipboardService), __param(2, ISuggestMemoryService), __param(3, ICodeEditorService)], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nregisterEditorFeature(SuggestInlineCompletions);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","CancellationToken","FuzzyScore","Iterable","Disposable","RefCountedDisposable","ICodeEditorService","Range","registerEditorFeature","ILanguageFeaturesService","CompletionModel","LineContext","CompletionOptions","provideSuggestionItems","QuickSuggestionsOptions","ISuggestMemoryService","SuggestModel","WordDistance","IClipboardService","SuggestInlineCompletion","constructor","range","insertText","filterText","additionalTextEdits","command","completion","InlineCompletionResults","model","line","word","completionModel","completions","_suggestMemoryService","disposable","canBeReused","startColumn","endColumn","getIncompleteProvider","size","items","result","selectedIndex","select","lineNumber","column","lineContext","characterCountDelta","first","slice","second","resolveCount","item","concat","score","Default","editStart","editInsertEnd","insertTextRules","snippet","push","filterTextLow","labelLow","resolve","None","SuggestInlineCompletions","_languageFeatureService","_clipboardService","_editorService","_store","add","inlineCompletionsProvider","register","provideInlineCompletions","position","context","token","_this","_asyncToGenerator","selectedSuggestionInfo","editor","candidate","listCodeEditors","getModel","config","getOption","isAllOff","tokenization","tokenizeIfCheap","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","valueFor","undefined","wordInfo","getWordAtPosition","triggerCharacterInfo","_getTriggerCharacterInfo","getWordUntilPosition","leadingLineContents","getValueInRange","_lastResult","newLineContext","acquire","completionProvider","createSuggestFilter","itemKind","providers","triggerKind","triggerCharacter","ch","clipboardText","needsClipboard","readText","boostFullMatch","firstMatchCanBeWeak","handleItemDidShow","_completions","freeInlineCompletions","release","fromPositions","Set","provider","all","triggerCharacters","includes"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestInlineCompletions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nclass SuggestInlineCompletion {\n    constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n        this.range = range;\n        this.insertText = insertText;\n        this.filterText = filterText;\n        this.additionalTextEdits = additionalTextEdits;\n        this.command = command;\n        this.completion = completion;\n    }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n    constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n        super(completions.disposable);\n        this.model = model;\n        this.line = line;\n        this.word = word;\n        this.completionModel = completionModel;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    canBeReused(model, line, word) {\n        return this.model === model // same model\n            && this.line === line\n            && this.word.word.length > 0\n            && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n            && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n    }\n    get items() {\n        const result = [];\n        // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n        // ranked items are before/after\n        const { items } = this.completionModel;\n        const selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n        const first = Iterable.slice(items, selectedIndex);\n        const second = Iterable.slice(items, 0, selectedIndex);\n        let resolveCount = 5;\n        for (const item of Iterable.concat(first, second)) {\n            if (item.score === FuzzyScore.Default) {\n                // skip items that have no overlap\n                continue;\n            }\n            const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n            );\n            const insertText = item.completion.insertTextRules && (item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */)\n                ? { snippet: item.completion.insertText }\n                : item.completion.insertText;\n            result.push(new SuggestInlineCompletion(range, insertText, item.filterTextLow ?? item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n            // resolve the first N suggestions eagerly\n            if (resolveCount-- >= 0) {\n                item.resolve(CancellationToken.None);\n            }\n        }\n        return result;\n    }\n};\nInlineCompletionResults = __decorate([\n    __param(5, ISuggestMemoryService)\n], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions extends Disposable {\n    constructor(_languageFeatureService, _clipboardService, _suggestMemoryService, _editorService) {\n        super();\n        this._languageFeatureService = _languageFeatureService;\n        this._clipboardService = _clipboardService;\n        this._suggestMemoryService = _suggestMemoryService;\n        this._editorService = _editorService;\n        this._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n    }\n    async provideInlineCompletions(model, position, context, token) {\n        if (context.selectedSuggestionInfo) {\n            return;\n        }\n        let editor;\n        for (const candidate of this._editorService.listCodeEditors()) {\n            if (candidate.getModel() === model) {\n                editor = candidate;\n                break;\n            }\n        }\n        if (!editor) {\n            return;\n        }\n        const config = editor.getOption(90 /* EditorOption.quickSuggestions */);\n        if (QuickSuggestionsOptions.isAllOff(config)) {\n            // quick suggest is off (for this model/language)\n            return;\n        }\n        model.tokenization.tokenizeIfCheap(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n        if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n            // quick suggest is off (for this token)\n            return undefined;\n        }\n        // We consider non-empty leading words and trigger characters. The latter only\n        // when no word is being typed (word characters superseed trigger characters)\n        let wordInfo = model.getWordAtPosition(position);\n        let triggerCharacterInfo;\n        if (!wordInfo?.word) {\n            triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n        }\n        if (!wordInfo?.word && !triggerCharacterInfo) {\n            // not at word, not a trigger character\n            return;\n        }\n        // ensure that we have word information and that we are at the end of a word\n        // otherwise we stop because we don't want to do quick suggestions inside words\n        if (!wordInfo) {\n            wordInfo = model.getWordUntilPosition(position);\n        }\n        if (wordInfo.endColumn !== position.column) {\n            return;\n        }\n        let result;\n        const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n        if (!triggerCharacterInfo && this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n            // reuse a previous result iff possible, only a refilter is needed\n            // TODO@jrieken this can be improved further and only incomplete results can be updated\n            // console.log(`REUSE with ${wordInfo.word}`);\n            const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n            this._lastResult.completionModel.lineContext = newLineContext;\n            this._lastResult.acquire();\n            result = this._lastResult;\n        }\n        else {\n            // refesh model is required\n            const completions = await provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo?.providers), triggerCharacterInfo && { triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */, triggerCharacter: triggerCharacterInfo.ch }, token);\n            let clipboardText;\n            if (completions.needsClipboard) {\n                clipboardText = await this._clipboardService.readText();\n            }\n            const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, editor.getOption(119 /* EditorOption.suggest */), editor.getOption(113 /* EditorOption.snippetSuggestions */), { boostFullMatch: false, firstMatchCanBeWeak: false }, clipboardText);\n            result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n        }\n        this._lastResult = result;\n        return result;\n    }\n    handleItemDidShow(_completions, item) {\n        item.completion.resolve(CancellationToken.None);\n    }\n    freeInlineCompletions(result) {\n        result.release();\n    }\n    _getTriggerCharacterInfo(model, position) {\n        const ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n        const providers = new Set();\n        for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n            if (provider.triggerCharacters?.includes(ch)) {\n                providers.add(provider);\n            }\n        }\n        if (providers.size === 0) {\n            return undefined;\n        }\n        return { providers, ch };\n    }\n};\nSuggestInlineCompletions = __decorate([\n    __param(0, ILanguageFeaturesService),\n    __param(1, IClipboardService),\n    __param(2, ISuggestMemoryService),\n    __param(3, ICodeEditorService)\n], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nregisterEditorFeature(SuggestInlineCompletions);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}