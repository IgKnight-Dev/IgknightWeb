{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar InlayHintsController_1;\nimport { isHTMLElement, ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n  constructor() {\n    this._entries = new LRUCache(50);\n  }\n  get(model) {\n    const key = InlayHintsCache._key(model);\n    return this._entries.get(key);\n  }\n  set(model, value) {\n    const key = InlayHintsCache._key(model);\n    this._entries.set(key, value);\n  }\n  static _key(model) {\n    return `${model.uri.toString()}/${model.getVersionId()}`;\n  }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n  constructor(item, index) {\n    this.item = item;\n    this.index = index;\n  }\n  get part() {\n    const label = this.item.hint.label;\n    if (typeof label === 'string') {\n      return {\n        label\n      };\n    } else {\n      return label[this.index];\n    }\n  }\n}\nclass ActiveInlayHintInfo {\n  constructor(part, hasTriggerModifier) {\n    this.part = part;\n    this.hasTriggerModifier = hasTriggerModifier;\n  }\n}\n// --- controller\nlet InlayHintsController = /*#__PURE__*/(() => {\n  let InlayHintsController = class InlayHintsController {\n    static #_ = InlayHintsController_1 = this;\n    static #_2 = this.ID = 'editor.contrib.InlayHints';\n    static #_3 = this._MAX_DECORATORS = 1500;\n    static #_4 = this._MAX_LABEL_LEN = 43;\n    static get(editor) {\n      return editor.getContribution(InlayHintsController_1.ID) ?? undefined;\n    }\n    constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n      this._editor = _editor;\n      this._languageFeaturesService = _languageFeaturesService;\n      this._inlayHintsCache = _inlayHintsCache;\n      this._commandService = _commandService;\n      this._notificationService = _notificationService;\n      this._instaService = _instaService;\n      this._disposables = new DisposableStore();\n      this._sessionDisposables = new DisposableStore();\n      this._decorationsMetadata = new Map();\n      this._ruleFactory = new DynamicCssRules(this._editor);\n      this._activeRenderMode = 0 /* RenderMode.Normal */;\n      this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', {\n        min: 25\n      });\n      this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n      this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n      this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n      this._disposables.add(_editor.onDidChangeConfiguration(e => {\n        if (e.hasChanged(142 /* EditorOption.inlayHints */)) {\n          this._update();\n        }\n      }));\n      this._update();\n    }\n    dispose() {\n      this._sessionDisposables.dispose();\n      this._removeAllDecorations();\n      this._disposables.dispose();\n    }\n    _update() {\n      var _this = this;\n      this._sessionDisposables.clear();\n      this._removeAllDecorations();\n      const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n      if (options.enabled === 'off') {\n        return;\n      }\n      const model = this._editor.getModel();\n      if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n        return;\n      }\n      if (options.enabled === 'on') {\n        // different \"on\" modes: always\n        this._activeRenderMode = 0 /* RenderMode.Normal */;\n      } else {\n        // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n        let defaultMode;\n        let altMode;\n        if (options.enabled === 'onUnlessPressed') {\n          defaultMode = 0 /* RenderMode.Normal */;\n          altMode = 1 /* RenderMode.Invisible */;\n        } else {\n          defaultMode = 1 /* RenderMode.Invisible */;\n          altMode = 0 /* RenderMode.Normal */;\n        }\n        this._activeRenderMode = defaultMode;\n        this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n          if (!this._editor.hasModel()) {\n            return;\n          }\n          const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n          if (newRenderMode !== this._activeRenderMode) {\n            this._activeRenderMode = newRenderMode;\n            const model = this._editor.getModel();\n            const copies = this._copyInlayHintsWithCurrentAnchor(model);\n            this._updateHintsDecorators([model.getFullModelRange()], copies);\n            scheduler.schedule(0);\n          }\n        }));\n      }\n      // iff possible, quickly update from cache\n      const cached = this._inlayHintsCache.get(model);\n      if (cached) {\n        this._updateHintsDecorators([model.getFullModelRange()], cached);\n      }\n      this._sessionDisposables.add(toDisposable(() => {\n        // cache items when switching files etc\n        if (!model.isDisposed()) {\n          this._cacheHintsForFastRestore(model);\n        }\n      }));\n      let cts;\n      const watchedProviders = new Set();\n      const scheduler = new RunOnceScheduler(/*#__PURE__*/_asyncToGenerator(function* () {\n        const t1 = Date.now();\n        cts?.dispose(true);\n        cts = new CancellationTokenSource();\n        const listener = model.onWillDispose(() => cts?.cancel());\n        try {\n          const myToken = cts.token;\n          const inlayHints = yield InlayHintsFragments.create(_this._languageFeaturesService.inlayHintsProvider, model, _this._getHintsRanges(), myToken);\n          scheduler.delay = _this._debounceInfo.update(model, Date.now() - t1);\n          if (myToken.isCancellationRequested) {\n            inlayHints.dispose();\n            return;\n          }\n          // listen to provider changes\n          for (const provider of inlayHints.provider) {\n            if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n              watchedProviders.add(provider);\n              _this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n                if (!scheduler.isScheduled()) {\n                  // ignore event when request is already scheduled\n                  scheduler.schedule();\n                }\n              }));\n            }\n          }\n          _this._sessionDisposables.add(inlayHints);\n          _this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n          _this._cacheHintsForFastRestore(model);\n        } catch (err) {\n          onUnexpectedError(err);\n        } finally {\n          cts.dispose();\n          listener.dispose();\n        }\n      }), this._debounceInfo.get(model));\n      this._sessionDisposables.add(scheduler);\n      this._sessionDisposables.add(toDisposable(() => cts?.dispose(true)));\n      scheduler.schedule(0);\n      this._sessionDisposables.add(this._editor.onDidScrollChange(e => {\n        // update when scroll position changes\n        // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n        // typing or due to \"actual\" scrolling\n        if (e.scrollTopChanged || !scheduler.isScheduled()) {\n          scheduler.schedule();\n        }\n      }));\n      this._sessionDisposables.add(this._editor.onDidChangeModelContent(e => {\n        cts?.cancel();\n        // update less aggressive when typing\n        const delay = Math.max(scheduler.delay, 1250);\n        scheduler.schedule(delay);\n      }));\n      // mouse gestures\n      this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n      this._sessionDisposables.add(this._installLinkGesture());\n      this._sessionDisposables.add(this._installContextMenu());\n    }\n    _installLinkGesture() {\n      var _this2 = this;\n      const store = new DisposableStore();\n      const gesture = store.add(new ClickLinkGesture(this._editor));\n      // let removeHighlight = () => { };\n      const sessionStore = new DisposableStore();\n      store.add(sessionStore);\n      store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n        const [mouseEvent] = e;\n        const labelPart = this._getInlayHintLabelPart(mouseEvent);\n        const model = this._editor.getModel();\n        if (!labelPart || !model) {\n          sessionStore.clear();\n          return;\n        }\n        // resolve the item\n        const cts = new CancellationTokenSource();\n        sessionStore.add(toDisposable(() => cts.dispose(true)));\n        labelPart.item.resolve(cts.token);\n        // render link => when the modifier is pressed and when there is a command or location\n        this._activeInlayHintPart = labelPart.part.command || labelPart.part.location ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier) : undefined;\n        const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n        const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n        const lineHints = this._getInlineHintsForRange(range);\n        this._updateHintsDecorators([range], lineHints);\n        sessionStore.add(toDisposable(() => {\n          this._activeInlayHintPart = undefined;\n          this._updateHintsDecorators([range], lineHints);\n        }));\n      }));\n      store.add(gesture.onCancel(() => sessionStore.clear()));\n      store.add(gesture.onExecute(/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (e) {\n          const label = _this2._getInlayHintLabelPart(e);\n          if (label) {\n            const part = label.part;\n            if (part.location) {\n              // location -> execute go to def\n              _this2._instaService.invokeFunction(goToDefinitionWithLocation, e, _this2._editor, part.location);\n            } else if (languages.Command.is(part.command)) {\n              // command -> execute it\n              yield _this2._invokeCommand(part.command, label.item);\n            }\n          }\n        });\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      return store;\n    }\n    _getInlineHintsForRange(range) {\n      const lineHints = new Set();\n      for (const data of this._decorationsMetadata.values()) {\n        if (range.containsRange(data.item.anchor.range)) {\n          lineHints.add(data.item);\n        }\n      }\n      return Array.from(lineHints);\n    }\n    _installDblClickGesture(updateInlayHints) {\n      var _this3 = this;\n      return this._editor.onMouseUp(/*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (e) {\n          if (e.event.detail !== 2) {\n            return;\n          }\n          const part = _this3._getInlayHintLabelPart(e);\n          if (!part) {\n            return;\n          }\n          e.event.preventDefault();\n          yield part.item.resolve(CancellationToken.None);\n          if (isNonEmptyArray(part.item.hint.textEdits)) {\n            const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n            _this3._editor.executeEdits('inlayHint.default', edits);\n            updateInlayHints();\n          }\n        });\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n    _installContextMenu() {\n      var _this4 = this;\n      return this._editor.onContextMenu(/*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (e) {\n          if (!isHTMLElement(e.event.target)) {\n            return;\n          }\n          const part = _this4._getInlayHintLabelPart(e);\n          if (part) {\n            yield _this4._instaService.invokeFunction(showGoToContextMenu, _this4._editor, e.event.target, part);\n          }\n        });\n        return function (_x3) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n    _getInlayHintLabelPart(e) {\n      if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n        return undefined;\n      }\n      const options = e.target.detail.injectedText?.options;\n      if (options instanceof ModelDecorationInjectedTextOptions && options?.attachedData instanceof RenderedInlayHintLabelPart) {\n        return options.attachedData;\n      }\n      return undefined;\n    }\n    _invokeCommand(command, item) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this5._commandService.executeCommand(command.id, ...(command.arguments ?? []));\n        } catch (err) {\n          _this5._notificationService.notify({\n            severity: Severity.Error,\n            source: item.provider.displayName,\n            message: err\n          });\n        }\n      })();\n    }\n    _cacheHintsForFastRestore(model) {\n      const hints = this._copyInlayHintsWithCurrentAnchor(model);\n      this._inlayHintsCache.set(model, hints);\n    }\n    // return inlay hints but with an anchor that reflects \"updates\"\n    // that happened after receiving them, e.g adding new lines before a hint\n    _copyInlayHintsWithCurrentAnchor(model) {\n      const items = new Map();\n      for (const [id, obj] of this._decorationsMetadata) {\n        if (items.has(obj.item)) {\n          // an inlay item can be rendered as multiple decorations\n          // but they will all uses the same range\n          continue;\n        }\n        const range = model.getDecorationRange(id);\n        if (range) {\n          // update range with whatever the editor has tweaked it to\n          const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n          const copy = obj.item.with({\n            anchor\n          });\n          items.set(obj.item, copy);\n        }\n      }\n      return Array.from(items.values());\n    }\n    _getHintsRanges() {\n      const extra = 30;\n      const model = this._editor.getModel();\n      const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n      const result = [];\n      for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n        const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n        if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n          result.push(extendedRange);\n        } else {\n          result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n        }\n      }\n      return result;\n    }\n    _updateHintsDecorators(ranges, items) {\n      // utils to collect/create injected text decorations\n      const newDecorationsData = [];\n      const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n        const opts = {\n          content,\n          inlineClassNameAffectsLetterSpacing: true,\n          inlineClassName: ref.className,\n          cursorStops,\n          attachedData\n        };\n        newDecorationsData.push({\n          item,\n          classNameRef: ref,\n          decoration: {\n            range: item.anchor.range,\n            options: {\n              // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n              description: 'InlayHint',\n              showIfCollapsed: item.anchor.range.isEmpty(),\n              // \"original\" range is empty\n              collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n              stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n              [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n            }\n          }\n        });\n      };\n      const addInjectedWhitespace = (item, isLast) => {\n        const marginRule = this._ruleFactory.createClassNameRef({\n          width: `${fontSize / 3 | 0}px`,\n          display: 'inline-block'\n        });\n        addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n      };\n      //\n      const {\n        fontSize,\n        fontFamily,\n        padding,\n        isUniform\n      } = this._getLayoutInfo();\n      const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n      this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n      let currentLineInfo = {\n        line: 0,\n        totalLen: 0\n      };\n      for (const item of items) {\n        if (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n          currentLineInfo = {\n            line: item.anchor.range.startLineNumber,\n            totalLen: 0\n          };\n        }\n        if (currentLineInfo.totalLen > InlayHintsController_1._MAX_LABEL_LEN) {\n          continue;\n        }\n        // whitespace leading the actual label\n        if (item.hint.paddingLeft) {\n          addInjectedWhitespace(item, false);\n        }\n        // the label with its parts\n        const parts = typeof item.hint.label === 'string' ? [{\n          label: item.hint.label\n        }] : item.hint.label;\n        for (let i = 0; i < parts.length; i++) {\n          const part = parts[i];\n          const isFirst = i === 0;\n          const isLast = i === parts.length - 1;\n          const cssProperties = {\n            fontSize: `${fontSize}px`,\n            fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n            verticalAlign: isUniform ? 'baseline' : 'middle',\n            unicodeBidi: 'isolate'\n          };\n          if (isNonEmptyArray(item.hint.textEdits)) {\n            cssProperties.cursor = 'default';\n          }\n          this._fillInColors(cssProperties, item.hint);\n          if ((part.command || part.location) && this._activeInlayHintPart?.part.item === item && this._activeInlayHintPart.part.index === i) {\n            // active link!\n            cssProperties.textDecoration = 'underline';\n            if (this._activeInlayHintPart.hasTriggerModifier) {\n              cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n              cssProperties.cursor = 'pointer';\n            }\n          }\n          if (padding) {\n            if (isFirst && isLast) {\n              // only element\n              cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n              cssProperties.borderRadius = `${fontSize / 4 | 0}px`;\n            } else if (isFirst) {\n              // first element\n              cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n              cssProperties.borderRadius = `${fontSize / 4 | 0}px 0 0 ${fontSize / 4 | 0}px`;\n            } else if (isLast) {\n              // last element\n              cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n              cssProperties.borderRadius = `0 ${fontSize / 4 | 0}px ${fontSize / 4 | 0}px 0`;\n            } else {\n              cssProperties.padding = `1px 0 1px 0`;\n            }\n          }\n          let textlabel = part.label;\n          currentLineInfo.totalLen += textlabel.length;\n          let tooLong = false;\n          const over = currentLineInfo.totalLen - InlayHintsController_1._MAX_LABEL_LEN;\n          if (over > 0) {\n            textlabel = textlabel.slice(0, -over) + '…';\n            tooLong = true;\n          }\n          addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(textlabel), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n          if (tooLong) {\n            break;\n          }\n        }\n        // whitespace trailing the actual label\n        if (item.hint.paddingRight) {\n          addInjectedWhitespace(item, true);\n        }\n        if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n          break;\n        }\n      }\n      // collect all decoration ids that are affected by the ranges\n      // and only update those decorations\n      const decorationIdsToReplace = [];\n      for (const [id, metadata] of this._decorationsMetadata) {\n        const range = this._editor.getModel()?.getDecorationRange(id);\n        if (range && ranges.some(r => r.containsRange(range))) {\n          decorationIdsToReplace.push(id);\n          metadata.classNameRef.dispose();\n          this._decorationsMetadata.delete(id);\n        }\n      }\n      const scrollState = StableEditorScrollState.capture(this._editor);\n      this._editor.changeDecorations(accessor => {\n        const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n        for (let i = 0; i < newDecorationIds.length; i++) {\n          const data = newDecorationsData[i];\n          this._decorationsMetadata.set(newDecorationIds[i], data);\n        }\n      });\n      scrollState.restore(this._editor);\n    }\n    _fillInColors(props, hint) {\n      if (hint.kind === languages.InlayHintKind.Parameter) {\n        props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n        props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n      } else if (hint.kind === languages.InlayHintKind.Type) {\n        props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n        props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n      } else {\n        props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n        props.color = themeColorFromId(colors.editorInlayHintForeground);\n      }\n    }\n    _getLayoutInfo() {\n      const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n      const padding = options.padding;\n      const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n      const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n      let fontSize = options.fontSize;\n      if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n        fontSize = editorFontSize;\n      }\n      const fontFamily = options.fontFamily || editorFontFamily;\n      const isUniform = !padding && fontFamily === editorFontFamily && fontSize === editorFontSize;\n      return {\n        fontSize,\n        fontFamily,\n        padding,\n        isUniform\n      };\n    }\n    _removeAllDecorations() {\n      this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n      for (const obj of this._decorationsMetadata.values()) {\n        obj.classNameRef.dispose();\n      }\n      this._decorationsMetadata.clear();\n    }\n  };\n  return InlayHintsController;\n})();\nInlayHintsController = InlayHintsController_1 = __decorate([__param(1, ILanguageFeaturesService), __param(2, ILanguageFeatureDebounceService), __param(3, IInlayHintsCache), __param(4, ICommandService), __param(5, INotificationService), __param(6, IInstantiationService)], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n  const noBreakWhitespace = '\\xa0';\n  return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (accessor, ...args) {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const {\n      inlayHintsProvider\n    } = accessor.get(ILanguageFeaturesService);\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n      const model = yield InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n      const result = model.items.map(i => i.hint);\n      setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n      return result;\n    } finally {\n      ref.dispose();\n    }\n  });\n  return function (_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}());","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","InlayHintsController_1","isHTMLElement","ModifierKeyEmitter","isNonEmptyArray","RunOnceScheduler","CancellationToken","CancellationTokenSource","onUnexpectedError","DisposableStore","toDisposable","LRUCache","assertType","URI","DynamicCssRules","StableEditorScrollState","EDITOR_FONT_DEFAULTS","EditOperation","Range","languages","InjectedTextCursorStops","ModelDecorationInjectedTextOptions","ILanguageFeatureDebounceService","ILanguageFeaturesService","ITextModelService","ClickLinkGesture","InlayHintAnchor","InlayHintsFragments","goToDefinitionWithLocation","showGoToContextMenu","CommandsRegistry","ICommandService","registerSingleton","createDecorator","IInstantiationService","INotificationService","Severity","colors","themeColorFromId","InlayHintsCache","constructor","_entries","get","model","_key","set","value","uri","toString","getVersionId","IInlayHintsCache","RenderedInlayHintLabelPart","item","index","part","label","hint","ActiveInlayHintInfo","hasTriggerModifier","InlayHintsController","_","_2","ID","_3","_MAX_DECORATORS","_4","_MAX_LABEL_LEN","editor","getContribution","undefined","_editor","_languageFeaturesService","_featureDebounce","_inlayHintsCache","_commandService","_notificationService","_instaService","_disposables","_sessionDisposables","_decorationsMetadata","Map","_ruleFactory","_activeRenderMode","_debounceInfo","for","inlayHintsProvider","min","add","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","e","hasChanged","dispose","_removeAllDecorations","_this","clear","options","getOption","enabled","getModel","has","defaultMode","altMode","getInstance","event","hasModel","newRenderMode","altKey","ctrlKey","shiftKey","metaKey","copies","_copyInlayHintsWithCurrentAnchor","_updateHintsDecorators","getFullModelRange","scheduler","schedule","cached","isDisposed","_cacheHintsForFastRestore","cts","watchedProviders","Set","_asyncToGenerator","t1","Date","now","listener","onWillDispose","cancel","myToken","token","inlayHints","create","_getHintsRanges","delay","update","isCancellationRequested","provider","onDidChangeInlayHints","isScheduled","ranges","items","err","onDidScrollChange","scrollTopChanged","onDidChangeModelContent","Math","max","_installDblClickGesture","_installLinkGesture","_installContextMenu","_this2","store","gesture","sessionStore","onMouseMoveOrRelevantKeyDown","mouseEvent","labelPart","_getInlayHintLabelPart","resolve","_activeInlayHintPart","command","location","lineNumber","validatePosition","position","range","getLineMaxColumn","lineHints","_getInlineHintsForRange","onCancel","onExecute","_ref2","invokeFunction","Command","is","_invokeCommand","_x","apply","data","values","containsRange","anchor","Array","from","updateInlayHints","_this3","onMouseUp","_ref3","detail","preventDefault","None","textEdits","edits","map","edit","replace","lift","text","executeEdits","_x2","_this4","onContextMenu","_ref4","_x3","type","injectedText","attachedData","_this5","executeCommand","id","notify","severity","Error","source","displayName","message","hints","obj","getDecorationRange","direction","copy","with","extra","visibleRanges","getVisibleRangesPlusViewportAboveBelow","result","sort","compareRangesUsingStarts","extendedRange","validateRange","startLineNumber","startColumn","endLineNumber","endColumn","areIntersectingOrTouching","push","plusRange","newDecorationsData","addInjectedText","ref","content","cursorStops","opts","inlineClassNameAffectsLetterSpacing","inlineClassName","className","classNameRef","decoration","description","showIfCollapsed","isEmpty","collapseOnReplaceEdit","stickiness","addInjectedWhitespace","isLast","marginRule","createClassNameRef","width","fontSize","display","Right","fontFamily","padding","isUniform","_getLayoutInfo","fontFamilyVar","getContainerDomNode","style","setProperty","currentLineInfo","line","totalLen","paddingLeft","parts","isFirst","cssProperties","verticalAlign","unicodeBidi","cursor","_fillInColors","textDecoration","color","editorActiveLinkForeground","borderRadius","textlabel","tooLong","over","slice","fixSpace","paddingRight","decorationIdsToReplace","metadata","some","delete","scrollState","capture","changeDecorations","accessor","newDecorationIds","deltaDecorations","restore","props","kind","InlayHintKind","Parameter","backgroundColor","editorInlayHintParameterBackground","editorInlayHintParameterForeground","Type","editorInlayHintTypeBackground","editorInlayHintTypeForeground","editorInlayHintBackground","editorInlayHintForeground","editorFontSize","editorFontFamily","removeDecorations","keys","str","noBreakWhitespace","registerCommand","_ref5","args","isUri","isIRange","createModelReference","object","textEditorModel","setTimeout","_x4"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHintsController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlayHintsController_1;\nimport { isHTMLElement, ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n    constructor() {\n        this._entries = new LRUCache(50);\n    }\n    get(model) {\n        const key = InlayHintsCache._key(model);\n        return this._entries.get(key);\n    }\n    set(model, value) {\n        const key = InlayHintsCache._key(model);\n        this._entries.set(key, value);\n    }\n    static _key(model) {\n        return `${model.uri.toString()}/${model.getVersionId()}`;\n    }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n    constructor(item, index) {\n        this.item = item;\n        this.index = index;\n    }\n    get part() {\n        const label = this.item.hint.label;\n        if (typeof label === 'string') {\n            return { label };\n        }\n        else {\n            return label[this.index];\n        }\n    }\n}\nclass ActiveInlayHintInfo {\n    constructor(part, hasTriggerModifier) {\n        this.part = part;\n        this.hasTriggerModifier = hasTriggerModifier;\n    }\n}\n// --- controller\nlet InlayHintsController = class InlayHintsController {\n    static { InlayHintsController_1 = this; }\n    static { this.ID = 'editor.contrib.InlayHints'; }\n    static { this._MAX_DECORATORS = 1500; }\n    static { this._MAX_LABEL_LEN = 43; }\n    static get(editor) {\n        return editor.getContribution(InlayHintsController_1.ID) ?? undefined;\n    }\n    constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._inlayHintsCache = _inlayHintsCache;\n        this._commandService = _commandService;\n        this._notificationService = _notificationService;\n        this._instaService = _instaService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._decorationsMetadata = new Map();\n        this._ruleFactory = new DynamicCssRules(this._editor);\n        this._activeRenderMode = 0 /* RenderMode.Normal */;\n        this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', { min: 25 });\n        this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(142 /* EditorOption.inlayHints */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        this._sessionDisposables.dispose();\n        this._removeAllDecorations();\n        this._disposables.dispose();\n    }\n    _update() {\n        this._sessionDisposables.clear();\n        this._removeAllDecorations();\n        const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n        if (options.enabled === 'off') {\n            return;\n        }\n        const model = this._editor.getModel();\n        if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n            return;\n        }\n        if (options.enabled === 'on') {\n            // different \"on\" modes: always\n            this._activeRenderMode = 0 /* RenderMode.Normal */;\n        }\n        else {\n            // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n            let defaultMode;\n            let altMode;\n            if (options.enabled === 'onUnlessPressed') {\n                defaultMode = 0 /* RenderMode.Normal */;\n                altMode = 1 /* RenderMode.Invisible */;\n            }\n            else {\n                defaultMode = 1 /* RenderMode.Invisible */;\n                altMode = 0 /* RenderMode.Normal */;\n            }\n            this._activeRenderMode = defaultMode;\n            this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n                if (!this._editor.hasModel()) {\n                    return;\n                }\n                const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n                if (newRenderMode !== this._activeRenderMode) {\n                    this._activeRenderMode = newRenderMode;\n                    const model = this._editor.getModel();\n                    const copies = this._copyInlayHintsWithCurrentAnchor(model);\n                    this._updateHintsDecorators([model.getFullModelRange()], copies);\n                    scheduler.schedule(0);\n                }\n            }));\n        }\n        // iff possible, quickly update from cache\n        const cached = this._inlayHintsCache.get(model);\n        if (cached) {\n            this._updateHintsDecorators([model.getFullModelRange()], cached);\n        }\n        this._sessionDisposables.add(toDisposable(() => {\n            // cache items when switching files etc\n            if (!model.isDisposed()) {\n                this._cacheHintsForFastRestore(model);\n            }\n        }));\n        let cts;\n        const watchedProviders = new Set();\n        const scheduler = new RunOnceScheduler(async () => {\n            const t1 = Date.now();\n            cts?.dispose(true);\n            cts = new CancellationTokenSource();\n            const listener = model.onWillDispose(() => cts?.cancel());\n            try {\n                const myToken = cts.token;\n                const inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n                scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n                if (myToken.isCancellationRequested) {\n                    inlayHints.dispose();\n                    return;\n                }\n                // listen to provider changes\n                for (const provider of inlayHints.provider) {\n                    if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n                        watchedProviders.add(provider);\n                        this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n                            if (!scheduler.isScheduled()) { // ignore event when request is already scheduled\n                                scheduler.schedule();\n                            }\n                        }));\n                    }\n                }\n                this._sessionDisposables.add(inlayHints);\n                this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n                this._cacheHintsForFastRestore(model);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                cts.dispose();\n                listener.dispose();\n            }\n        }, this._debounceInfo.get(model));\n        this._sessionDisposables.add(scheduler);\n        this._sessionDisposables.add(toDisposable(() => cts?.dispose(true)));\n        scheduler.schedule(0);\n        this._sessionDisposables.add(this._editor.onDidScrollChange((e) => {\n            // update when scroll position changes\n            // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n            // typing or due to \"actual\" scrolling\n            if (e.scrollTopChanged || !scheduler.isScheduled()) {\n                scheduler.schedule();\n            }\n        }));\n        this._sessionDisposables.add(this._editor.onDidChangeModelContent((e) => {\n            cts?.cancel();\n            // update less aggressive when typing\n            const delay = Math.max(scheduler.delay, 1250);\n            scheduler.schedule(delay);\n        }));\n        // mouse gestures\n        this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n        this._sessionDisposables.add(this._installLinkGesture());\n        this._sessionDisposables.add(this._installContextMenu());\n    }\n    _installLinkGesture() {\n        const store = new DisposableStore();\n        const gesture = store.add(new ClickLinkGesture(this._editor));\n        // let removeHighlight = () => { };\n        const sessionStore = new DisposableStore();\n        store.add(sessionStore);\n        store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n            const [mouseEvent] = e;\n            const labelPart = this._getInlayHintLabelPart(mouseEvent);\n            const model = this._editor.getModel();\n            if (!labelPart || !model) {\n                sessionStore.clear();\n                return;\n            }\n            // resolve the item\n            const cts = new CancellationTokenSource();\n            sessionStore.add(toDisposable(() => cts.dispose(true)));\n            labelPart.item.resolve(cts.token);\n            // render link => when the modifier is pressed and when there is a command or location\n            this._activeInlayHintPart = labelPart.part.command || labelPart.part.location\n                ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier)\n                : undefined;\n            const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n            const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n            const lineHints = this._getInlineHintsForRange(range);\n            this._updateHintsDecorators([range], lineHints);\n            sessionStore.add(toDisposable(() => {\n                this._activeInlayHintPart = undefined;\n                this._updateHintsDecorators([range], lineHints);\n            }));\n        }));\n        store.add(gesture.onCancel(() => sessionStore.clear()));\n        store.add(gesture.onExecute(async (e) => {\n            const label = this._getInlayHintLabelPart(e);\n            if (label) {\n                const part = label.part;\n                if (part.location) {\n                    // location -> execute go to def\n                    this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n                }\n                else if (languages.Command.is(part.command)) {\n                    // command -> execute it\n                    await this._invokeCommand(part.command, label.item);\n                }\n            }\n        }));\n        return store;\n    }\n    _getInlineHintsForRange(range) {\n        const lineHints = new Set();\n        for (const data of this._decorationsMetadata.values()) {\n            if (range.containsRange(data.item.anchor.range)) {\n                lineHints.add(data.item);\n            }\n        }\n        return Array.from(lineHints);\n    }\n    _installDblClickGesture(updateInlayHints) {\n        return this._editor.onMouseUp(async (e) => {\n            if (e.event.detail !== 2) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (!part) {\n                return;\n            }\n            e.event.preventDefault();\n            await part.item.resolve(CancellationToken.None);\n            if (isNonEmptyArray(part.item.hint.textEdits)) {\n                const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n                this._editor.executeEdits('inlayHint.default', edits);\n                updateInlayHints();\n            }\n        });\n    }\n    _installContextMenu() {\n        return this._editor.onContextMenu(async (e) => {\n            if (!(isHTMLElement(e.event.target))) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (part) {\n                await this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n            }\n        });\n    }\n    _getInlayHintLabelPart(e) {\n        if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return undefined;\n        }\n        const options = e.target.detail.injectedText?.options;\n        if (options instanceof ModelDecorationInjectedTextOptions && options?.attachedData instanceof RenderedInlayHintLabelPart) {\n            return options.attachedData;\n        }\n        return undefined;\n    }\n    async _invokeCommand(command, item) {\n        try {\n            await this._commandService.executeCommand(command.id, ...(command.arguments ?? []));\n        }\n        catch (err) {\n            this._notificationService.notify({\n                severity: Severity.Error,\n                source: item.provider.displayName,\n                message: err\n            });\n        }\n    }\n    _cacheHintsForFastRestore(model) {\n        const hints = this._copyInlayHintsWithCurrentAnchor(model);\n        this._inlayHintsCache.set(model, hints);\n    }\n    // return inlay hints but with an anchor that reflects \"updates\"\n    // that happened after receiving them, e.g adding new lines before a hint\n    _copyInlayHintsWithCurrentAnchor(model) {\n        const items = new Map();\n        for (const [id, obj] of this._decorationsMetadata) {\n            if (items.has(obj.item)) {\n                // an inlay item can be rendered as multiple decorations\n                // but they will all uses the same range\n                continue;\n            }\n            const range = model.getDecorationRange(id);\n            if (range) {\n                // update range with whatever the editor has tweaked it to\n                const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n                const copy = obj.item.with({ anchor });\n                items.set(obj.item, copy);\n            }\n        }\n        return Array.from(items.values());\n    }\n    _getHintsRanges() {\n        const extra = 30;\n        const model = this._editor.getModel();\n        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n        const result = [];\n        for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n            const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n            if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n                result.push(extendedRange);\n            }\n            else {\n                result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n            }\n        }\n        return result;\n    }\n    _updateHintsDecorators(ranges, items) {\n        // utils to collect/create injected text decorations\n        const newDecorationsData = [];\n        const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n            const opts = {\n                content,\n                inlineClassNameAffectsLetterSpacing: true,\n                inlineClassName: ref.className,\n                cursorStops,\n                attachedData\n            };\n            newDecorationsData.push({\n                item,\n                classNameRef: ref,\n                decoration: {\n                    range: item.anchor.range,\n                    options: {\n                        // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n                        description: 'InlayHint',\n                        showIfCollapsed: item.anchor.range.isEmpty(), // \"original\" range is empty\n                        collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n                        stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n                        [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n                    }\n                }\n            });\n        };\n        const addInjectedWhitespace = (item, isLast) => {\n            const marginRule = this._ruleFactory.createClassNameRef({\n                width: `${(fontSize / 3) | 0}px`,\n                display: 'inline-block'\n            });\n            addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n        };\n        //\n        const { fontSize, fontFamily, padding, isUniform } = this._getLayoutInfo();\n        const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n        let currentLineInfo = { line: 0, totalLen: 0 };\n        for (const item of items) {\n            if (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n                currentLineInfo = { line: item.anchor.range.startLineNumber, totalLen: 0 };\n            }\n            if (currentLineInfo.totalLen > InlayHintsController_1._MAX_LABEL_LEN) {\n                continue;\n            }\n            // whitespace leading the actual label\n            if (item.hint.paddingLeft) {\n                addInjectedWhitespace(item, false);\n            }\n            // the label with its parts\n            const parts = typeof item.hint.label === 'string'\n                ? [{ label: item.hint.label }]\n                : item.hint.label;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const isFirst = i === 0;\n                const isLast = i === parts.length - 1;\n                const cssProperties = {\n                    fontSize: `${fontSize}px`,\n                    fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n                    verticalAlign: isUniform ? 'baseline' : 'middle',\n                    unicodeBidi: 'isolate'\n                };\n                if (isNonEmptyArray(item.hint.textEdits)) {\n                    cssProperties.cursor = 'default';\n                }\n                this._fillInColors(cssProperties, item.hint);\n                if ((part.command || part.location) && this._activeInlayHintPart?.part.item === item && this._activeInlayHintPart.part.index === i) {\n                    // active link!\n                    cssProperties.textDecoration = 'underline';\n                    if (this._activeInlayHintPart.hasTriggerModifier) {\n                        cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n                        cssProperties.cursor = 'pointer';\n                    }\n                }\n                if (padding) {\n                    if (isFirst && isLast) {\n                        // only element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isFirst) {\n                        // first element\n                        cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isLast) {\n                        // last element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n                        cssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n                    }\n                    else {\n                        cssProperties.padding = `1px 0 1px 0`;\n                    }\n                }\n                let textlabel = part.label;\n                currentLineInfo.totalLen += textlabel.length;\n                let tooLong = false;\n                const over = currentLineInfo.totalLen - InlayHintsController_1._MAX_LABEL_LEN;\n                if (over > 0) {\n                    textlabel = textlabel.slice(0, -over) + '…';\n                    tooLong = true;\n                }\n                addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(textlabel), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n                if (tooLong) {\n                    break;\n                }\n            }\n            // whitespace trailing the actual label\n            if (item.hint.paddingRight) {\n                addInjectedWhitespace(item, true);\n            }\n            if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n                break;\n            }\n        }\n        // collect all decoration ids that are affected by the ranges\n        // and only update those decorations\n        const decorationIdsToReplace = [];\n        for (const [id, metadata] of this._decorationsMetadata) {\n            const range = this._editor.getModel()?.getDecorationRange(id);\n            if (range && ranges.some(r => r.containsRange(range))) {\n                decorationIdsToReplace.push(id);\n                metadata.classNameRef.dispose();\n                this._decorationsMetadata.delete(id);\n            }\n        }\n        const scrollState = StableEditorScrollState.capture(this._editor);\n        this._editor.changeDecorations(accessor => {\n            const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n            for (let i = 0; i < newDecorationIds.length; i++) {\n                const data = newDecorationsData[i];\n                this._decorationsMetadata.set(newDecorationIds[i], data);\n            }\n        });\n        scrollState.restore(this._editor);\n    }\n    _fillInColors(props, hint) {\n        if (hint.kind === languages.InlayHintKind.Parameter) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n            props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n        }\n        else if (hint.kind === languages.InlayHintKind.Type) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n            props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n        }\n        else {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n            props.color = themeColorFromId(colors.editorInlayHintForeground);\n        }\n    }\n    _getLayoutInfo() {\n        const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n        const padding = options.padding;\n        const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n        const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n        let fontSize = options.fontSize;\n        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n            fontSize = editorFontSize;\n        }\n        const fontFamily = options.fontFamily || editorFontFamily;\n        const isUniform = !padding\n            && fontFamily === editorFontFamily\n            && fontSize === editorFontSize;\n        return { fontSize, fontFamily, padding, isUniform };\n    }\n    _removeAllDecorations() {\n        this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n        for (const obj of this._decorationsMetadata.values()) {\n            obj.classNameRef.dispose();\n        }\n        this._decorationsMetadata.clear();\n    }\n};\nInlayHintsController = InlayHintsController_1 = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ILanguageFeatureDebounceService),\n    __param(3, IInlayHintsCache),\n    __param(4, ICommandService),\n    __param(5, INotificationService),\n    __param(6, IInstantiationService)\n], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n    const noBreakWhitespace = '\\xa0';\n    return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async (accessor, ...args) => {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const { inlayHintsProvider } = accessor.get(ILanguageFeaturesService);\n    const ref = await accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n        const result = model.items.map(i => i.hint);\n        setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n        return result;\n    }\n    finally {\n        ref.dispose();\n    }\n});\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,IAAIE,sBAAsB;AAC1B,SAASC,aAAa,EAAEC,kBAAkB,QAAQ,iCAAiC;AACnF,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,iBAAiB,EAAEC,uBAAuB,QAAQ,yCAAyC;AACpG,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,eAAe,EAAEC,YAAY,QAAQ,sCAAsC;AACpF,SAASC,QAAQ,QAAQ,gCAAgC;AACzD,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,GAAG,QAAQ,gCAAgC;AACpD,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,uBAAuB,QAAQ,wCAAwC;AAChF,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,KAAK,QAAQ,+BAA+B;AACrD,OAAO,KAAKC,SAAS,MAAM,8BAA8B;AACzD,SAASC,uBAAuB,QAAQ,0BAA0B;AAClE,SAASC,kCAAkC,QAAQ,oCAAoC;AACvF,SAASC,+BAA+B,QAAQ,qDAAqD;AACrG,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,iBAAiB,QAAQ,6CAA6C;AAC/E,SAASC,gBAAgB,QAAQ,mDAAmD;AACpF,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,iBAAiB;AACtE,SAASC,0BAA0B,EAAEC,mBAAmB,QAAQ,0BAA0B;AAC1F,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,kDAAkD;AACpG,SAASC,iBAAiB,QAAQ,yDAAyD;AAC3F,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,4DAA4D;AACnH,SAASC,oBAAoB,EAAEC,QAAQ,QAAQ,0DAA0D;AACzG,OAAO,KAAKC,MAAM,MAAM,oDAAoD;AAC5E,SAASC,gBAAgB,QAAQ,mDAAmD;AACpF;AACA,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAI9B,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA+B,GAAGA,CAACC,KAAK,EAAE;IACP,MAAM1D,GAAG,GAAGsD,eAAe,CAACK,IAAI,CAACD,KAAK,CAAC;IACvC,OAAO,IAAI,CAACF,QAAQ,CAACC,GAAG,CAACzD,GAAG,CAAC;EACjC;EACA4D,GAAGA,CAACF,KAAK,EAAEG,KAAK,EAAE;IACd,MAAM7D,GAAG,GAAGsD,eAAe,CAACK,IAAI,CAACD,KAAK,CAAC;IACvC,IAAI,CAACF,QAAQ,CAACI,GAAG,CAAC5D,GAAG,EAAE6D,KAAK,CAAC;EACjC;EACA,OAAOF,IAAIA,CAACD,KAAK,EAAE;IACf,OAAO,GAAGA,KAAK,CAACI,GAAG,CAACC,QAAQ,CAAC,CAAC,IAAIL,KAAK,CAACM,YAAY,CAAC,CAAC,EAAE;EAC5D;AACJ;AACA,MAAMC,gBAAgB,GAAGjB,eAAe,CAAC,kBAAkB,CAAC;AAC5DD,iBAAiB,CAACkB,gBAAgB,EAAEX,eAAe,EAAE,CAAC,CAAC,+BAA+B,CAAC;AACvF;AACA,OAAO,MAAMY,0BAA0B,CAAC;EACpCX,WAAWA,CAACY,IAAI,EAAEC,KAAK,EAAE;IACrB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EACA,IAAIC,IAAIA,CAAA,EAAG;IACP,MAAMC,KAAK,GAAG,IAAI,CAACH,IAAI,CAACI,IAAI,CAACD,KAAK;IAClC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAO;QAAEA;MAAM,CAAC;IACpB,CAAC,MACI;MACD,OAAOA,KAAK,CAAC,IAAI,CAACF,KAAK,CAAC;IAC5B;EACJ;AACJ;AACA,MAAMI,mBAAmB,CAAC;EACtBjB,WAAWA,CAACc,IAAI,EAAEI,kBAAkB,EAAE;IAClC,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACI,kBAAkB,GAAGA,kBAAkB;EAChD;AACJ;AACA;AACA,IAAIC,oBAAoB;EAAA,IAApBA,oBAAoB,GAAG,MAAMA,oBAAoB,CAAC;IAAA,QAAAC,CAAA,GACzC3D,sBAAsB,GAAG,IAAI;IAAA,QAAA4D,EAAA,GAC7B,IAAI,CAACC,EAAE,GAAG,2BAA2B;IAAA,QAAAC,EAAA,GACrC,IAAI,CAACC,eAAe,GAAG,IAAI;IAAA,QAAAC,EAAA,GAC3B,IAAI,CAACC,cAAc,GAAG,EAAE;IACjC,OAAOxB,GAAGA,CAACyB,MAAM,EAAE;MACf,OAAOA,MAAM,CAACC,eAAe,CAACnE,sBAAsB,CAAC6D,EAAE,CAAC,IAAIO,SAAS;IACzE;IACA7B,WAAWA,CAAC8B,OAAO,EAAEC,wBAAwB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,aAAa,EAAE;MACrI,IAAI,CAACN,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;MACxD,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;MACxC,IAAI,CAACC,eAAe,GAAGA,eAAe;MACtC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;MAChD,IAAI,CAACC,aAAa,GAAGA,aAAa;MAClC,IAAI,CAACC,YAAY,GAAG,IAAIpE,eAAe,CAAC,CAAC;MACzC,IAAI,CAACqE,mBAAmB,GAAG,IAAIrE,eAAe,CAAC,CAAC;MAChD,IAAI,CAACsE,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;MACrC,IAAI,CAACC,YAAY,GAAG,IAAInE,eAAe,CAAC,IAAI,CAACwD,OAAO,CAAC;MACrD,IAAI,CAACY,iBAAiB,GAAG,CAAC,CAAC;MAC3B,IAAI,CAACC,aAAa,GAAGX,gBAAgB,CAACY,GAAG,CAACb,wBAAwB,CAACc,kBAAkB,EAAE,WAAW,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC,CAAC;MAChH,IAAI,CAACT,YAAY,CAACU,GAAG,CAAChB,wBAAwB,CAACc,kBAAkB,CAACG,WAAW,CAAC,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MACpG,IAAI,CAACZ,YAAY,CAACU,GAAG,CAACjB,OAAO,CAACoB,gBAAgB,CAAC,MAAM,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;MACrE,IAAI,CAACZ,YAAY,CAACU,GAAG,CAACjB,OAAO,CAACqB,wBAAwB,CAAC,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;MAC7E,IAAI,CAACZ,YAAY,CAACU,GAAG,CAACjB,OAAO,CAACsB,wBAAwB,CAACC,CAAC,IAAI;QACxD,IAAIA,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE;UACjD,IAAI,CAACL,OAAO,CAAC,CAAC;QAClB;MACJ,CAAC,CAAC,CAAC;MACH,IAAI,CAACA,OAAO,CAAC,CAAC;IAClB;IACAM,OAAOA,CAAA,EAAG;MACN,IAAI,CAACjB,mBAAmB,CAACiB,OAAO,CAAC,CAAC;MAClC,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAACnB,YAAY,CAACkB,OAAO,CAAC,CAAC;IAC/B;IACAN,OAAOA,CAAA,EAAG;MAAA,IAAAQ,KAAA;MACN,IAAI,CAACnB,mBAAmB,CAACoB,KAAK,CAAC,CAAC;MAChC,IAAI,CAACF,qBAAqB,CAAC,CAAC;MAC5B,MAAMG,OAAO,GAAG,IAAI,CAAC7B,OAAO,CAAC8B,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC;MACzE,IAAID,OAAO,CAACE,OAAO,KAAK,KAAK,EAAE;QAC3B;MACJ;MACA,MAAM1D,KAAK,GAAG,IAAI,CAAC2B,OAAO,CAACgC,QAAQ,CAAC,CAAC;MACrC,IAAI,CAAC3D,KAAK,IAAI,CAAC,IAAI,CAAC4B,wBAAwB,CAACc,kBAAkB,CAACkB,GAAG,CAAC5D,KAAK,CAAC,EAAE;QACxE;MACJ;MACA,IAAIwD,OAAO,CAACE,OAAO,KAAK,IAAI,EAAE;QAC1B;QACA,IAAI,CAACnB,iBAAiB,GAAG,CAAC,CAAC;MAC/B,CAAC,MACI;QACD;QACA,IAAIsB,WAAW;QACf,IAAIC,OAAO;QACX,IAAIN,OAAO,CAACE,OAAO,KAAK,iBAAiB,EAAE;UACvCG,WAAW,GAAG,CAAC,CAAC;UAChBC,OAAO,GAAG,CAAC,CAAC;QAChB,CAAC,MACI;UACDD,WAAW,GAAG,CAAC,CAAC;UAChBC,OAAO,GAAG,CAAC,CAAC;QAChB;QACA,IAAI,CAACvB,iBAAiB,GAAGsB,WAAW;QACpC,IAAI,CAAC1B,mBAAmB,CAACS,GAAG,CAACpF,kBAAkB,CAACuG,WAAW,CAAC,CAAC,CAACC,KAAK,CAACd,CAAC,IAAI;UACrE,IAAI,CAAC,IAAI,CAACvB,OAAO,CAACsC,QAAQ,CAAC,CAAC,EAAE;YAC1B;UACJ;UACA,MAAMC,aAAa,GAAGhB,CAAC,CAACiB,MAAM,IAAIjB,CAAC,CAACkB,OAAO,IAAI,EAAElB,CAAC,CAACmB,QAAQ,IAAInB,CAAC,CAACoB,OAAO,CAAC,GAAGR,OAAO,GAAGD,WAAW;UACjG,IAAIK,aAAa,KAAK,IAAI,CAAC3B,iBAAiB,EAAE;YAC1C,IAAI,CAACA,iBAAiB,GAAG2B,aAAa;YACtC,MAAMlE,KAAK,GAAG,IAAI,CAAC2B,OAAO,CAACgC,QAAQ,CAAC,CAAC;YACrC,MAAMY,MAAM,GAAG,IAAI,CAACC,gCAAgC,CAACxE,KAAK,CAAC;YAC3D,IAAI,CAACyE,sBAAsB,CAAC,CAACzE,KAAK,CAAC0E,iBAAiB,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;YAChEI,SAAS,CAACC,QAAQ,CAAC,CAAC,CAAC;UACzB;QACJ,CAAC,CAAC,CAAC;MACP;MACA;MACA,MAAMC,MAAM,GAAG,IAAI,CAAC/C,gBAAgB,CAAC/B,GAAG,CAACC,KAAK,CAAC;MAC/C,IAAI6E,MAAM,EAAE;QACR,IAAI,CAACJ,sBAAsB,CAAC,CAACzE,KAAK,CAAC0E,iBAAiB,CAAC,CAAC,CAAC,EAAEG,MAAM,CAAC;MACpE;MACA,IAAI,CAAC1C,mBAAmB,CAACS,GAAG,CAAC7E,YAAY,CAAC,MAAM;QAC5C;QACA,IAAI,CAACiC,KAAK,CAAC8E,UAAU,CAAC,CAAC,EAAE;UACrB,IAAI,CAACC,yBAAyB,CAAC/E,KAAK,CAAC;QACzC;MACJ,CAAC,CAAC,CAAC;MACH,IAAIgF,GAAG;MACP,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;MAClC,MAAMP,SAAS,GAAG,IAAIjH,gBAAgB,cAAAyH,iBAAA,CAAC,aAAY;QAC/C,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrBN,GAAG,EAAE5B,OAAO,CAAC,IAAI,CAAC;QAClB4B,GAAG,GAAG,IAAIpH,uBAAuB,CAAC,CAAC;QACnC,MAAM2H,QAAQ,GAAGvF,KAAK,CAACwF,aAAa,CAAC,MAAMR,GAAG,EAAES,MAAM,CAAC,CAAC,CAAC;QACzD,IAAI;UACA,MAAMC,OAAO,GAAGV,GAAG,CAACW,KAAK;UACzB,MAAMC,UAAU,SAAS5G,mBAAmB,CAAC6G,MAAM,CAACvC,KAAI,CAAC1B,wBAAwB,CAACc,kBAAkB,EAAE1C,KAAK,EAAEsD,KAAI,CAACwC,eAAe,CAAC,CAAC,EAAEJ,OAAO,CAAC;UAC7If,SAAS,CAACoB,KAAK,GAAGzC,KAAI,CAACd,aAAa,CAACwD,MAAM,CAAChG,KAAK,EAAEqF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,EAAE,CAAC;UACnE,IAAIM,OAAO,CAACO,uBAAuB,EAAE;YACjCL,UAAU,CAACxC,OAAO,CAAC,CAAC;YACpB;UACJ;UACA;UACA,KAAK,MAAM8C,QAAQ,IAAIN,UAAU,CAACM,QAAQ,EAAE;YACxC,IAAI,OAAOA,QAAQ,CAACC,qBAAqB,KAAK,UAAU,IAAI,CAAClB,gBAAgB,CAACrB,GAAG,CAACsC,QAAQ,CAAC,EAAE;cACzFjB,gBAAgB,CAACrC,GAAG,CAACsD,QAAQ,CAAC;cAC9B5C,KAAI,CAACnB,mBAAmB,CAACS,GAAG,CAACsD,QAAQ,CAACC,qBAAqB,CAAC,MAAM;gBAC9D,IAAI,CAACxB,SAAS,CAACyB,WAAW,CAAC,CAAC,EAAE;kBAAE;kBAC5BzB,SAAS,CAACC,QAAQ,CAAC,CAAC;gBACxB;cACJ,CAAC,CAAC,CAAC;YACP;UACJ;UACAtB,KAAI,CAACnB,mBAAmB,CAACS,GAAG,CAACgD,UAAU,CAAC;UACxCtC,KAAI,CAACmB,sBAAsB,CAACmB,UAAU,CAACS,MAAM,EAAET,UAAU,CAACU,KAAK,CAAC;UAChEhD,KAAI,CAACyB,yBAAyB,CAAC/E,KAAK,CAAC;QACzC,CAAC,CACD,OAAOuG,GAAG,EAAE;UACR1I,iBAAiB,CAAC0I,GAAG,CAAC;QAC1B,CAAC,SACO;UACJvB,GAAG,CAAC5B,OAAO,CAAC,CAAC;UACbmC,QAAQ,CAACnC,OAAO,CAAC,CAAC;QACtB;MACJ,CAAC,GAAE,IAAI,CAACZ,aAAa,CAACzC,GAAG,CAACC,KAAK,CAAC,CAAC;MACjC,IAAI,CAACmC,mBAAmB,CAACS,GAAG,CAAC+B,SAAS,CAAC;MACvC,IAAI,CAACxC,mBAAmB,CAACS,GAAG,CAAC7E,YAAY,CAAC,MAAMiH,GAAG,EAAE5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACpEuB,SAAS,CAACC,QAAQ,CAAC,CAAC,CAAC;MACrB,IAAI,CAACzC,mBAAmB,CAACS,GAAG,CAAC,IAAI,CAACjB,OAAO,CAAC6E,iBAAiB,CAAEtD,CAAC,IAAK;QAC/D;QACA;QACA;QACA,IAAIA,CAAC,CAACuD,gBAAgB,IAAI,CAAC9B,SAAS,CAACyB,WAAW,CAAC,CAAC,EAAE;UAChDzB,SAAS,CAACC,QAAQ,CAAC,CAAC;QACxB;MACJ,CAAC,CAAC,CAAC;MACH,IAAI,CAACzC,mBAAmB,CAACS,GAAG,CAAC,IAAI,CAACjB,OAAO,CAAC+E,uBAAuB,CAAExD,CAAC,IAAK;QACrE8B,GAAG,EAAES,MAAM,CAAC,CAAC;QACb;QACA,MAAMM,KAAK,GAAGY,IAAI,CAACC,GAAG,CAACjC,SAAS,CAACoB,KAAK,EAAE,IAAI,CAAC;QAC7CpB,SAAS,CAACC,QAAQ,CAACmB,KAAK,CAAC;MAC7B,CAAC,CAAC,CAAC;MACH;MACA,IAAI,CAAC5D,mBAAmB,CAACS,GAAG,CAAC,IAAI,CAACiE,uBAAuB,CAAC,MAAMlC,SAAS,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACvF,IAAI,CAACzC,mBAAmB,CAACS,GAAG,CAAC,IAAI,CAACkE,mBAAmB,CAAC,CAAC,CAAC;MACxD,IAAI,CAAC3E,mBAAmB,CAACS,GAAG,CAAC,IAAI,CAACmE,mBAAmB,CAAC,CAAC,CAAC;IAC5D;IACAD,mBAAmBA,CAAA,EAAG;MAAA,IAAAE,MAAA;MAClB,MAAMC,KAAK,GAAG,IAAInJ,eAAe,CAAC,CAAC;MACnC,MAAMoJ,OAAO,GAAGD,KAAK,CAACrE,GAAG,CAAC,IAAI9D,gBAAgB,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAC;MAC7D;MACA,MAAMwF,YAAY,GAAG,IAAIrJ,eAAe,CAAC,CAAC;MAC1CmJ,KAAK,CAACrE,GAAG,CAACuE,YAAY,CAAC;MACvBF,KAAK,CAACrE,GAAG,CAACsE,OAAO,CAACE,4BAA4B,CAAClE,CAAC,IAAI;QAChD,MAAM,CAACmE,UAAU,CAAC,GAAGnE,CAAC;QACtB,MAAMoE,SAAS,GAAG,IAAI,CAACC,sBAAsB,CAACF,UAAU,CAAC;QACzD,MAAMrH,KAAK,GAAG,IAAI,CAAC2B,OAAO,CAACgC,QAAQ,CAAC,CAAC;QACrC,IAAI,CAAC2D,SAAS,IAAI,CAACtH,KAAK,EAAE;UACtBmH,YAAY,CAAC5D,KAAK,CAAC,CAAC;UACpB;QACJ;QACA;QACA,MAAMyB,GAAG,GAAG,IAAIpH,uBAAuB,CAAC,CAAC;QACzCuJ,YAAY,CAACvE,GAAG,CAAC7E,YAAY,CAAC,MAAMiH,GAAG,CAAC5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACvDkE,SAAS,CAAC7G,IAAI,CAAC+G,OAAO,CAACxC,GAAG,CAACW,KAAK,CAAC;QACjC;QACA,IAAI,CAAC8B,oBAAoB,GAAGH,SAAS,CAAC3G,IAAI,CAAC+G,OAAO,IAAIJ,SAAS,CAAC3G,IAAI,CAACgH,QAAQ,GACvE,IAAI7G,mBAAmB,CAACwG,SAAS,EAAED,UAAU,CAACtG,kBAAkB,CAAC,GACjEW,SAAS;QACf,MAAMkG,UAAU,GAAG5H,KAAK,CAAC6H,gBAAgB,CAACP,SAAS,CAAC7G,IAAI,CAACI,IAAI,CAACiH,QAAQ,CAAC,CAACF,UAAU;QAClF,MAAMG,KAAK,GAAG,IAAIxJ,KAAK,CAACqJ,UAAU,EAAE,CAAC,EAAEA,UAAU,EAAE5H,KAAK,CAACgI,gBAAgB,CAACJ,UAAU,CAAC,CAAC;QACtF,MAAMK,SAAS,GAAG,IAAI,CAACC,uBAAuB,CAACH,KAAK,CAAC;QACrD,IAAI,CAACtD,sBAAsB,CAAC,CAACsD,KAAK,CAAC,EAAEE,SAAS,CAAC;QAC/Cd,YAAY,CAACvE,GAAG,CAAC7E,YAAY,CAAC,MAAM;UAChC,IAAI,CAAC0J,oBAAoB,GAAG/F,SAAS;UACrC,IAAI,CAAC+C,sBAAsB,CAAC,CAACsD,KAAK,CAAC,EAAEE,SAAS,CAAC;QACnD,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC;MACHhB,KAAK,CAACrE,GAAG,CAACsE,OAAO,CAACiB,QAAQ,CAAC,MAAMhB,YAAY,CAAC5D,KAAK,CAAC,CAAC,CAAC,CAAC;MACvD0D,KAAK,CAACrE,GAAG,CAACsE,OAAO,CAACkB,SAAS;QAAA,IAAAC,KAAA,GAAAlD,iBAAA,CAAC,WAAOjC,CAAC,EAAK;UACrC,MAAMtC,KAAK,GAAGoG,MAAI,CAACO,sBAAsB,CAACrE,CAAC,CAAC;UAC5C,IAAItC,KAAK,EAAE;YACP,MAAMD,IAAI,GAAGC,KAAK,CAACD,IAAI;YACvB,IAAIA,IAAI,CAACgH,QAAQ,EAAE;cACf;cACAX,MAAI,CAAC/E,aAAa,CAACqG,cAAc,CAACrJ,0BAA0B,EAAEiE,CAAC,EAAE8D,MAAI,CAACrF,OAAO,EAAEhB,IAAI,CAACgH,QAAQ,CAAC;YACjG,CAAC,MACI,IAAInJ,SAAS,CAAC+J,OAAO,CAACC,EAAE,CAAC7H,IAAI,CAAC+G,OAAO,CAAC,EAAE;cACzC;cACA,MAAMV,MAAI,CAACyB,cAAc,CAAC9H,IAAI,CAAC+G,OAAO,EAAE9G,KAAK,CAACH,IAAI,CAAC;YACvD;UACJ;QACJ,CAAC;QAAA,iBAAAiI,EAAA;UAAA,OAAAL,KAAA,CAAAM,KAAA,OAAAlM,SAAA;QAAA;MAAA,IAAC,CAAC;MACH,OAAOwK,KAAK;IAChB;IACAiB,uBAAuBA,CAACH,KAAK,EAAE;MAC3B,MAAME,SAAS,GAAG,IAAI/C,GAAG,CAAC,CAAC;MAC3B,KAAK,MAAM0D,IAAI,IAAI,IAAI,CAACxG,oBAAoB,CAACyG,MAAM,CAAC,CAAC,EAAE;QACnD,IAAId,KAAK,CAACe,aAAa,CAACF,IAAI,CAACnI,IAAI,CAACsI,MAAM,CAAChB,KAAK,CAAC,EAAE;UAC7CE,SAAS,CAACrF,GAAG,CAACgG,IAAI,CAACnI,IAAI,CAAC;QAC5B;MACJ;MACA,OAAOuI,KAAK,CAACC,IAAI,CAAChB,SAAS,CAAC;IAChC;IACApB,uBAAuBA,CAACqC,gBAAgB,EAAE;MAAA,IAAAC,MAAA;MACtC,OAAO,IAAI,CAACxH,OAAO,CAACyH,SAAS;QAAA,IAAAC,KAAA,GAAAlE,iBAAA,CAAC,WAAOjC,CAAC,EAAK;UACvC,IAAIA,CAAC,CAACc,KAAK,CAACsF,MAAM,KAAK,CAAC,EAAE;YACtB;UACJ;UACA,MAAM3I,IAAI,GAAGwI,MAAI,CAAC5B,sBAAsB,CAACrE,CAAC,CAAC;UAC3C,IAAI,CAACvC,IAAI,EAAE;YACP;UACJ;UACAuC,CAAC,CAACc,KAAK,CAACuF,cAAc,CAAC,CAAC;UACxB,MAAM5I,IAAI,CAACF,IAAI,CAAC+G,OAAO,CAAC7J,iBAAiB,CAAC6L,IAAI,CAAC;UAC/C,IAAI/L,eAAe,CAACkD,IAAI,CAACF,IAAI,CAACI,IAAI,CAAC4I,SAAS,CAAC,EAAE;YAC3C,MAAMC,KAAK,GAAG/I,IAAI,CAACF,IAAI,CAACI,IAAI,CAAC4I,SAAS,CAACE,GAAG,CAACC,IAAI,IAAItL,aAAa,CAACuL,OAAO,CAACtL,KAAK,CAACuL,IAAI,CAACF,IAAI,CAAC7B,KAAK,CAAC,EAAE6B,IAAI,CAACG,IAAI,CAAC,CAAC;YAC5GZ,MAAI,CAACxH,OAAO,CAACqI,YAAY,CAAC,mBAAmB,EAAEN,KAAK,CAAC;YACrDR,gBAAgB,CAAC,CAAC;UACtB;QACJ,CAAC;QAAA,iBAAAe,GAAA;UAAA,OAAAZ,KAAA,CAAAV,KAAA,OAAAlM,SAAA;QAAA;MAAA,IAAC;IACN;IACAsK,mBAAmBA,CAAA,EAAG;MAAA,IAAAmD,MAAA;MAClB,OAAO,IAAI,CAACvI,OAAO,CAACwI,aAAa;QAAA,IAAAC,KAAA,GAAAjF,iBAAA,CAAC,WAAOjC,CAAC,EAAK;UAC3C,IAAI,CAAE3F,aAAa,CAAC2F,CAAC,CAACc,KAAK,CAAC3H,MAAM,CAAE,EAAE;YAClC;UACJ;UACA,MAAMsE,IAAI,GAAGuJ,MAAI,CAAC3C,sBAAsB,CAACrE,CAAC,CAAC;UAC3C,IAAIvC,IAAI,EAAE;YACN,MAAMuJ,MAAI,CAACjI,aAAa,CAACqG,cAAc,CAACpJ,mBAAmB,EAAEgL,MAAI,CAACvI,OAAO,EAAEuB,CAAC,CAACc,KAAK,CAAC3H,MAAM,EAAEsE,IAAI,CAAC;UACpG;QACJ,CAAC;QAAA,iBAAA0J,GAAA;UAAA,OAAAD,KAAA,CAAAzB,KAAA,OAAAlM,SAAA;QAAA;MAAA,IAAC;IACN;IACA8K,sBAAsBA,CAACrE,CAAC,EAAE;MACtB,IAAIA,CAAC,CAAC7G,MAAM,CAACiO,IAAI,KAAK,CAAC,CAAC,oCAAoC;QACxD,OAAO5I,SAAS;MACpB;MACA,MAAM8B,OAAO,GAAGN,CAAC,CAAC7G,MAAM,CAACiN,MAAM,CAACiB,YAAY,EAAE/G,OAAO;MACrD,IAAIA,OAAO,YAAY9E,kCAAkC,IAAI8E,OAAO,EAAEgH,YAAY,YAAYhK,0BAA0B,EAAE;QACtH,OAAOgD,OAAO,CAACgH,YAAY;MAC/B;MACA,OAAO9I,SAAS;IACpB;IACM+G,cAAcA,CAACf,OAAO,EAAEjH,IAAI,EAAE;MAAA,IAAAgK,MAAA;MAAA,OAAAtF,iBAAA;QAChC,IAAI;UACA,MAAMsF,MAAI,CAAC1I,eAAe,CAAC2I,cAAc,CAAChD,OAAO,CAACiD,EAAE,EAAE,IAAIjD,OAAO,CAACjL,SAAS,IAAI,EAAE,CAAC,CAAC;QACvF,CAAC,CACD,OAAO8J,GAAG,EAAE;UACRkE,MAAI,CAACzI,oBAAoB,CAAC4I,MAAM,CAAC;YAC7BC,QAAQ,EAAEpL,QAAQ,CAACqL,KAAK;YACxBC,MAAM,EAAEtK,IAAI,CAACyF,QAAQ,CAAC8E,WAAW;YACjCC,OAAO,EAAE1E;UACb,CAAC,CAAC;QACN;MAAC;IACL;IACAxB,yBAAyBA,CAAC/E,KAAK,EAAE;MAC7B,MAAMkL,KAAK,GAAG,IAAI,CAAC1G,gCAAgC,CAACxE,KAAK,CAAC;MAC1D,IAAI,CAAC8B,gBAAgB,CAAC5B,GAAG,CAACF,KAAK,EAAEkL,KAAK,CAAC;IAC3C;IACA;IACA;IACA1G,gCAAgCA,CAACxE,KAAK,EAAE;MACpC,MAAMsG,KAAK,GAAG,IAAIjE,GAAG,CAAC,CAAC;MACvB,KAAK,MAAM,CAACsI,EAAE,EAAEQ,GAAG,CAAC,IAAI,IAAI,CAAC/I,oBAAoB,EAAE;QAC/C,IAAIkE,KAAK,CAAC1C,GAAG,CAACuH,GAAG,CAAC1K,IAAI,CAAC,EAAE;UACrB;UACA;UACA;QACJ;QACA,MAAMsH,KAAK,GAAG/H,KAAK,CAACoL,kBAAkB,CAACT,EAAE,CAAC;QAC1C,IAAI5C,KAAK,EAAE;UACP;UACA,MAAMgB,MAAM,GAAG,IAAIhK,eAAe,CAACgJ,KAAK,EAAEoD,GAAG,CAAC1K,IAAI,CAACsI,MAAM,CAACsC,SAAS,CAAC;UACpE,MAAMC,IAAI,GAAGH,GAAG,CAAC1K,IAAI,CAAC8K,IAAI,CAAC;YAAExC;UAAO,CAAC,CAAC;UACtCzC,KAAK,CAACpG,GAAG,CAACiL,GAAG,CAAC1K,IAAI,EAAE6K,IAAI,CAAC;QAC7B;MACJ;MACA,OAAOtC,KAAK,CAACC,IAAI,CAAC3C,KAAK,CAACuC,MAAM,CAAC,CAAC,CAAC;IACrC;IACA/C,eAAeA,CAAA,EAAG;MACd,MAAM0F,KAAK,GAAG,EAAE;MAChB,MAAMxL,KAAK,GAAG,IAAI,CAAC2B,OAAO,CAACgC,QAAQ,CAAC,CAAC;MACrC,MAAM8H,aAAa,GAAG,IAAI,CAAC9J,OAAO,CAAC+J,sCAAsC,CAAC,CAAC;MAC3E,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAK,MAAM5D,KAAK,IAAI0D,aAAa,CAACG,IAAI,CAACrN,KAAK,CAACsN,wBAAwB,CAAC,EAAE;QACpE,MAAMC,aAAa,GAAG9L,KAAK,CAAC+L,aAAa,CAAC,IAAIxN,KAAK,CAACwJ,KAAK,CAACiE,eAAe,GAAGR,KAAK,EAAEzD,KAAK,CAACkE,WAAW,EAAElE,KAAK,CAACmE,aAAa,GAAGV,KAAK,EAAEzD,KAAK,CAACoE,SAAS,CAAC,CAAC;QACpJ,IAAIR,MAAM,CAACjP,MAAM,KAAK,CAAC,IAAI,CAAC6B,KAAK,CAAC6N,yBAAyB,CAACT,MAAM,CAACA,MAAM,CAACjP,MAAM,GAAG,CAAC,CAAC,EAAEoP,aAAa,CAAC,EAAE;UACnGH,MAAM,CAACU,IAAI,CAACP,aAAa,CAAC;QAC9B,CAAC,MACI;UACDH,MAAM,CAACA,MAAM,CAACjP,MAAM,GAAG,CAAC,CAAC,GAAG6B,KAAK,CAAC+N,SAAS,CAACX,MAAM,CAACA,MAAM,CAACjP,MAAM,GAAG,CAAC,CAAC,EAAEoP,aAAa,CAAC;QACzF;MACJ;MACA,OAAOH,MAAM;IACjB;IACAlH,sBAAsBA,CAAC4B,MAAM,EAAEC,KAAK,EAAE;MAClC;MACA,MAAMiG,kBAAkB,GAAG,EAAE;MAC7B,MAAMC,eAAe,GAAGA,CAAC/L,IAAI,EAAEgM,GAAG,EAAEC,OAAO,EAAEC,WAAW,EAAEnC,YAAY,KAAK;QACvE,MAAMoC,IAAI,GAAG;UACTF,OAAO;UACPG,mCAAmC,EAAE,IAAI;UACzCC,eAAe,EAAEL,GAAG,CAACM,SAAS;UAC9BJ,WAAW;UACXnC;QACJ,CAAC;QACD+B,kBAAkB,CAACF,IAAI,CAAC;UACpB5L,IAAI;UACJuM,YAAY,EAAEP,GAAG;UACjBQ,UAAU,EAAE;YACRlF,KAAK,EAAEtH,IAAI,CAACsI,MAAM,CAAChB,KAAK;YACxBvE,OAAO,EAAE;cACL;cACA0J,WAAW,EAAE,WAAW;cACxBC,eAAe,EAAE1M,IAAI,CAACsI,MAAM,CAAChB,KAAK,CAACqF,OAAO,CAAC,CAAC;cAAE;cAC9CC,qBAAqB,EAAE,CAAC5M,IAAI,CAACsI,MAAM,CAAChB,KAAK,CAACqF,OAAO,CAAC,CAAC;cACnDE,UAAU,EAAE,CAAC,CAAC;cACd,CAAC7M,IAAI,CAACsI,MAAM,CAACsC,SAAS,GAAG,IAAI,CAAC9I,iBAAiB,KAAK,CAAC,CAAC,0BAA0BqK,IAAI,GAAGlL;YAC3F;UACJ;QACJ,CAAC,CAAC;MACN,CAAC;MACD,MAAM6L,qBAAqB,GAAGA,CAAC9M,IAAI,EAAE+M,MAAM,KAAK;QAC5C,MAAMC,UAAU,GAAG,IAAI,CAACnL,YAAY,CAACoL,kBAAkB,CAAC;UACpDC,KAAK,EAAE,GAAIC,QAAQ,GAAG,CAAC,GAAI,CAAC,IAAI;UAChCC,OAAO,EAAE;QACb,CAAC,CAAC;QACFrB,eAAe,CAAC/L,IAAI,EAAEgN,UAAU,EAAE,QAAQ,EAAED,MAAM,GAAG/O,uBAAuB,CAACqP,KAAK,GAAGrP,uBAAuB,CAAC+K,IAAI,CAAC;MACtH,CAAC;MACD;MACA,MAAM;QAAEoE,QAAQ;QAAEG,UAAU;QAAEC,OAAO;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAC1E,MAAMC,aAAa,GAAG,mCAAmC;MACzD,IAAI,CAACxM,OAAO,CAACyM,mBAAmB,CAAC,CAAC,CAACC,KAAK,CAACC,WAAW,CAACH,aAAa,EAAEJ,UAAU,CAAC;MAC/E,IAAIQ,eAAe,GAAG;QAAEC,IAAI,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAE,CAAC;MAC9C,KAAK,MAAMhO,IAAI,IAAI6F,KAAK,EAAE;QACtB,IAAIiI,eAAe,CAACC,IAAI,KAAK/N,IAAI,CAACsI,MAAM,CAAChB,KAAK,CAACiE,eAAe,EAAE;UAC5DuC,eAAe,GAAG;YAAEC,IAAI,EAAE/N,IAAI,CAACsI,MAAM,CAAChB,KAAK,CAACiE,eAAe;YAAEyC,QAAQ,EAAE;UAAE,CAAC;QAC9E;QACA,IAAIF,eAAe,CAACE,QAAQ,GAAGnR,sBAAsB,CAACiE,cAAc,EAAE;UAClE;QACJ;QACA;QACA,IAAId,IAAI,CAACI,IAAI,CAAC6N,WAAW,EAAE;UACvBnB,qBAAqB,CAAC9M,IAAI,EAAE,KAAK,CAAC;QACtC;QACA;QACA,MAAMkO,KAAK,GAAG,OAAOlO,IAAI,CAACI,IAAI,CAACD,KAAK,KAAK,QAAQ,GAC3C,CAAC;UAAEA,KAAK,EAAEH,IAAI,CAACI,IAAI,CAACD;QAAM,CAAC,CAAC,GAC5BH,IAAI,CAACI,IAAI,CAACD,KAAK;QACrB,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0R,KAAK,CAACjS,MAAM,EAAEO,CAAC,EAAE,EAAE;UACnC,MAAM0D,IAAI,GAAGgO,KAAK,CAAC1R,CAAC,CAAC;UACrB,MAAM2R,OAAO,GAAG3R,CAAC,KAAK,CAAC;UACvB,MAAMuQ,MAAM,GAAGvQ,CAAC,KAAK0R,KAAK,CAACjS,MAAM,GAAG,CAAC;UACrC,MAAMmS,aAAa,GAAG;YAClBjB,QAAQ,EAAE,GAAGA,QAAQ,IAAI;YACzBG,UAAU,EAAE,OAAOI,aAAa,MAAM9P,oBAAoB,CAAC0P,UAAU,EAAE;YACvEe,aAAa,EAAEb,SAAS,GAAG,UAAU,GAAG,QAAQ;YAChDc,WAAW,EAAE;UACjB,CAAC;UACD,IAAItR,eAAe,CAACgD,IAAI,CAACI,IAAI,CAAC4I,SAAS,CAAC,EAAE;YACtCoF,aAAa,CAACG,MAAM,GAAG,SAAS;UACpC;UACA,IAAI,CAACC,aAAa,CAACJ,aAAa,EAAEpO,IAAI,CAACI,IAAI,CAAC;UAC5C,IAAI,CAACF,IAAI,CAAC+G,OAAO,IAAI/G,IAAI,CAACgH,QAAQ,KAAK,IAAI,CAACF,oBAAoB,EAAE9G,IAAI,CAACF,IAAI,KAAKA,IAAI,IAAI,IAAI,CAACgH,oBAAoB,CAAC9G,IAAI,CAACD,KAAK,KAAKzD,CAAC,EAAE;YAChI;YACA4R,aAAa,CAACK,cAAc,GAAG,WAAW;YAC1C,IAAI,IAAI,CAACzH,oBAAoB,CAAC1G,kBAAkB,EAAE;cAC9C8N,aAAa,CAACM,KAAK,GAAGxP,gBAAgB,CAACD,MAAM,CAAC0P,0BAA0B,CAAC;cACzEP,aAAa,CAACG,MAAM,GAAG,SAAS;YACpC;UACJ;UACA,IAAIhB,OAAO,EAAE;YACT,IAAIY,OAAO,IAAIpB,MAAM,EAAE;cACnB;cACAqB,aAAa,CAACb,OAAO,GAAG,OAAOrH,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgH,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI;cAChEiB,aAAa,CAACQ,YAAY,GAAG,GAAIzB,QAAQ,GAAG,CAAC,GAAI,CAAC,IAAI;YAC1D,CAAC,MACI,IAAIgB,OAAO,EAAE;cACd;cACAC,aAAa,CAACb,OAAO,GAAG,aAAarH,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgH,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI;cACtEiB,aAAa,CAACQ,YAAY,GAAG,GAAIzB,QAAQ,GAAG,CAAC,GAAI,CAAC,UAAWA,QAAQ,GAAG,CAAC,GAAI,CAAC,IAAI;YACtF,CAAC,MACI,IAAIJ,MAAM,EAAE;cACb;cACAqB,aAAa,CAACb,OAAO,GAAG,OAAOrH,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgH,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU;cACtEiB,aAAa,CAACQ,YAAY,GAAG,KAAMzB,QAAQ,GAAG,CAAC,GAAI,CAAC,MAAOA,QAAQ,GAAG,CAAC,GAAI,CAAC,MAAM;YACtF,CAAC,MACI;cACDiB,aAAa,CAACb,OAAO,GAAG,aAAa;YACzC;UACJ;UACA,IAAIsB,SAAS,GAAG3O,IAAI,CAACC,KAAK;UAC1B2N,eAAe,CAACE,QAAQ,IAAIa,SAAS,CAAC5S,MAAM;UAC5C,IAAI6S,OAAO,GAAG,KAAK;UACnB,MAAMC,IAAI,GAAGjB,eAAe,CAACE,QAAQ,GAAGnR,sBAAsB,CAACiE,cAAc;UAC7E,IAAIiO,IAAI,GAAG,CAAC,EAAE;YACVF,SAAS,GAAGA,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAACD,IAAI,CAAC,GAAG,GAAG;YAC3CD,OAAO,GAAG,IAAI;UAClB;UACA/C,eAAe,CAAC/L,IAAI,EAAE,IAAI,CAAC6B,YAAY,CAACoL,kBAAkB,CAACmB,aAAa,CAAC,EAAEa,QAAQ,CAACJ,SAAS,CAAC,EAAE9B,MAAM,IAAI,CAAC/M,IAAI,CAACI,IAAI,CAAC8O,YAAY,GAAGlR,uBAAuB,CAACqP,KAAK,GAAGrP,uBAAuB,CAAC+K,IAAI,EAAE,IAAIhJ,0BAA0B,CAACC,IAAI,EAAExD,CAAC,CAAC,CAAC;UAC1O,IAAIsS,OAAO,EAAE;YACT;UACJ;QACJ;QACA;QACA,IAAI9O,IAAI,CAACI,IAAI,CAAC8O,YAAY,EAAE;UACxBpC,qBAAqB,CAAC9M,IAAI,EAAE,IAAI,CAAC;QACrC;QACA,IAAI8L,kBAAkB,CAAC7P,MAAM,GAAGY,sBAAsB,CAAC+D,eAAe,EAAE;UACpE;QACJ;MACJ;MACA;MACA;MACA,MAAMuO,sBAAsB,GAAG,EAAE;MACjC,KAAK,MAAM,CAACjF,EAAE,EAAEkF,QAAQ,CAAC,IAAI,IAAI,CAACzN,oBAAoB,EAAE;QACpD,MAAM2F,KAAK,GAAG,IAAI,CAACpG,OAAO,CAACgC,QAAQ,CAAC,CAAC,EAAEyH,kBAAkB,CAACT,EAAE,CAAC;QAC7D,IAAI5C,KAAK,IAAI1B,MAAM,CAACyJ,IAAI,CAACnT,CAAC,IAAIA,CAAC,CAACmM,aAAa,CAACf,KAAK,CAAC,CAAC,EAAE;UACnD6H,sBAAsB,CAACvD,IAAI,CAAC1B,EAAE,CAAC;UAC/BkF,QAAQ,CAAC7C,YAAY,CAAC5J,OAAO,CAAC,CAAC;UAC/B,IAAI,CAAChB,oBAAoB,CAAC2N,MAAM,CAACpF,EAAE,CAAC;QACxC;MACJ;MACA,MAAMqF,WAAW,GAAG5R,uBAAuB,CAAC6R,OAAO,CAAC,IAAI,CAACtO,OAAO,CAAC;MACjE,IAAI,CAACA,OAAO,CAACuO,iBAAiB,CAACC,QAAQ,IAAI;QACvC,MAAMC,gBAAgB,GAAGD,QAAQ,CAACE,gBAAgB,CAACT,sBAAsB,EAAErD,kBAAkB,CAAC5C,GAAG,CAAC7M,CAAC,IAAIA,CAAC,CAACmQ,UAAU,CAAC,CAAC;QACrH,KAAK,IAAIhQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmT,gBAAgB,CAAC1T,MAAM,EAAEO,CAAC,EAAE,EAAE;UAC9C,MAAM2L,IAAI,GAAG2D,kBAAkB,CAACtP,CAAC,CAAC;UAClC,IAAI,CAACmF,oBAAoB,CAAClC,GAAG,CAACkQ,gBAAgB,CAACnT,CAAC,CAAC,EAAE2L,IAAI,CAAC;QAC5D;MACJ,CAAC,CAAC;MACFoH,WAAW,CAACM,OAAO,CAAC,IAAI,CAAC3O,OAAO,CAAC;IACrC;IACAsN,aAAaA,CAACsB,KAAK,EAAE1P,IAAI,EAAE;MACvB,IAAIA,IAAI,CAAC2P,IAAI,KAAKhS,SAAS,CAACiS,aAAa,CAACC,SAAS,EAAE;QACjDH,KAAK,CAACI,eAAe,GAAGhR,gBAAgB,CAACD,MAAM,CAACkR,kCAAkC,CAAC;QACnFL,KAAK,CAACpB,KAAK,GAAGxP,gBAAgB,CAACD,MAAM,CAACmR,kCAAkC,CAAC;MAC7E,CAAC,MACI,IAAIhQ,IAAI,CAAC2P,IAAI,KAAKhS,SAAS,CAACiS,aAAa,CAACK,IAAI,EAAE;QACjDP,KAAK,CAACI,eAAe,GAAGhR,gBAAgB,CAACD,MAAM,CAACqR,6BAA6B,CAAC;QAC9ER,KAAK,CAACpB,KAAK,GAAGxP,gBAAgB,CAACD,MAAM,CAACsR,6BAA6B,CAAC;MACxE,CAAC,MACI;QACDT,KAAK,CAACI,eAAe,GAAGhR,gBAAgB,CAACD,MAAM,CAACuR,yBAAyB,CAAC;QAC1EV,KAAK,CAACpB,KAAK,GAAGxP,gBAAgB,CAACD,MAAM,CAACwR,yBAAyB,CAAC;MACpE;IACJ;IACAhD,cAAcA,CAAA,EAAG;MACb,MAAM1K,OAAO,GAAG,IAAI,CAAC7B,OAAO,CAAC8B,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC;MACzE,MAAMuK,OAAO,GAAGxK,OAAO,CAACwK,OAAO;MAC/B,MAAMmD,cAAc,GAAG,IAAI,CAACxP,OAAO,CAAC8B,SAAS,CAAC,EAAE,CAAC,2BAA2B,CAAC;MAC7E,MAAM2N,gBAAgB,GAAG,IAAI,CAACzP,OAAO,CAAC8B,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;MACjF,IAAImK,QAAQ,GAAGpK,OAAO,CAACoK,QAAQ;MAC/B,IAAI,CAACA,QAAQ,IAAIA,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAGuD,cAAc,EAAE;QACxDvD,QAAQ,GAAGuD,cAAc;MAC7B;MACA,MAAMpD,UAAU,GAAGvK,OAAO,CAACuK,UAAU,IAAIqD,gBAAgB;MACzD,MAAMnD,SAAS,GAAG,CAACD,OAAO,IACnBD,UAAU,KAAKqD,gBAAgB,IAC/BxD,QAAQ,KAAKuD,cAAc;MAClC,OAAO;QAAEvD,QAAQ;QAAEG,UAAU;QAAEC,OAAO;QAAEC;MAAU,CAAC;IACvD;IACA5K,qBAAqBA,CAAA,EAAG;MACpB,IAAI,CAAC1B,OAAO,CAAC0P,iBAAiB,CAACrI,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC7G,oBAAoB,CAACkP,IAAI,CAAC,CAAC,CAAC,CAAC;MAC5E,KAAK,MAAMnG,GAAG,IAAI,IAAI,CAAC/I,oBAAoB,CAACyG,MAAM,CAAC,CAAC,EAAE;QAClDsC,GAAG,CAAC6B,YAAY,CAAC5J,OAAO,CAAC,CAAC;MAC9B;MACA,IAAI,CAAChB,oBAAoB,CAACmB,KAAK,CAAC,CAAC;IACrC;EACJ,CAAC;EAAA,OAvdGvC,oBAAoB;AAAA,IAudvB;AACDA,oBAAoB,GAAG1D,sBAAsB,GAAGnB,UAAU,CAAC,CACvDgB,OAAO,CAAC,CAAC,EAAEyB,wBAAwB,CAAC,EACpCzB,OAAO,CAAC,CAAC,EAAEwB,+BAA+B,CAAC,EAC3CxB,OAAO,CAAC,CAAC,EAAEoD,gBAAgB,CAAC,EAC5BpD,OAAO,CAAC,CAAC,EAAEiC,eAAe,CAAC,EAC3BjC,OAAO,CAAC,CAAC,EAAEqC,oBAAoB,CAAC,EAChCrC,OAAO,CAAC,CAAC,EAAEoC,qBAAqB,CAAC,CACpC,EAAEyB,oBAAoB,CAAC;AACxB,SAASA,oBAAoB;AAC7B;AACA,SAAS0O,QAAQA,CAAC6B,GAAG,EAAE;EACnB,MAAMC,iBAAiB,GAAG,MAAM;EAChC,OAAOD,GAAG,CAAC1H,OAAO,CAAC,QAAQ,EAAE2H,iBAAiB,CAAC;AACnD;AACArS,gBAAgB,CAACsS,eAAe,CAAC,2BAA2B;EAAA,IAAAC,KAAA,GAAAvM,iBAAA,CAAE,WAAOgL,QAAQ,EAAE,GAAGwB,IAAI,EAAK;IACvF,MAAM,CAACvR,GAAG,EAAE2H,KAAK,CAAC,GAAG4J,IAAI;IACzB1T,UAAU,CAACC,GAAG,CAAC0T,KAAK,CAACxR,GAAG,CAAC,CAAC;IAC1BnC,UAAU,CAACM,KAAK,CAACsT,QAAQ,CAAC9J,KAAK,CAAC,CAAC;IACjC,MAAM;MAAErF;IAAmB,CAAC,GAAGyN,QAAQ,CAACpQ,GAAG,CAACnB,wBAAwB,CAAC;IACrE,MAAM6N,GAAG,SAAS0D,QAAQ,CAACpQ,GAAG,CAAClB,iBAAiB,CAAC,CAACiT,oBAAoB,CAAC1R,GAAG,CAAC;IAC3E,IAAI;MACA,MAAMJ,KAAK,SAAShB,mBAAmB,CAAC6G,MAAM,CAACnD,kBAAkB,EAAE+J,GAAG,CAACsF,MAAM,CAACC,eAAe,EAAE,CAACzT,KAAK,CAACuL,IAAI,CAAC/B,KAAK,CAAC,CAAC,EAAEpK,iBAAiB,CAAC6L,IAAI,CAAC;MAC3I,MAAMmC,MAAM,GAAG3L,KAAK,CAACsG,KAAK,CAACqD,GAAG,CAAC1M,CAAC,IAAIA,CAAC,CAAC4D,IAAI,CAAC;MAC3CoR,UAAU,CAAC,MAAMjS,KAAK,CAACoD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACtC,OAAOuI,MAAM;IACjB,CAAC,SACO;MACJc,GAAG,CAACrJ,OAAO,CAAC,CAAC;IACjB;EACJ,CAAC;EAAA,iBAAA8O,GAAA;IAAA,OAAAR,KAAA,CAAA/I,KAAA,OAAAlM,SAAA;EAAA;AAAA,IAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}