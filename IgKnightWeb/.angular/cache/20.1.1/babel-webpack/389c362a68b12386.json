{"ast":null,"code":"export const CSharpTopics = [{\n  id: 'csharp-introduction',\n  title: 'Introduction to C#',\n  slug: 'csharp-introduction'\n}, {\n  id: 'csharp-variables',\n  title: 'Variables & Data Types',\n  slug: 'csharp-variables'\n}, {\n  id: 'csharp-conditions',\n  title: 'Conditional Statements',\n  slug: 'csharp-conditions'\n}, {\n  id: 'csharp-loops',\n  title: 'Loops in C#',\n  slug: 'csharp-loops'\n}, {\n  id: 'csharp-methods',\n  title: 'Methods & Parameters',\n  slug: 'csharp-methods'\n}, {\n  id: 'csharp-arrays-lists',\n  title: 'Arrays & Lists',\n  slug: 'csharp-arrays-lists'\n}, {\n  id: 'csharp-strings',\n  title: 'Working with Strings',\n  slug: 'csharp-strings'\n}, {\n  id: 'csharp-classes-objects',\n  title: 'Classes & Objects',\n  slug: 'csharp-classes-objects'\n}, {\n  id: 'csharp-inheritance',\n  title: 'Inheritance & Polymorphism',\n  slug: 'csharp-inheritance'\n}, {\n  id: 'csharp-interfaces',\n  title: 'Interfaces & Abstraction',\n  slug: 'csharp-interfaces'\n}, {\n  id: 'csharp-collections',\n  title: 'Collections & Dictionaries',\n  slug: 'csharp-collections'\n}, {\n  id: 'csharp-exceptions',\n  title: 'Exception Handling',\n  slug: 'csharp-exceptions'\n}, {\n  id: 'csharp-linq',\n  title: 'LINQ Basics',\n  slug: 'csharp-linq'\n}, {\n  id: 'csharp-files',\n  title: 'File Handling',\n  slug: 'csharp-files'\n}, {\n  id: 'csharp-async',\n  title: 'Asynchronous Programming',\n  slug: 'csharp-async'\n}, {\n  id: 'csharp-advanced',\n  title: 'Advanced C# Tips',\n  slug: 'csharp-advanced'\n}, {\n  id: 'csharp-best-practices',\n  title: 'Best Practices',\n  slug: 'csharp-best-practices'\n}];\nexport function CSharpTopicsContent(slug) {\n  switch (slug) {\n    case 'csharp-introduction':\n      return {\n        slug: 'csharp-introduction',\n        title: 'Introduction to C#',\n        content: `\n      <p class=\"mb-4\">Let’s say you’ve built cool stuff in HTML or JavaScript, and now you're wondering: <strong>“What’s C# and why should I care?”</strong><br/>\n      Think of C# as your all-in-one power tool 🔧. You can build web apps, desktop tools, games (yep, even Unity ones), or automate stuff — all with one solid language.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🎯 So What <em>Is</em> C#?</h3>\n      <p class=\"mb-4\">C# (pronounced “C-sharp”) is a modern, powerful programming language developed by Microsoft. It’s part of the .NET ecosystem and is used for almost everything — from building full-stack web apps to developing games and automating daily tasks.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Real-Life Use Cases</h3>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li>🎮 Want to build a game? Unity uses C#.</li>\n        <li>🖥️ Need a Windows desktop app? C# + WPF or WinForms.</li>\n        <li>🌐 Web apps? ASP.NET Core is built on C#.</li>\n        <li>🤖 Automate daily tasks? C# scripts make it clean and efficient.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">👋 Your First C# Program</h3>\n      <p class=\"mb-4\">Let’s write the classic “Hello World” in C#:</p>\n\n      <pre><code class=\"language-csharp\">// Your first C# program\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Hello, IgKnight! 👋\");\n    }\n}</code></pre>\n\n      <p class=\"mb-4\">Here’s what each line means, explained like a buddy:</p>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li><code>using System;</code> — gives you access to built-in features like <code>Console</code>.</li>\n        <li><code>class Program</code> — you’re defining a class (like a blueprint or container).</li>\n        <li><code>Main()</code> — this is where your code starts running.</li>\n        <li><code>Console.WriteLine()</code> — prints text to the screen.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🚀 Why Developers Love C#</h3>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li>✅ Clean and readable syntax</li>\n        <li>⚡ Fast with modern .NET Core</li>\n        <li>🧰 Massive libraries and tools</li>\n        <li>🛡️ Strong typing helps avoid bugs</li>\n      </ul>\n\n      <p class=\"mb-4\">Whether you're building the next Instagram or automating reports at work, C# can be your best dev buddy.</p>\n    `,\n        proTip: 'C# is a one-language powerhouse: Build APIs, automate stuff, or even make games — all in one ecosystem!',\n        codeSamples: [{\n          language: 'csharp',\n          code: `// Your first friendly C# program\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Welcome to the C# universe 🚀\");\n    }\n}`\n        }]\n      };\n    case 'csharp-variables':\n      return {\n        slug: 'csharp-variables',\n        title: 'Variables & Data Types in C#',\n        content: `\n      <p class=\"mb-4\">Let’s say you're building a game or a web app, and you need to store things like a player’s score, username, or whether dark mode is on. That’s where <strong>variables</strong> come in!</p>\n\n      <p class=\"mb-4\">In C#, variables are like labeled boxes 🧃— you put data inside, give it a type, and reuse it when needed. The language is <strong>statically typed</strong>, which means every variable must have a type (like <code>int</code> or <code>string</code>).</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Declaring a Variable</h3>\n      <p class=\"mb-4\">Here’s the basic format:</p>\n      <pre><code class=\"language-csharp\">type variableName = value;</code></pre>\n      <p class=\"mb-4\">Example:</p>\n      <pre><code class=\"language-csharp\">int age = 21;\nstring name = \"Alex\";\nbool isDarkMode = true;</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔢 Common Data Types</h3>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li><code>int</code> – Whole numbers like <code>25</code>, <code>1000</code></li>\n        <li><code>double</code> – Decimal numbers like <code>3.14</code>, <code>99.99</code></li>\n        <li><code>string</code> – Text, like <code>\"Hello\"</code> or <code>\"IgKnight\"</code></li>\n        <li><code>bool</code> – True or false (like a light switch)</li>\n        <li><code>char</code> – A single character, like <code>'A'</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧠 Real-Life Analogy</h3>\n      <p class=\"mb-4\">Imagine making a profile page. You might store:</p>\n      <pre><code class=\"language-csharp\">string username = \"lightningDev\";\nint followers = 542;\nbool isVerified = true;</code></pre>\n\n      <p class=\"mb-4\">You’ve got a label for each piece of data. This keeps your code readable, organized, and easy to change later.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧪 var Keyword</h3>\n      <p class=\"mb-4\">Too lazy to write the type? C# lets you use <code>var</code> and figures it out automatically:</p>\n      <pre><code class=\"language-csharp\">var score = 99;        // C# knows this is an int\nvar nickname = \"Neo\";  // This becomes a string</code></pre>\n\n      <p class=\"mb-4\"><strong>Pro tip:</strong> Use <code>var</code> when the type is obvious. Otherwise, write the type clearly for readability.</p>\n    `,\n        proTip: 'Think of variables as containers with labels. Always choose clear names that describe what’s inside!',\n        codeSamples: [{\n          language: 'csharp',\n          code: `int level = 5;\nstring playerName = \"KnightMaster\";\nbool isOnline = true;\n\nConsole.WriteLine(playerName + \" is on level \" + level);`\n        }]\n      };\n    case 'csharp-conditions':\n      return {\n        slug: 'csharp-conditions',\n        title: 'Conditional Statements in C#',\n        content: `\n      <p class=\"mb-4\">Let’s say you're making a login screen, and you want to show “Welcome back!” only if the user enters the correct password. That’s where <strong>conditions</strong> come in — they help you make decisions in your code based on certain rules.</p>\n\n      <p class=\"mb-4\">In C#, conditional statements use logic like <code>if</code>, <code>else</code>, and <code>else if</code> to decide which code to run. Think of them like crossroads: your program chooses one path depending on what’s true.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">✅ Basic if Statement</h3>\n      <pre><code class=\"language-csharp\">int score = 90;\n\nif (score &gt;= 80)\n{\n  Console.WriteLine(\"You passed!\");\n}</code></pre>\n      <p class=\"mb-4\">If the condition inside the parentheses is true, the code block runs.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧭 if–else</h3>\n      <pre><code class=\"language-csharp\">bool isLoggedIn = false;\n\nif (isLoggedIn)\n{\n  Console.WriteLine(\"Welcome back!\");\n}\nelse\n{\n  Console.WriteLine(\"Please log in.\");\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🪜 else if</h3>\n      <p class=\"mb-4\">Need multiple paths? Use <code>else if</code> for more control:</p>\n      <pre><code class=\"language-csharp\">int temperature = 25;\n\nif (temperature &gt; 30)\n{\n  Console.WriteLine(\"It’s hot!\");\n}\nelse if (temperature &gt;= 20)\n{\n  Console.WriteLine(\"Nice weather.\");\n}\nelse\n{\n  Console.WriteLine(\"Grab a jacket!\");\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">⚖️ Comparison Operators</h3>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li><code>==</code> – is equal to</li>\n        <li><code>!=</code> – is not equal to</li>\n        <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> – greater/less than</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔗 Logical Operators</h3>\n      <ul class=\"list-disc list-inside mb-4\">\n        <li><code>&&</code> – AND (both must be true)</li>\n        <li><code>||</code> – OR (either one can be true)</li>\n        <li><code>!</code> – NOT (flips true/false)</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧠 Real-Life Example</h3>\n      <p class=\"mb-4\">Say you're checking if someone can access premium features:</p>\n      <pre><code class=\"language-csharp\">bool isSubscriber = true;\nbool hasTrial = false;\n\nif (isSubscriber || hasTrial)\n{\n  Console.WriteLine(\"Access granted ✅\");\n}\nelse\n{\n  Console.WriteLine(\"Upgrade to access this feature 🚫\");\n}</code></pre>\n    `,\n        proTip: \"Use clear, simple conditions. When logic gets complex, break it into smaller checks using helper variables or comments.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `int age = 16;\n\nif (age &gt;= 18)\n{\n  Console.WriteLine(\"You're eligible to vote.\");\n}\nelse\n{\n  Console.WriteLine(\"You must be 18 or older to vote.\");\n}`\n        }]\n      };\n    case 'csharp-loops':\n      return {\n        slug: 'csharp-loops',\n        title: 'Loops in C#',\n        content: `\n      <p class=\"mb-4\">Ever wanted to do something multiple times—like showing 10 questions in a quiz or checking every item in a shopping cart? That’s what loops are for! They let you repeat code without copy-pasting it a hundred times.</p>\n\n      <p class=\"mb-4\">In C#, you’ve got a few types of loops—each with a vibe of its own depending on the situation. Let’s walk through them.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 for Loop</h3>\n      <p class=\"mb-4\">Use this when you know how many times you want to repeat something.</p>\n      <pre><code class=\"language-csharp\">for (int i = 1; i &lt;= 5; i++)\n{\n  Console.WriteLine(\"Question \" + i);\n}</code></pre>\n      <p class=\"mb-4\">This loop prints “Question 1” to “Question 5”. Think of it like a countdown timer—you set where to start, where to stop, and how fast to count.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 while Loop</h3>\n      <p class=\"mb-4\">Use this when you don’t know how many times—just go until a condition becomes false.</p>\n      <pre><code class=\"language-csharp\">int score = 0;\n\nwhile (score &lt; 3)\n{\n  Console.WriteLine(\"Keep practicing!\");\n  score++;\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 do–while Loop</h3>\n      <p class=\"mb-4\">This one runs <em>at least once</em>, even if the condition is false right away.</p>\n      <pre><code class=\"language-csharp\">int attempts = 1;\n\ndo\n{\n  Console.WriteLine(\"Attempt \" + attempts);\n  attempts++;\n} while (attempts &lt;= 3);</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 foreach Loop</h3>\n      <p class=\"mb-4\">This one is a chill way to loop through all items in a collection (like a list of names).</p>\n      <pre><code class=\"language-csharp\">string[] languages = { \"C#\", \"Python\", \"JavaScript\" };\n\nforeach (string lang in languages)\n{\n  Console.WriteLine(\"Learning \" + lang);\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">💡 Real-Life Example</h3>\n      <p class=\"mb-4\">Imagine a leaderboard with 3 players. You can loop through and print them all:</p>\n      <pre><code class=\"language-csharp\">string[] players = { \"Alex\", \"Rhea\", \"Zed\" };\n\nfor (int i = 0; i &lt; players.Length; i++)\n{\n  Console.WriteLine((i + 1) + \". \" + players[i]);\n}</code></pre>\n\n      <p class=\"mb-4\">Or even better, with <code>foreach</code>:</p>\n      <pre><code class=\"language-csharp\">foreach (string player in players)\n{\n  Console.WriteLine(player);\n}</code></pre>\n    `,\n        proTip: 'Start with a for loop if you need index control, and foreach if you just want to visit every item. Avoid infinite loops by always updating your condition!',\n        codeSamples: [{\n          language: 'csharp',\n          code: `for (int i = 1; i &lt;= 3; i++)\n{\n  Console.WriteLine(\"Level \" + i);\n}\n\nstring[] tasks = { \"Eat\", \"Code\", \"Sleep\" };\nforeach (string task in tasks)\n{\n  Console.WriteLine(task);\n}`\n        }]\n      };\n    case 'csharp-methods':\n      return {\n        slug: 'csharp-methods',\n        title: 'Methods & Parameters in C#',\n        content: `\n      <p class=\"mb-4\">In C#, we use the word <strong>method</strong> instead of \"function\". A method is a block of code that lives inside a class — it performs a task, like calculating something, showing a message, or processing input.</p>\n\n      <p class=\"mb-4\">Think of a method like a skill your app can perform. If you're building a workout app, you might have methods like <code>StartWorkout()</code> or <code>CalculateCalories()</code>.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🛠 Basic Method Example</h3>\n      <pre><code class=\"language-csharp\">class Gym\n{\n  public void Welcome()\n  {\n    Console.WriteLine(\"Welcome to IgKnight Fitness!\");\n  }\n}</code></pre>\n\n      <p class=\"mb-4\">You call this method using an object:</p>\n      <pre><code class=\"language-csharp\">Gym g = new Gym();\ng.Welcome();</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📨 Method with Parameters</h3>\n      <p class=\"mb-4\">You can pass values into methods using parameters:</p>\n      <pre><code class=\"language-csharp\">public void ShowProgress(string name, int days)\n{\n  Console.WriteLine(name + \" has worked out for \" + days + \" days!\");\n}</code></pre>\n\n      <p class=\"mb-4\">Call it like this:</p>\n      <pre><code class=\"language-csharp\">g.ShowProgress(\"Aarav\", 30);</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🎯 Method That Returns a Value</h3>\n      <pre><code class=\"language-csharp\">public int Add(int a, int b)\n{\n  return a + b;\n}</code></pre>\n      <pre><code class=\"language-csharp\">int result = g.Add(5, 10);</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🌟 Real-World Example</h3>\n      <p class=\"mb-4\">Imagine a BMI calculator method:</p>\n      <pre><code class=\"language-csharp\">public double CalculateBMI(double weight, double height)\n{\n  return weight / (height * height);\n}</code></pre>\n\n      <pre><code class=\"language-csharp\">double bmi = g.CalculateBMI(72, 1.78);\nConsole.WriteLine(\"Your BMI is: \" + bmi);</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📌 Static vs Instance Methods</h3>\n      <p class=\"mb-4\"><code>static</code> methods belong to the class itself and don’t need an object:</p>\n      <pre><code class=\"language-csharp\">public static void SayHello()\n{\n  Console.WriteLine(\"Hello from IgKnight!\");\n}\n\n// Call like this:\nGym.SayHello();</code></pre>\n    `,\n        proTip: \"If you're writing a method that doesn’t need to access instance variables, consider making it static. It's easier to call and test!\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public class Calculator\n{\n  public int Multiply(int a, int b)\n  {\n    return a * b;\n  }\n\n  public void ShowResult(int result)\n  {\n    Console.WriteLine(\"Result: \" + result);\n  }\n}\n\n// Usage:\nCalculator calc = new Calculator();\nint result = calc.Multiply(4, 5);\ncalc.ShowResult(result);`\n        }]\n      };\n    case 'csharp-arrays-lists':\n      return {\n        slug: 'csharp-arrays-lists',\n        title: 'Arrays & Lists in C#',\n        content: `\n      <p class=\"mb-4\">In C#, <strong>arrays</strong> and <strong>lists</strong> are used to store collections of data — like names, scores, or even workout sets. Arrays are fixed in size. Lists are flexible and can grow or shrink. Think of arrays like a tray with 5 fixed compartments, and lists like a bag where you can toss more items in anytime.</p>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Arrays – Fixed-Size Containers</h3>\n      <p class=\"mb-4\">Use arrays when you know exactly how many items you need to store.</p>\n      <pre><code class=\"language-csharp\">// Array of exercises\nstring[] exercises = { \"Push-ups\", \"Squats\", \"Plank\" };\n\nConsole.WriteLine(exercises[1]); // Squats\n</code></pre>\n\n      <p class=\"mb-4\">Looping through an array:</p>\n      <pre><code class=\"language-csharp\">foreach (string exercise in exercises)\n{\n  Console.WriteLine(exercise);\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📋 Lists – Flexible & Dynamic</h3>\n      <p class=\"mb-4\">Lists are part of <code>System.Collections.Generic</code>. They’re like superpowered arrays that can grow as needed.</p>\n\n      <pre><code class=\"language-csharp\">using System.Collections.Generic;\n\nList&lt;string&gt; workoutPlan = new List&lt;string&gt;();\nworkoutPlan.Add(\"Jumping Jacks\");\nworkoutPlan.Add(\"Lunges\");\nworkoutPlan.Add(\"Burpees\");</code></pre>\n\n      <p class=\"mb-4\">Lists can be modified anytime:</p>\n      <pre><code class=\"language-csharp\">workoutPlan.Remove(\"Lunges\");\nConsole.WriteLine(workoutPlan.Count); // 2</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔍 Accessing List Items</h3>\n      <pre><code class=\"language-csharp\">Console.WriteLine(workoutPlan[0]); // Jumping Jacks</code></pre>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🛠 When to Use What?</h3>\n      <ul class=\"list-disc ml-6 mb-4\">\n        <li>✅ Use <strong>arrays</strong> when size is fixed (like days of the week).</li>\n        <li>✅ Use <strong>lists</strong> when you need to add/remove items frequently (like tasks or user input).</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🌟 Real-Life Example</h3>\n      <p class=\"mb-4\">You're tracking your meals throughout the day:</p>\n      <pre><code class=\"language-csharp\">List&lt;string&gt; meals = new List&lt;string&gt; { \"Breakfast\", \"Lunch\" };\nmeals.Add(\"Dinner\");\n\nforeach (string meal in meals)\n{\n  Console.WriteLine(\"Meal: \" + meal);\n}</code></pre>\n    `,\n        proTip: \"Use List<T> when working with APIs, databases, or any situation where the number of items isn't fixed.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `// Using arrays\nint[] scores = { 85, 90, 78 };\nConsole.WriteLine(scores[0]); // 85\n\n// Using lists\nList<string> students = new List<string>();\nstudents.Add(\"Raj\");\nstudents.Add(\"Simran\");\nstudents.Remove(\"Raj\");\n\nforeach (var student in students)\n{\n  Console.WriteLine(student);\n}`\n        }]\n      };\n    case 'csharp-strings':\n      return {\n        slug: 'csharp-strings',\n        title: 'Working with Strings',\n        content: `\n<p>Strings in C# are like the sentences we write in daily life — they hold text, from names and messages to entire paragraphs. In C#, a string is a sequence of characters enclosed in double quotes. For example:</p>\n\n<pre><code class=\"language-csharp\">string name = \"IgKnight\";</code></pre>\n\n<p>Strings are everywhere — printing messages, reading input, formatting outputs. Let’s understand them in a fun, practical way.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Declaring Strings</h2>\n<p>Declaring a string is super simple:</p>\n<pre><code class=\"language-csharp\">string message = \"Hello, world!\";</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. String Concatenation</h2>\n<p>You can join strings using the <code>+</code> operator:</p>\n<pre><code class=\"language-csharp\">string firstName = \"John\";\nstring lastName = \"Doe\";\nstring fullName = firstName + \" \" + lastName;</code></pre>\n<p><strong>Output:</strong> <code>John Doe</code></p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. String Interpolation (More Modern & Clean)</h2>\n<p>This is like smart string building — way cleaner than concatenation:</p>\n<pre><code class=\"language-csharp\">string name = \"Alice\";\nint age = 25;\nstring intro = $\"My name is {name} and I am {age} years old.\";</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Useful String Methods</h2>\n<p>C# provides powerful methods to work with strings:</p>\n<ul class=\"list-disc pl-6\">\n  <li><code>.Length</code> – Gets the number of characters</li>\n  <li><code>.ToUpper()</code> / <code>.ToLower()</code> – Changes casing</li>\n  <li><code>.Contains()</code> – Checks if a word is inside the string</li>\n  <li><code>.Replace()</code> – Replaces part of a string</li>\n  <li><code>.Substring()</code> – Extracts a part of a string</li>\n  <li><code>.Trim()</code> – Removes spaces at the start and end</li>\n</ul>\n\n<pre><code class=\"language-csharp\">string info = \"  Welcome to IgKnight!  \";\nConsole.WriteLine(info.Trim()); // \"Welcome to IgKnight!\"</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Escaping Characters</h2>\n<p>If you want to include special characters like quotes or new lines:</p>\n<pre><code class=\"language-csharp\">string quote = \"She said, \\\\\\\"Learn C# with IgKnight!\\\\\\\"\";</code></pre>\n\n<p>Or use <strong>verbati**m strings</strong> with <code>@</code> for multi-line or file paths:</p>\n<pre><code class=\"language-csharp\">string path = @\"C:\\\\Users\\\\John\\\\Documents\";\nstring multiLine = @\"Line 1\nLine 2\nLine 3\";</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Comparing Strings</h2>\n<pre><code class=\"language-csharp\">string a = \"hello\";\nstring b = \"HELLO\";\nbool isSame = a.Equals(b, StringComparison.OrdinalIgnoreCase);</code></pre>\n\n<p>That compares strings without caring about letter casing!</p>\n`,\n        proTip: \"Use string interpolation (the $ symbol) over concatenation — it makes your code cleaner and easier to read.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `string name = \"IgKnight\";\nstring greeting = $\"Welcome to {name}!\";\nConsole.WriteLine(greeting);`\n        }]\n      };\n    case 'csharp-classes-objects':\n      return {\n        slug: 'csharp-classes-objects',\n        title: 'Classes & Objects',\n        content: `\n<p>Classes and objects are the heart of C#. Think of a <strong>class</strong> as a blueprint, like the plan for a house. And an <strong>object</strong> is an actual house built using that plan.</p>\n\n<p>In real life, we don’t describe every car separately — we have a generic car design (class), and each car we see on the road is an object of that class. Same with code!</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Defining a Class</h2>\n<p>Let’s create a simple class called <code>Car</code>:</p>\n<pre><code class=\"language-csharp\">public class Car {\n  public string Brand;\n  public int Year;\n\n  public void Honk() {\n    Console.WriteLine(\"Beep beep!\");\n  }\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Creating Objects</h2>\n<p>Now let’s create a <code>Car</code> object using the class:</p>\n<pre><code class=\"language-csharp\">Car myCar = new Car();\nmyCar.Brand = \"Tesla\";\nmyCar.Year = 2024;\nmyCar.Honk();</code></pre>\n\n<p><strong>Output:</strong> <code>Beep beep!</code></p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Constructors (Auto setup)</h2>\n<p>A constructor helps set up the object with initial values when it's created:</p>\n<pre><code class=\"language-csharp\">public class Car {\n  public string Brand;\n  public int Year;\n\n  // Constructor\n  public Car(string brand, int year) {\n    Brand = brand;\n    Year = year;\n  }\n\n  public void Honk() {\n    Console.WriteLine(\"Beep from \" + Brand);\n  }\n}</code></pre>\n\n<pre><code class=\"language-csharp\">Car car1 = new Car(\"BMW\", 2023);\ncar1.Honk();</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Access Modifiers</h2>\n<ul class=\"list-disc pl-6\">\n  <li><code>public</code> – accessible from anywhere</li>\n  <li><code>private</code> – only inside the class</li>\n  <li><code>protected</code> – inside the class and subclasses</li>\n</ul>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Analogy</h2>\n<p>Imagine a <strong>Phone</strong> class. Every phone object might have a brand, model, and call() method. The class is the definition, and your actual iPhone or Samsung device is an object of that class.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Why Use Classes?</h2>\n<p>They help you:</p>\n<ul class=\"list-disc pl-6\">\n  <li>Organize code logically</li>\n  <li>Reuse structures (like models)</li>\n  <li>Group data and behavior</li>\n</ul>\n<p>Without classes, code becomes messy and hard to manage.</p>\n`,\n        proTip: \"Give each class one responsibility. Don’t make one class handle everything — split things into clean, simple blueprints.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public class Student {\n  public string Name;\n  public int Age;\n\n  public Student(string name, int age) {\n    Name = name;\n    Age = age;\n  }\n\n  public void Greet() {\n    Console.WriteLine($\"Hi, I'm {Name} and I'm {Age} years old.\");\n  }\n}`\n        }]\n      };\n    case 'csharp-inheritance':\n      return {\n        slug: 'csharp-inheritance',\n        title: 'Inheritance & Polymorphism',\n        content: `\n<p>Inheritance in C# lets one class \"inherit\" or reuse features (variables and methods) from another. It’s like getting a free set of tools from your parent class. 🔧</p>\n\n<p>Let’s say you have a general <code>Animal</code> class. A <code>Dog</code> or <code>Cat</code> class can inherit everything from <code>Animal</code> — like its ability to breathe or sleep — and add their own behavior, like bark or meow. 🐶🐱</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Basic Inheritance</h2>\n<p>We use <code>:</code> to inherit in C#:</p>\n\n<pre><code class=\"language-csharp\">public class Animal {\n  public void Eat() {\n    Console.WriteLine(\"Eating...\");\n  }\n}\n\npublic class Dog : Animal {\n  public void Bark() {\n    Console.WriteLine(\"Woof!\");\n  }\n}</code></pre>\n\n<pre><code class=\"language-csharp\">Dog myDog = new Dog();\nmyDog.Eat(); // Inherited from Animal\nmyDog.Bark();</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. The <code>base</code> Keyword</h2>\n<p>You can call the parent class's constructor or methods using <code>base</code>:</p>\n\n<pre><code class=\"language-csharp\">public class Animal {\n  public Animal() {\n    Console.WriteLine(\"Animal created\");\n  }\n}\n\npublic class Cat : Animal {\n  public Cat() : base() {\n    Console.WriteLine(\"Cat created\");\n  }\n}</code></pre>\n\n<p><strong>Output:</strong><br>Animal created<br>Cat created</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Method Overriding</h2>\n<p>Let’s say the base class has a method, but the child class wants to do it differently. Use <code>virtual</code> and <code>override</code>:</p>\n\n<pre><code class=\"language-csharp\">public class Animal {\n  public virtual void Speak() {\n    Console.WriteLine(\"Animal sound\");\n  }\n}\n\npublic class Dog : Animal {\n  public override void Speak() {\n    Console.WriteLine(\"Dog barks\");\n  }\n}</code></pre>\n\n<pre><code class=\"language-csharp\">Dog d = new Dog();\nd.Speak(); // Dog barks</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Polymorphism</h2>\n<p>Polymorphism = Many forms. A single method call can do different things depending on the object.</p>\n\n<pre><code class=\"language-csharp\">Animal pet = new Dog();\npet.Speak(); // Dog barks because override happens</code></pre>\n\n<p>Even though <code>pet</code> is typed as <code>Animal</code>, it behaves like a <code>Dog</code>. That’s the magic!</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\n<p>Imagine a base class <code>Employee</code> with a method <code>Work()</code>. A <code>Manager</code> class inherits from <code>Employee</code> but overrides <code>Work()</code> to “attend meetings” while a <code>Developer</code> might override it to “write code”.</p>\n`,\n        proTip: \"Use inheritance to avoid repeating code, but don’t overuse it — prefer composition when classes start becoming too dependent.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public class Animal {\n  public virtual void Speak() {\n    Console.WriteLine(\"Animal sound\");\n  }\n}\n\npublic class Dog : Animal {\n  public override void Speak() {\n    Console.WriteLine(\"Bark!\");\n  }\n}\n\nAnimal a = new Dog();\na.Speak(); // Bark!\n`\n        }]\n      };\n    case 'csharp-interfaces':\n      return {\n        slug: 'csharp-interfaces',\n        title: 'Interfaces & Abstraction',\n        content: `\n<p>Interfaces in C# are like contracts 📜. They say: \"If you implement me, you *must* provide these methods.\" But they don’t care *how* you implement them. This is great for making flexible and scalable code.</p>\n\n<p>Think of an interface like a remote control — it has buttons (methods), but the device (class) decides what happens when you press one. 📺</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Declaring an Interface</h2>\n<pre><code class=\"language-csharp\">public interface IAnimal {\n  void Speak();\n  void Move();\n}</code></pre>\n\n<p>Notice: no method bodies — just declarations.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Implementing an Interface</h2>\n<pre><code class=\"language-csharp\">public class Dog : IAnimal {\n  public void Speak() {\n    Console.WriteLine(\"Bark!\");\n  }\n\n  public void Move() {\n    Console.WriteLine(\"Dog runs\");\n  }\n}</code></pre>\n\n<p>Now <code>Dog</code> is *guaranteed* to have <code>Speak()</code> and <code>Move()</code>.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Interface as a Type</h2>\n<p>You can use the interface itself as a variable type:</p>\n\n<pre><code class=\"language-csharp\">IAnimal pet = new Dog();\npet.Speak(); // Bark!</code></pre>\n\n<p>This is super useful for abstraction — you can swap out implementations without changing much code.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Multiple Interfaces</h2>\n<p>C# doesn't support multiple inheritance with classes — but interfaces? Totally fine! 🎉</p>\n\n<pre><code class=\"language-csharp\">public interface IFlyable {\n  void Fly();\n}\n\npublic class Bird : IAnimal, IFlyable {\n  public void Speak() {\n    Console.WriteLine(\"Chirp\");\n  }\n\n  public void Move() {\n    Console.WriteLine(\"Hop\");\n  }\n\n  public void Fly() {\n    Console.WriteLine(\"Bird is flying\");\n  }\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\n<p>Imagine you're building a payment system. You could create a <code>IPaymentProcessor</code> interface and implement it differently for CreditCard, PayPal, UPI, etc. Your main code doesn’t care *how* it works — it just trusts that each method exists and works correctly.</p>\n`,\n        proTip: \"Interface names usually start with ‘I’ by convention (e.g., IAnimal, ILogger). It makes your code more readable and consistent.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public interface IShape {\n  double Area();\n}\n\npublic class Circle : IShape {\n  public double Radius { get; set; }\n  public double Area() => Math.PI * Radius * Radius;\n}\n\nIShape shape = new Circle { Radius = 5 };\nConsole.WriteLine(shape.Area());`\n        }]\n      };\n    case 'csharp-collections':\n      return {\n        slug: 'csharp-collections',\n        title: 'Collections & Dictionaries',\n        content: `\n<p>Collections in C# are like special containers 📦 — they let you store and organize multiple values in a more powerful way than plain arrays. Need a growing list of names? Or a phonebook-style key-value store? Collections have your back.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. List&lt;T&gt; – A Resizable Array</h2>\n<p>A <code>List&lt;T&gt;</code> is like a dynamic array. You can add, remove, sort — it’s your go-to for most use cases.</p>\n\n<pre><code class=\"language-csharp\">List&lt;string&gt; fruits = new List&lt;string&gt;();\nfruits.Add(\"Apple\");\nfruits.Add(\"Mango\");\nfruits.Remove(\"Apple\");\n\nforeach (var fruit in fruits)\n  Console.WriteLine(fruit);</code></pre>\n\n<p>You don’t have to worry about the size like in arrays — Lists grow as needed. 📈</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Dictionary&lt;K,V&gt; – Key-Value Pairs</h2>\n<p>Think of it like a mini-database where you look up values by a unique key, like a real-life dictionary. 🧠</p>\n\n<pre><code class=\"language-csharp\">Dictionary&lt;string, string&gt; capitals = new Dictionary&lt;string, string&gt;();\ncapitals[\"India\"] = \"New Delhi\";\ncapitals[\"Japan\"] = \"Tokyo\";\n\nConsole.WriteLine(capitals[\"India\"]); // New Delhi</code></pre>\n\n<p>Perfect for things like storing user IDs, configs, or mapping data.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. HashSet&lt;T&gt; – Unique Values Only</h2>\n<p>Need a collection with no duplicates? Use <code>HashSet&lt;T&gt;</code>:</p>\n\n<pre><code class=\"language-csharp\">HashSet&lt;int&gt; uniqueIds = new HashSet&lt;int&gt;();\nuniqueIds.Add(1);\nuniqueIds.Add(1); // Won’t be added again</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Queue &amp; Stack</h2>\n<p><strong>Queue</strong> works like a line at the coffee shop ☕ (First-In-First-Out).</p>\n<pre><code class=\"language-csharp\">Queue&lt;string&gt; orders = new Queue&lt;string&gt;();\norders.Enqueue(\"Order1\");\norders.Enqueue(\"Order2\");\n\nConsole.WriteLine(orders.Dequeue()); // Order1</code></pre>\n\n<p><strong>Stack</strong> is like a stack of plates 🍽️ (Last-In-First-Out).</p>\n<pre><code class=\"language-csharp\">Stack&lt;string&gt; pages = new Stack&lt;string&gt;();\npages.Push(\"Page1\");\npages.Push(\"Page2\");\n\nConsole.WriteLine(pages.Pop()); // Page2</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Tip</h2>\n<p>Use:</p>\n<ul class=\"list-disc ml-6\">\n  <li><code>List&lt;T&gt;</code> when order matters and items can repeat.</li>\n  <li><code>Dictionary&lt;K,V&gt;</code> when you need fast lookups with keys.</li>\n  <li><code>HashSet&lt;T&gt;</code> when duplicates are a problem.</li>\n  <li><code>Queue</code> for tasks in order, and <code>Stack</code> for undo/history features.</li>\n</ul>\n`,\n        proTip: \"All collection types are found in System.Collections.Generic. Always prefer the generic versions (like List<T>) over the old non-generic ones.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `Dictionary<string, int> scores = new Dictionary<string, int>();\nscores[\"Alice\"] = 85;\nscores[\"Bob\"] = 92;\n\nforeach (var kv in scores)\n  Console.WriteLine($\"{kv.Key}: {kv.Value}\");`\n        }]\n      };\n    case 'csharp-exceptions':\n      return {\n        slug: 'csharp-exceptions',\n        title: 'Exception Handling',\n        content: `\n<p>Exceptions are C#'s way of saying, \"Uh oh, something went wrong!\" 💥 They help you deal with unexpected situations — like dividing by zero or trying to read a file that doesn't exist — without crashing your program.</p>\n\n<p>Think of them as fire alarms 🚨. When triggered, they stop normal flow and let you handle the problem gracefully.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. try-catch Block</h2>\n<p>Here’s the basic structure:</p>\n\n<pre><code class=\"language-csharp\">try {\n  int x = 10;\n  int y = 0;\n  int result = x / y;\n} catch (DivideByZeroException ex) {\n  Console.WriteLine(\"You can't divide by zero!\");\n}</code></pre>\n\n<p><code>try</code> is where the risky code goes. <code>catch</code> is where you recover when things go wrong.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Multiple Catch Blocks</h2>\n<p>You can handle different types of exceptions separately:</p>\n\n<pre><code class=\"language-csharp\">try {\n  // risky stuff\n} catch (FormatException) {\n  Console.WriteLine(\"Invalid format\");\n} catch (NullReferenceException) {\n  Console.WriteLine(\"Something was null\");\n}</code></pre>\n\n<p>This is like having different solutions for different problems.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. finally Block</h2>\n<p><code>finally</code> runs no matter what — even if there’s no error.</p>\n\n<pre><code class=\"language-csharp\">try {\n  // do something\n} catch {\n  // handle error\n} finally {\n  Console.WriteLine(\"This always runs\");\n}</code></pre>\n\n<p>Use it for cleanup: closing files, releasing resources, etc.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Throwing Your Own Exception</h2>\n<p>You can raise (throw) exceptions too:</p>\n\n<pre><code class=\"language-csharp\">if (age &lt; 0) {\n  throw new ArgumentException(\"Age can't be negative\");\n}</code></pre>\n\n<p>This is useful when you're writing your own rules.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\n<p>Imagine you're building a login system. If a user enters an incorrect password or the database connection fails, exceptions help you show friendly error messages without showing the scary crash stack trace. 😊</p>\n`,\n        proTip: \"Don’t overuse exceptions for normal logic (like checking if a file exists). Use them for truly exceptional cases — not everyday decisions.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `try {\n  string input = Console.ReadLine();\n  int number = int.Parse(input);\n  Console.WriteLine($\"You entered {number}\");\n} catch (FormatException) {\n  Console.WriteLine(\"That wasn't a number!\");\n}`\n        }]\n      };\n    case 'csharp-linq':\n      return {\n        slug: 'csharp-linq',\n        title: 'LINQ Basics',\n        content: `\n<p><strong>LINQ</strong> (Language Integrated Query) lets you filter, sort, and transform data in C# like you're asking questions in plain English. 🧠 Think of it as SQL + C# had a baby. You can use LINQ on arrays, lists, dictionaries — anything that’s enumerable.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Why LINQ?</h2>\n<p>Say goodbye to loops and conditionals when you just want to find or shape data. LINQ gives you a clean, powerful way to work with collections.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Basic LINQ Query</h2>\n<p>Here’s a basic example of using LINQ to find even numbers:</p>\n\n<pre><code class=\"language-csharp\">List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6 };\n\nvar evens = numbers.Where(n =&gt; n % 2 == 0);\n\nforeach (var n in evens)\n  Console.WriteLine(n);</code></pre>\n\n<p><code>.Where()</code> filters the list, just like asking “Give me only even numbers”.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Other Useful LINQ Methods</h2>\n<ul class=\"list-disc ml-6\">\n  <li><code>Select()</code> – Projects each item into a new form.</li>\n  <li><code>OrderBy()</code> / <code>OrderByDescending()</code> – Sort items.</li>\n  <li><code>FirstOrDefault()</code> – Get first match or default value.</li>\n  <li><code>Count()</code>, <code>Sum()</code>, <code>Average()</code> – Aggregate data.</li>\n</ul>\n\n<pre><code class=\"language-csharp\">var names = new List&lt;string&gt; { \"Alice\", \"Bob\", \"Charlie\" };\n\nvar nameLengths = names.Select(name =&gt; name.Length);\nvar sorted = names.OrderBy(name =&gt; name);\n\nConsole.WriteLine(nameLengths.Sum());</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. LINQ Query Syntax</h2>\n<p>You can also write LINQ like SQL:</p>\n\n<pre><code class=\"language-csharp\">var longNames = from name in names\n                where name.Length &gt; 3\n                select name;</code></pre>\n\n<p>This is called <strong>query syntax</strong>. You can use whichever style you prefer!</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\n<p>Imagine you're building a course dashboard. You could use LINQ to:</p>\n<ul class=\"list-disc ml-6\">\n  <li>Find all completed courses</li>\n  <li>Sort them by score</li>\n  <li>Get the top 3</li>\n</ul>\n\n<pre><code class=\"language-csharp\">var topCourses = courses\n  .Where(c =&gt; c.IsCompleted)\n  .OrderByDescending(c =&gt; c.Score)\n  .Take(3);</code></pre>\n\n<p>That’s clean, powerful, and readable — all thanks to LINQ! ✨</p>\n`,\n        proTip: \"You need <code>using System.Linq;</code> to use LINQ methods. Always prefer LINQ over manual loops when working with data—it’s more expressive and less error-prone.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `List<string> fruits = new List<string> { \"Apple\", \"Mango\", \"Banana\", \"Orange\" };\n\nvar filtered = fruits\n  .Where(f => f.Length > 5)\n  .OrderBy(f => f);\n\nforeach (var fruit in filtered)\n  Console.WriteLine(fruit);`\n        }]\n      };\n    case 'csharp-files':\n      return {\n        slug: 'csharp-files',\n        title: 'File Handling',\n        content: `\n<p>File handling in C# is like teaching your app to read and write journals 📓. Whether you want to save user notes, log errors, or store game scores — you’ll often need to deal with files.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Writing to a File</h2>\n<p><code>File.WriteAllText()</code> is the easiest way to write text to a file:</p>\n\n<pre><code class=\"language-csharp\">string path = \"log.txt\";\nFile.WriteAllText(path, \"IgKnight launch successful! 🚀\");</code></pre>\n\n<p>This will create the file if it doesn’t exist or overwrite it if it does.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Appending to a File</h2>\n<p>Want to add more info without deleting the old stuff?</p>\n\n<pre><code class=\"language-csharp\">File.AppendAllText(path, \"\\\\nMore logs coming in...\");</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Reading from a File</h2>\n<p>To read the whole file content at once:</p>\n\n<pre><code class=\"language-csharp\">string content = File.ReadAllText(path);\nConsole.WriteLine(content);</code></pre>\n\n<p>This is perfect for small to medium files.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Reading Line by Line</h2>\n<p>For large files, line-by-line reading is safer:</p>\n\n<pre><code class=\"language-csharp\">foreach (string line in File.ReadLines(path)) {\n  Console.WriteLine(line);\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. File Exists Check</h2>\n<p>Before reading or writing, it’s good to check if the file exists:</p>\n\n<pre><code class=\"language-csharp\">if (File.Exists(path)) {\n  Console.WriteLine(\"File is there!\");\n} else {\n  Console.WriteLine(\"No file yet!\");\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Real-Life Example</h2>\n<p>Imagine you're building a note-taking app. You could:</p>\n<ul class=\"list-disc ml-6\">\n  <li>Save each note in a separate .txt file</li>\n  <li>Read them back when the user reopens the app</li>\n  <li>Append new ideas without overwriting</li>\n</ul>\n\n<p>File handling lets your app remember things between sessions — kind of like a memory card for your logic. 💾</p>\n`,\n        proTip: \"Always handle exceptions like <code>FileNotFoundException</code> or <code>IOException</code> when working with files — things can go wrong (e.g. missing file, permission issues).\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `string path = \"notes.txt\";\n\nif (!File.Exists(path)) {\n  File.WriteAllText(path, \"First note!\");\n} else {\n  File.AppendAllText(path, \"\\\\nAnother thought...\");\n}\n\nstring content = File.ReadAllText(path);\nConsole.WriteLine(\"Current notes: \" + content);`\n        }]\n      };\n    case 'csharp-async':\n      return {\n        slug: 'csharp-async',\n        title: 'Asynchronous Programming',\n        content: `\n<p>Async programming in C# lets your app do more than one thing at a time — like a multitasker with superpowers 🦸. It’s how you keep your app smooth and responsive even while doing heavy work like downloading files or accessing APIs.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Why Async?</h2>\n<p>Imagine you tap a “Download” button in an app, and everything freezes until it's done 😩. That’s what happens without async. With async, the download happens in the background and your app stays usable.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. The Magic Words: <code>async</code> & <code>await</code></h2>\n<p>Just add <code>async</code> to your method and use <code>await</code> on any long-running task:</p>\n\n<pre><code class=\"language-csharp\">public async Task FetchDataAsync() {\n  Console.WriteLine(\"Fetching data...\");\n  string data = await File.ReadAllTextAsync(\"data.txt\");\n  Console.WriteLine(\"Data: \" + data);\n}</code></pre>\n\n<p><code>await</code> tells C# to “pause here and come back when ready” – but without blocking the whole app!</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Common Async Methods</h2>\n<ul class=\"list-disc ml-6\">\n  <li><code>HttpClient.GetStringAsync()</code> – for web requests</li>\n  <li><code>File.ReadAllTextAsync()</code> – for reading files</li>\n  <li><code>Task.Delay()</code> – to simulate waiting</li>\n</ul>\n\n<pre><code class=\"language-csharp\">await Task.Delay(2000); // Waits 2 seconds without freezing the app</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Calling Async Methods</h2>\n<p>You can only use <code>await</code> inside an <code>async</code> method. If you're in <code>Main()</code>, use:</p>\n\n<pre><code class=\"language-csharp\">await FetchDataAsync(); // if inside another async method</code></pre>\n\n<p>For console apps using <code>Main</code> as async (C# 7.1+):</p>\n\n<pre><code class=\"language-csharp\">static async Task Main(string[] args) {\n  await FetchDataAsync();\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\n<p>Imagine you're building a learning app like IgKnight. When loading a user's progress or fetching quiz questions from an API, you’d use async to keep the UI buttery smooth 🍰.</p>\n\n<pre><code class=\"language-csharp\">HttpClient client = new HttpClient();\nstring response = await client.GetStringAsync(\"https://api.ignight.io/quiz\");\nConsole.WriteLine(\"Quiz data: \" + response);</code></pre>\n\n<p>No lag. No freezing. Just fast, modern UX 💡.</p>\n`,\n        proTip: \"Avoid <code>.Result</code> or <code>.Wait()</code> on async methods — they block the thread and can cause deadlocks. Always <code>await</code> properly inside an <code>async</code> method.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public async Task LoadDashboardAsync() {\n  Console.WriteLine(\"Loading...\");\n  await Task.Delay(1500); // Simulate loading\n  Console.WriteLine(\"Dashboard Ready ✅\");\n}`\n        }]\n      };\n    case 'csharp-advanced':\n      return {\n        slug: 'csharp-advanced',\n        title: 'Advanced C# Tips',\n        content: `\n<p>By now, you know your way around classes, loops, and methods. Let’s step it up 🔥. These advanced C# features make your code cleaner, faster, and smarter — like hidden power-ups in a game 🎮.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Lambda Expressions</h2>\n<p>Lambdas are super short, inline functions. Great for filtering, mapping, and callbacks:</p>\n\n<pre><code class=\"language-csharp\">List&lt;int&gt; nums = new List&lt;int&gt; { 1, 2, 3, 4 };\nvar evens = nums.Where(n => n % 2 == 0);</code></pre>\n\n<p><code>n => n % 2 == 0</code> is a lambda. Think of it as a mini one-line method.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Null-Coalescing Operator (??)</h2>\n<p>This returns a fallback if the value is <code>null</code>:</p>\n\n<pre><code class=\"language-csharp\">string name = userName ?? \"Guest\";</code></pre>\n\n<p>If <code>userName</code> is null, <code>name</code> becomes \"Guest\". Handy for defaults!</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Ternary Operator</h2>\n<p>Quick <code>if-else</code> for assignments:</p>\n\n<pre><code class=\"language-csharp\">string role = isAdmin ? \"Admin\" : \"User\";</code></pre>\n\n<p>Reads like: “If <code>isAdmin</code>, set role to Admin, otherwise User.”</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Tuples</h2>\n<p>Need to return multiple values from a method? Use a tuple!</p>\n\n<pre><code class=\"language-csharp\">(string name, int score) GetPlayer() {\n  return (\"Jay\", 95);\n}</code></pre>\n\n<p>You can access them like <code>player.name</code> and <code>player.score</code>. It's like a quick custom class.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Expression-bodied Members</h2>\n<p>For short methods or properties, skip the braces:</p>\n\n<pre><code class=\"language-csharp\">public int Square(int x) => x * x;</code></pre>\n\n<p>Clean and sharp. Perfect for one-liners.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Pattern Matching</h2>\n<p>Like switch statements on steroids 💪:</p>\n\n<pre><code class=\"language-csharp\">object data = 42;\nif (data is int number) {\n  Console.WriteLine($\"It's a number: {number}\");\n}</code></pre>\n\n<p>This checks and assigns in one go.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">7. Records (C# 9+)</h2>\n<p>Need a quick data class with built-in equality and immutability?</p>\n\n<pre><code class=\"language-csharp\">public record User(string Name, int Age);</code></pre>\n\n<p>No need to write constructors, getters, or equality logic. Great for clean models in APIs.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">Real-Life Use</h2>\n<p>In a learning platform like IgKnight, advanced features help with:</p>\n<ul class=\"list-disc ml-6\">\n  <li>Filtering course lists with lambdas</li>\n  <li>Sending multiple return values using tuples</li>\n  <li>Creating clean, testable models with records</li>\n</ul>\n`,\n        proTip: \"Don’t overuse every fancy feature. Use what improves clarity. Simpler is often better — write code your future self will thank you for.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public record Course(string Title, int Duration);\n\nvar courses = new List<Course> {\n  new(\"C#\", 5),\n  new(\"JavaScript\", 4)\n};\n\nvar shortCourses = courses.Where(c => c.Duration < 5);\nshortCourses.ToList().ForEach(c => Console.WriteLine(c.Title));`\n        }]\n      };\n    case 'csharp-best-practices':\n      return {\n        slug: 'csharp-best-practices',\n        title: 'Best Practices',\n        content: `\n<p>You've learned the tools — now it's time to code like a pro 💼. These C# best practices help you write cleaner, safer, and more maintainable code, whether you're building an app, API, or part of a big team.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Use Meaningful Names</h2>\n<p>Always name your variables, methods, and classes clearly. Avoid vague names like <code>temp</code> or <code>data</code>:</p>\n\n<pre><code class=\"language-csharp\">// ❌ Bad\nint d = 100;\n\n// ✅ Good\nint downloadLimitInMB = 100;</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Keep Methods Short</h2>\n<p>Each method should do one thing — and do it well. If it's getting long, split it into helper methods.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Use Access Modifiers</h2>\n<p>Mark things <code>private</code>, <code>protected</code>, or <code>public</code> explicitly. This avoids accidental usage and improves security.</p>\n\n<pre><code class=\"language-csharp\">private int score;\npublic void UpdateScore(int newScore) { ... }</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Prefer <code>var</code> When the Type is Obvious</h2>\n<p><code>var</code> makes code less noisy, but don’t overuse it for unclear types.</p>\n\n<pre><code class=\"language-csharp\">var user = new User();       // ✅ Clear\nvar x = DoSomethingWeird(); // ❌ What is x?</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Avoid Hardcoding Values</h2>\n<p>Don’t sprinkle magic numbers or strings everywhere. Use constants or config files.</p>\n\n<pre><code class=\"language-csharp\">// ❌ Bad\nif (score > 90) { ... }\n\n// ✅ Good\nconst int HighScoreThreshold = 90;\nif (score > HighScoreThreshold) { ... }</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Catch Specific Exceptions</h2>\n<p>Avoid generic <code>catch (Exception)</code> unless you're logging or rethrowing:</p>\n\n<pre><code class=\"language-csharp\">try {\n  File.ReadAllText(\"data.txt\");\n} catch (FileNotFoundException ex) {\n  Console.WriteLine(\"File missing!\");\n}</code></pre>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">7. Use Async for I/O Operations</h2>\n<p>Reading files, hitting APIs, or accessing databases? Use <code>async/await</code> to keep your app smooth.</p>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">8. Follow SOLID Principles (Advanced)</h2>\n<p>As you grow, learn SOLID — five design principles that lead to great OOP architecture.</p>\n<ul class=\"list-disc ml-6\">\n  <li><strong>S</strong>: Single Responsibility</li>\n  <li><strong>O</strong>: Open/Closed</li>\n  <li><strong>L</strong>: Liskov Substitution</li>\n  <li><strong>I</strong>: Interface Segregation</li>\n  <li><strong>D</strong>: Dependency Inversion</li>\n</ul>\n\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">Real-Life Tip</h2>\n<p>In a platform like IgKnight, writing clean, consistent code means fewer bugs and faster teamwork. Best practices aren’t just for interviews — they’re for scalable apps.</p>\n`,\n        proTip: \"Always write code like someone else will read it — because future you is that someone.\",\n        codeSamples: [{\n          language: 'csharp',\n          code: `public class QuizService {\n  private const int MaxRetries = 3;\n\n  public async Task<string> GetQuizAsync() {\n    try {\n      return await File.ReadAllTextAsync(\"quiz.json\");\n    } catch (FileNotFoundException) {\n      return \"No quiz available.\";\n    }\n  }\n}`\n        }]\n      };\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["CSharpTopics","id","title","slug","CSharpTopicsContent","content","proTip","codeSamples","language","code","undefined"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\data\\csharp\\topics-data.ts"],"sourcesContent":["import { Topic, TopicContent } from \"../../../../models/topic.model\";\r\n\r\nexport const CSharpTopics: Topic[] = [\r\n  { id: 'csharp-introduction', title: 'Introduction to C#', slug: 'csharp-introduction' },\r\n  { id: 'csharp-variables', title: 'Variables & Data Types', slug: 'csharp-variables' },\r\n  { id: 'csharp-conditions', title: 'Conditional Statements', slug: 'csharp-conditions' },\r\n  { id: 'csharp-loops', title: 'Loops in C#', slug: 'csharp-loops' },\r\n  { id: 'csharp-methods', title: 'Methods & Parameters', slug: 'csharp-methods' },\r\n  { id: 'csharp-arrays-lists', title: 'Arrays & Lists', slug: 'csharp-arrays-lists' },\r\n  { id: 'csharp-strings', title: 'Working with Strings', slug: 'csharp-strings' },\r\n  { id: 'csharp-classes-objects', title: 'Classes & Objects', slug: 'csharp-classes-objects' },\r\n  { id: 'csharp-inheritance', title: 'Inheritance & Polymorphism', slug: 'csharp-inheritance' },\r\n  { id: 'csharp-interfaces', title: 'Interfaces & Abstraction', slug: 'csharp-interfaces' },\r\n  { id: 'csharp-collections', title: 'Collections & Dictionaries', slug: 'csharp-collections' },\r\n  { id: 'csharp-exceptions', title: 'Exception Handling', slug: 'csharp-exceptions' },\r\n  { id: 'csharp-linq', title: 'LINQ Basics', slug: 'csharp-linq' },\r\n  { id: 'csharp-files', title: 'File Handling', slug: 'csharp-files' },\r\n  { id: 'csharp-async', title: 'Asynchronous Programming', slug: 'csharp-async' },\r\n  { id: 'csharp-advanced', title: 'Advanced C# Tips', slug: 'csharp-advanced' },\r\n  { id: 'csharp-best-practices', title: 'Best Practices', slug: 'csharp-best-practices' }\r\n];\r\n\r\nexport function CSharpTopicsContent(slug: string): TopicContent | undefined {\r\n  switch (slug) \r\n    {\r\n    case 'csharp-introduction':\r\n  return {\r\n    slug: 'csharp-introduction',\r\n    title: 'Introduction to C#',\r\n    content: `\r\n      <p class=\"mb-4\">Let’s say you’ve built cool stuff in HTML or JavaScript, and now you're wondering: <strong>“What’s C# and why should I care?”</strong><br/>\r\n      Think of C# as your all-in-one power tool 🔧. You can build web apps, desktop tools, games (yep, even Unity ones), or automate stuff — all with one solid language.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🎯 So What <em>Is</em> C#?</h3>\r\n      <p class=\"mb-4\">C# (pronounced “C-sharp”) is a modern, powerful programming language developed by Microsoft. It’s part of the .NET ecosystem and is used for almost everything — from building full-stack web apps to developing games and automating daily tasks.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Real-Life Use Cases</h3>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li>🎮 Want to build a game? Unity uses C#.</li>\r\n        <li>🖥️ Need a Windows desktop app? C# + WPF or WinForms.</li>\r\n        <li>🌐 Web apps? ASP.NET Core is built on C#.</li>\r\n        <li>🤖 Automate daily tasks? C# scripts make it clean and efficient.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">👋 Your First C# Program</h3>\r\n      <p class=\"mb-4\">Let’s write the classic “Hello World” in C#:</p>\r\n\r\n      <pre><code class=\"language-csharp\">// Your first C# program\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello, IgKnight! 👋\");\r\n    }\r\n}</code></pre>\r\n\r\n      <p class=\"mb-4\">Here’s what each line means, explained like a buddy:</p>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li><code>using System;</code> — gives you access to built-in features like <code>Console</code>.</li>\r\n        <li><code>class Program</code> — you’re defining a class (like a blueprint or container).</li>\r\n        <li><code>Main()</code> — this is where your code starts running.</li>\r\n        <li><code>Console.WriteLine()</code> — prints text to the screen.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🚀 Why Developers Love C#</h3>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li>✅ Clean and readable syntax</li>\r\n        <li>⚡ Fast with modern .NET Core</li>\r\n        <li>🧰 Massive libraries and tools</li>\r\n        <li>🛡️ Strong typing helps avoid bugs</li>\r\n      </ul>\r\n\r\n      <p class=\"mb-4\">Whether you're building the next Instagram or automating reports at work, C# can be your best dev buddy.</p>\r\n    `,\r\n    proTip: 'C# is a one-language powerhouse: Build APIs, automate stuff, or even make games — all in one ecosystem!',\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `// Your first friendly C# program\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Welcome to the C# universe 🚀\");\r\n    }\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-variables':\r\n  return {\r\n    slug: 'csharp-variables',\r\n    title: 'Variables & Data Types in C#',\r\n    content: `\r\n      <p class=\"mb-4\">Let’s say you're building a game or a web app, and you need to store things like a player’s score, username, or whether dark mode is on. That’s where <strong>variables</strong> come in!</p>\r\n\r\n      <p class=\"mb-4\">In C#, variables are like labeled boxes 🧃— you put data inside, give it a type, and reuse it when needed. The language is <strong>statically typed</strong>, which means every variable must have a type (like <code>int</code> or <code>string</code>).</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Declaring a Variable</h3>\r\n      <p class=\"mb-4\">Here’s the basic format:</p>\r\n      <pre><code class=\"language-csharp\">type variableName = value;</code></pre>\r\n      <p class=\"mb-4\">Example:</p>\r\n      <pre><code class=\"language-csharp\">int age = 21;\r\nstring name = \"Alex\";\r\nbool isDarkMode = true;</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔢 Common Data Types</h3>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li><code>int</code> – Whole numbers like <code>25</code>, <code>1000</code></li>\r\n        <li><code>double</code> – Decimal numbers like <code>3.14</code>, <code>99.99</code></li>\r\n        <li><code>string</code> – Text, like <code>\"Hello\"</code> or <code>\"IgKnight\"</code></li>\r\n        <li><code>bool</code> – True or false (like a light switch)</li>\r\n        <li><code>char</code> – A single character, like <code>'A'</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧠 Real-Life Analogy</h3>\r\n      <p class=\"mb-4\">Imagine making a profile page. You might store:</p>\r\n      <pre><code class=\"language-csharp\">string username = \"lightningDev\";\r\nint followers = 542;\r\nbool isVerified = true;</code></pre>\r\n\r\n      <p class=\"mb-4\">You’ve got a label for each piece of data. This keeps your code readable, organized, and easy to change later.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧪 var Keyword</h3>\r\n      <p class=\"mb-4\">Too lazy to write the type? C# lets you use <code>var</code> and figures it out automatically:</p>\r\n      <pre><code class=\"language-csharp\">var score = 99;        // C# knows this is an int\r\nvar nickname = \"Neo\";  // This becomes a string</code></pre>\r\n\r\n      <p class=\"mb-4\"><strong>Pro tip:</strong> Use <code>var</code> when the type is obvious. Otherwise, write the type clearly for readability.</p>\r\n    `,\r\n    proTip: 'Think of variables as containers with labels. Always choose clear names that describe what’s inside!',\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `int level = 5;\r\nstring playerName = \"KnightMaster\";\r\nbool isOnline = true;\r\n\r\nConsole.WriteLine(playerName + \" is on level \" + level);`\r\n      }\r\n    ]\r\n  };\r\n    case 'csharp-conditions':\r\n  return {\r\n    slug: 'csharp-conditions',\r\n    title: 'Conditional Statements in C#',\r\n    content: `\r\n      <p class=\"mb-4\">Let’s say you're making a login screen, and you want to show “Welcome back!” only if the user enters the correct password. That’s where <strong>conditions</strong> come in — they help you make decisions in your code based on certain rules.</p>\r\n\r\n      <p class=\"mb-4\">In C#, conditional statements use logic like <code>if</code>, <code>else</code>, and <code>else if</code> to decide which code to run. Think of them like crossroads: your program chooses one path depending on what’s true.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">✅ Basic if Statement</h3>\r\n      <pre><code class=\"language-csharp\">int score = 90;\r\n\r\nif (score &gt;= 80)\r\n{\r\n  Console.WriteLine(\"You passed!\");\r\n}</code></pre>\r\n      <p class=\"mb-4\">If the condition inside the parentheses is true, the code block runs.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧭 if–else</h3>\r\n      <pre><code class=\"language-csharp\">bool isLoggedIn = false;\r\n\r\nif (isLoggedIn)\r\n{\r\n  Console.WriteLine(\"Welcome back!\");\r\n}\r\nelse\r\n{\r\n  Console.WriteLine(\"Please log in.\");\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🪜 else if</h3>\r\n      <p class=\"mb-4\">Need multiple paths? Use <code>else if</code> for more control:</p>\r\n      <pre><code class=\"language-csharp\">int temperature = 25;\r\n\r\nif (temperature &gt; 30)\r\n{\r\n  Console.WriteLine(\"It’s hot!\");\r\n}\r\nelse if (temperature &gt;= 20)\r\n{\r\n  Console.WriteLine(\"Nice weather.\");\r\n}\r\nelse\r\n{\r\n  Console.WriteLine(\"Grab a jacket!\");\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">⚖️ Comparison Operators</h3>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li><code>==</code> – is equal to</li>\r\n        <li><code>!=</code> – is not equal to</li>\r\n        <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> – greater/less than</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔗 Logical Operators</h3>\r\n      <ul class=\"list-disc list-inside mb-4\">\r\n        <li><code>&&</code> – AND (both must be true)</li>\r\n        <li><code>||</code> – OR (either one can be true)</li>\r\n        <li><code>!</code> – NOT (flips true/false)</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🧠 Real-Life Example</h3>\r\n      <p class=\"mb-4\">Say you're checking if someone can access premium features:</p>\r\n      <pre><code class=\"language-csharp\">bool isSubscriber = true;\r\nbool hasTrial = false;\r\n\r\nif (isSubscriber || hasTrial)\r\n{\r\n  Console.WriteLine(\"Access granted ✅\");\r\n}\r\nelse\r\n{\r\n  Console.WriteLine(\"Upgrade to access this feature 🚫\");\r\n}</code></pre>\r\n    `,\r\n    proTip: \"Use clear, simple conditions. When logic gets complex, break it into smaller checks using helper variables or comments.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `int age = 16;\r\n\r\nif (age &gt;= 18)\r\n{\r\n  Console.WriteLine(\"You're eligible to vote.\");\r\n}\r\nelse\r\n{\r\n  Console.WriteLine(\"You must be 18 or older to vote.\");\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-loops':\r\n  return {\r\n    slug: 'csharp-loops',\r\n    title: 'Loops in C#',\r\n    content: `\r\n      <p class=\"mb-4\">Ever wanted to do something multiple times—like showing 10 questions in a quiz or checking every item in a shopping cart? That’s what loops are for! They let you repeat code without copy-pasting it a hundred times.</p>\r\n\r\n      <p class=\"mb-4\">In C#, you’ve got a few types of loops—each with a vibe of its own depending on the situation. Let’s walk through them.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 for Loop</h3>\r\n      <p class=\"mb-4\">Use this when you know how many times you want to repeat something.</p>\r\n      <pre><code class=\"language-csharp\">for (int i = 1; i &lt;= 5; i++)\r\n{\r\n  Console.WriteLine(\"Question \" + i);\r\n}</code></pre>\r\n      <p class=\"mb-4\">This loop prints “Question 1” to “Question 5”. Think of it like a countdown timer—you set where to start, where to stop, and how fast to count.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 while Loop</h3>\r\n      <p class=\"mb-4\">Use this when you don’t know how many times—just go until a condition becomes false.</p>\r\n      <pre><code class=\"language-csharp\">int score = 0;\r\n\r\nwhile (score &lt; 3)\r\n{\r\n  Console.WriteLine(\"Keep practicing!\");\r\n  score++;\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 do–while Loop</h3>\r\n      <p class=\"mb-4\">This one runs <em>at least once</em>, even if the condition is false right away.</p>\r\n      <pre><code class=\"language-csharp\">int attempts = 1;\r\n\r\ndo\r\n{\r\n  Console.WriteLine(\"Attempt \" + attempts);\r\n  attempts++;\r\n} while (attempts &lt;= 3);</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔁 foreach Loop</h3>\r\n      <p class=\"mb-4\">This one is a chill way to loop through all items in a collection (like a list of names).</p>\r\n      <pre><code class=\"language-csharp\">string[] languages = { \"C#\", \"Python\", \"JavaScript\" };\r\n\r\nforeach (string lang in languages)\r\n{\r\n  Console.WriteLine(\"Learning \" + lang);\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">💡 Real-Life Example</h3>\r\n      <p class=\"mb-4\">Imagine a leaderboard with 3 players. You can loop through and print them all:</p>\r\n      <pre><code class=\"language-csharp\">string[] players = { \"Alex\", \"Rhea\", \"Zed\" };\r\n\r\nfor (int i = 0; i &lt; players.Length; i++)\r\n{\r\n  Console.WriteLine((i + 1) + \". \" + players[i]);\r\n}</code></pre>\r\n\r\n      <p class=\"mb-4\">Or even better, with <code>foreach</code>:</p>\r\n      <pre><code class=\"language-csharp\">foreach (string player in players)\r\n{\r\n  Console.WriteLine(player);\r\n}</code></pre>\r\n    `,\r\n    proTip: 'Start with a for loop if you need index control, and foreach if you just want to visit every item. Avoid infinite loops by always updating your condition!',\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `for (int i = 1; i &lt;= 3; i++)\r\n{\r\n  Console.WriteLine(\"Level \" + i);\r\n}\r\n\r\nstring[] tasks = { \"Eat\", \"Code\", \"Sleep\" };\r\nforeach (string task in tasks)\r\n{\r\n  Console.WriteLine(task);\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-methods':\r\n  return {\r\n    slug: 'csharp-methods',\r\n    title: 'Methods & Parameters in C#',\r\n    content: `\r\n      <p class=\"mb-4\">In C#, we use the word <strong>method</strong> instead of \"function\". A method is a block of code that lives inside a class — it performs a task, like calculating something, showing a message, or processing input.</p>\r\n\r\n      <p class=\"mb-4\">Think of a method like a skill your app can perform. If you're building a workout app, you might have methods like <code>StartWorkout()</code> or <code>CalculateCalories()</code>.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🛠 Basic Method Example</h3>\r\n      <pre><code class=\"language-csharp\">class Gym\r\n{\r\n  public void Welcome()\r\n  {\r\n    Console.WriteLine(\"Welcome to IgKnight Fitness!\");\r\n  }\r\n}</code></pre>\r\n\r\n      <p class=\"mb-4\">You call this method using an object:</p>\r\n      <pre><code class=\"language-csharp\">Gym g = new Gym();\r\ng.Welcome();</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📨 Method with Parameters</h3>\r\n      <p class=\"mb-4\">You can pass values into methods using parameters:</p>\r\n      <pre><code class=\"language-csharp\">public void ShowProgress(string name, int days)\r\n{\r\n  Console.WriteLine(name + \" has worked out for \" + days + \" days!\");\r\n}</code></pre>\r\n\r\n      <p class=\"mb-4\">Call it like this:</p>\r\n      <pre><code class=\"language-csharp\">g.ShowProgress(\"Aarav\", 30);</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🎯 Method That Returns a Value</h3>\r\n      <pre><code class=\"language-csharp\">public int Add(int a, int b)\r\n{\r\n  return a + b;\r\n}</code></pre>\r\n      <pre><code class=\"language-csharp\">int result = g.Add(5, 10);</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🌟 Real-World Example</h3>\r\n      <p class=\"mb-4\">Imagine a BMI calculator method:</p>\r\n      <pre><code class=\"language-csharp\">public double CalculateBMI(double weight, double height)\r\n{\r\n  return weight / (height * height);\r\n}</code></pre>\r\n\r\n      <pre><code class=\"language-csharp\">double bmi = g.CalculateBMI(72, 1.78);\r\nConsole.WriteLine(\"Your BMI is: \" + bmi);</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📌 Static vs Instance Methods</h3>\r\n      <p class=\"mb-4\"><code>static</code> methods belong to the class itself and don’t need an object:</p>\r\n      <pre><code class=\"language-csharp\">public static void SayHello()\r\n{\r\n  Console.WriteLine(\"Hello from IgKnight!\");\r\n}\r\n\r\n// Call like this:\r\nGym.SayHello();</code></pre>\r\n    `,\r\n    proTip: \"If you're writing a method that doesn’t need to access instance variables, consider making it static. It's easier to call and test!\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public class Calculator\r\n{\r\n  public int Multiply(int a, int b)\r\n  {\r\n    return a * b;\r\n  }\r\n\r\n  public void ShowResult(int result)\r\n  {\r\n    Console.WriteLine(\"Result: \" + result);\r\n  }\r\n}\r\n\r\n// Usage:\r\nCalculator calc = new Calculator();\r\nint result = calc.Multiply(4, 5);\r\ncalc.ShowResult(result);`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-arrays-lists':\r\n  return {\r\n    slug: 'csharp-arrays-lists',\r\n    title: 'Arrays & Lists in C#',\r\n    content: `\r\n      <p class=\"mb-4\">In C#, <strong>arrays</strong> and <strong>lists</strong> are used to store collections of data — like names, scores, or even workout sets. Arrays are fixed in size. Lists are flexible and can grow or shrink. Think of arrays like a tray with 5 fixed compartments, and lists like a bag where you can toss more items in anytime.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📦 Arrays – Fixed-Size Containers</h3>\r\n      <p class=\"mb-4\">Use arrays when you know exactly how many items you need to store.</p>\r\n      <pre><code class=\"language-csharp\">// Array of exercises\r\nstring[] exercises = { \"Push-ups\", \"Squats\", \"Plank\" };\r\n\r\nConsole.WriteLine(exercises[1]); // Squats\r\n</code></pre>\r\n\r\n      <p class=\"mb-4\">Looping through an array:</p>\r\n      <pre><code class=\"language-csharp\">foreach (string exercise in exercises)\r\n{\r\n  Console.WriteLine(exercise);\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">📋 Lists – Flexible & Dynamic</h3>\r\n      <p class=\"mb-4\">Lists are part of <code>System.Collections.Generic</code>. They’re like superpowered arrays that can grow as needed.</p>\r\n\r\n      <pre><code class=\"language-csharp\">using System.Collections.Generic;\r\n\r\nList&lt;string&gt; workoutPlan = new List&lt;string&gt;();\r\nworkoutPlan.Add(\"Jumping Jacks\");\r\nworkoutPlan.Add(\"Lunges\");\r\nworkoutPlan.Add(\"Burpees\");</code></pre>\r\n\r\n      <p class=\"mb-4\">Lists can be modified anytime:</p>\r\n      <pre><code class=\"language-csharp\">workoutPlan.Remove(\"Lunges\");\r\nConsole.WriteLine(workoutPlan.Count); // 2</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🔍 Accessing List Items</h3>\r\n      <pre><code class=\"language-csharp\">Console.WriteLine(workoutPlan[0]); // Jumping Jacks</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🛠 When to Use What?</h3>\r\n      <ul class=\"list-disc ml-6 mb-4\">\r\n        <li>✅ Use <strong>arrays</strong> when size is fixed (like days of the week).</li>\r\n        <li>✅ Use <strong>lists</strong> when you need to add/remove items frequently (like tasks or user input).</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mb-2 mt-6\">🌟 Real-Life Example</h3>\r\n      <p class=\"mb-4\">You're tracking your meals throughout the day:</p>\r\n      <pre><code class=\"language-csharp\">List&lt;string&gt; meals = new List&lt;string&gt; { \"Breakfast\", \"Lunch\" };\r\nmeals.Add(\"Dinner\");\r\n\r\nforeach (string meal in meals)\r\n{\r\n  Console.WriteLine(\"Meal: \" + meal);\r\n}</code></pre>\r\n    `,\r\n    proTip: \"Use List<T> when working with APIs, databases, or any situation where the number of items isn't fixed.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `// Using arrays\r\nint[] scores = { 85, 90, 78 };\r\nConsole.WriteLine(scores[0]); // 85\r\n\r\n// Using lists\r\nList<string> students = new List<string>();\r\nstudents.Add(\"Raj\");\r\nstudents.Add(\"Simran\");\r\nstudents.Remove(\"Raj\");\r\n\r\nforeach (var student in students)\r\n{\r\n  Console.WriteLine(student);\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-strings':\r\n  return {\r\n    slug: 'csharp-strings',\r\n    title: 'Working with Strings',\r\n    content: `\r\n<p>Strings in C# are like the sentences we write in daily life — they hold text, from names and messages to entire paragraphs. In C#, a string is a sequence of characters enclosed in double quotes. For example:</p>\r\n\r\n<pre><code class=\"language-csharp\">string name = \"IgKnight\";</code></pre>\r\n\r\n<p>Strings are everywhere — printing messages, reading input, formatting outputs. Let’s understand them in a fun, practical way.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Declaring Strings</h2>\r\n<p>Declaring a string is super simple:</p>\r\n<pre><code class=\"language-csharp\">string message = \"Hello, world!\";</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. String Concatenation</h2>\r\n<p>You can join strings using the <code>+</code> operator:</p>\r\n<pre><code class=\"language-csharp\">string firstName = \"John\";\r\nstring lastName = \"Doe\";\r\nstring fullName = firstName + \" \" + lastName;</code></pre>\r\n<p><strong>Output:</strong> <code>John Doe</code></p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. String Interpolation (More Modern & Clean)</h2>\r\n<p>This is like smart string building — way cleaner than concatenation:</p>\r\n<pre><code class=\"language-csharp\">string name = \"Alice\";\r\nint age = 25;\r\nstring intro = $\"My name is {name} and I am {age} years old.\";</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Useful String Methods</h2>\r\n<p>C# provides powerful methods to work with strings:</p>\r\n<ul class=\"list-disc pl-6\">\r\n  <li><code>.Length</code> – Gets the number of characters</li>\r\n  <li><code>.ToUpper()</code> / <code>.ToLower()</code> – Changes casing</li>\r\n  <li><code>.Contains()</code> – Checks if a word is inside the string</li>\r\n  <li><code>.Replace()</code> – Replaces part of a string</li>\r\n  <li><code>.Substring()</code> – Extracts a part of a string</li>\r\n  <li><code>.Trim()</code> – Removes spaces at the start and end</li>\r\n</ul>\r\n\r\n<pre><code class=\"language-csharp\">string info = \"  Welcome to IgKnight!  \";\r\nConsole.WriteLine(info.Trim()); // \"Welcome to IgKnight!\"</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Escaping Characters</h2>\r\n<p>If you want to include special characters like quotes or new lines:</p>\r\n<pre><code class=\"language-csharp\">string quote = \"She said, \\\\\\\"Learn C# with IgKnight!\\\\\\\"\";</code></pre>\r\n\r\n<p>Or use <strong>verbati**m strings</strong> with <code>@</code> for multi-line or file paths:</p>\r\n<pre><code class=\"language-csharp\">string path = @\"C:\\\\Users\\\\John\\\\Documents\";\r\nstring multiLine = @\"Line 1\r\nLine 2\r\nLine 3\";</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Comparing Strings</h2>\r\n<pre><code class=\"language-csharp\">string a = \"hello\";\r\nstring b = \"HELLO\";\r\nbool isSame = a.Equals(b, StringComparison.OrdinalIgnoreCase);</code></pre>\r\n\r\n<p>That compares strings without caring about letter casing!</p>\r\n`,\r\n    proTip: \"Use string interpolation (the $ symbol) over concatenation — it makes your code cleaner and easier to read.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `string name = \"IgKnight\";\r\nstring greeting = $\"Welcome to {name}!\";\r\nConsole.WriteLine(greeting);`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-classes-objects':\r\n  return {\r\n    slug: 'csharp-classes-objects',\r\n    title: 'Classes & Objects',\r\n    content: `\r\n<p>Classes and objects are the heart of C#. Think of a <strong>class</strong> as a blueprint, like the plan for a house. And an <strong>object</strong> is an actual house built using that plan.</p>\r\n\r\n<p>In real life, we don’t describe every car separately — we have a generic car design (class), and each car we see on the road is an object of that class. Same with code!</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Defining a Class</h2>\r\n<p>Let’s create a simple class called <code>Car</code>:</p>\r\n<pre><code class=\"language-csharp\">public class Car {\r\n  public string Brand;\r\n  public int Year;\r\n\r\n  public void Honk() {\r\n    Console.WriteLine(\"Beep beep!\");\r\n  }\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Creating Objects</h2>\r\n<p>Now let’s create a <code>Car</code> object using the class:</p>\r\n<pre><code class=\"language-csharp\">Car myCar = new Car();\r\nmyCar.Brand = \"Tesla\";\r\nmyCar.Year = 2024;\r\nmyCar.Honk();</code></pre>\r\n\r\n<p><strong>Output:</strong> <code>Beep beep!</code></p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Constructors (Auto setup)</h2>\r\n<p>A constructor helps set up the object with initial values when it's created:</p>\r\n<pre><code class=\"language-csharp\">public class Car {\r\n  public string Brand;\r\n  public int Year;\r\n\r\n  // Constructor\r\n  public Car(string brand, int year) {\r\n    Brand = brand;\r\n    Year = year;\r\n  }\r\n\r\n  public void Honk() {\r\n    Console.WriteLine(\"Beep from \" + Brand);\r\n  }\r\n}</code></pre>\r\n\r\n<pre><code class=\"language-csharp\">Car car1 = new Car(\"BMW\", 2023);\r\ncar1.Honk();</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Access Modifiers</h2>\r\n<ul class=\"list-disc pl-6\">\r\n  <li><code>public</code> – accessible from anywhere</li>\r\n  <li><code>private</code> – only inside the class</li>\r\n  <li><code>protected</code> – inside the class and subclasses</li>\r\n</ul>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Analogy</h2>\r\n<p>Imagine a <strong>Phone</strong> class. Every phone object might have a brand, model, and call() method. The class is the definition, and your actual iPhone or Samsung device is an object of that class.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Why Use Classes?</h2>\r\n<p>They help you:</p>\r\n<ul class=\"list-disc pl-6\">\r\n  <li>Organize code logically</li>\r\n  <li>Reuse structures (like models)</li>\r\n  <li>Group data and behavior</li>\r\n</ul>\r\n<p>Without classes, code becomes messy and hard to manage.</p>\r\n`,\r\n    proTip: \"Give each class one responsibility. Don’t make one class handle everything — split things into clean, simple blueprints.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public class Student {\r\n  public string Name;\r\n  public int Age;\r\n\r\n  public Student(string name, int age) {\r\n    Name = name;\r\n    Age = age;\r\n  }\r\n\r\n  public void Greet() {\r\n    Console.WriteLine($\"Hi, I'm {Name} and I'm {Age} years old.\");\r\n  }\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-inheritance':\r\n  return {\r\n    slug: 'csharp-inheritance',\r\n    title: 'Inheritance & Polymorphism',\r\n    content: `\r\n<p>Inheritance in C# lets one class \"inherit\" or reuse features (variables and methods) from another. It’s like getting a free set of tools from your parent class. 🔧</p>\r\n\r\n<p>Let’s say you have a general <code>Animal</code> class. A <code>Dog</code> or <code>Cat</code> class can inherit everything from <code>Animal</code> — like its ability to breathe or sleep — and add their own behavior, like bark or meow. 🐶🐱</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Basic Inheritance</h2>\r\n<p>We use <code>:</code> to inherit in C#:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class Animal {\r\n  public void Eat() {\r\n    Console.WriteLine(\"Eating...\");\r\n  }\r\n}\r\n\r\npublic class Dog : Animal {\r\n  public void Bark() {\r\n    Console.WriteLine(\"Woof!\");\r\n  }\r\n}</code></pre>\r\n\r\n<pre><code class=\"language-csharp\">Dog myDog = new Dog();\r\nmyDog.Eat(); // Inherited from Animal\r\nmyDog.Bark();</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. The <code>base</code> Keyword</h2>\r\n<p>You can call the parent class's constructor or methods using <code>base</code>:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class Animal {\r\n  public Animal() {\r\n    Console.WriteLine(\"Animal created\");\r\n  }\r\n}\r\n\r\npublic class Cat : Animal {\r\n  public Cat() : base() {\r\n    Console.WriteLine(\"Cat created\");\r\n  }\r\n}</code></pre>\r\n\r\n<p><strong>Output:</strong><br>Animal created<br>Cat created</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Method Overriding</h2>\r\n<p>Let’s say the base class has a method, but the child class wants to do it differently. Use <code>virtual</code> and <code>override</code>:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class Animal {\r\n  public virtual void Speak() {\r\n    Console.WriteLine(\"Animal sound\");\r\n  }\r\n}\r\n\r\npublic class Dog : Animal {\r\n  public override void Speak() {\r\n    Console.WriteLine(\"Dog barks\");\r\n  }\r\n}</code></pre>\r\n\r\n<pre><code class=\"language-csharp\">Dog d = new Dog();\r\nd.Speak(); // Dog barks</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Polymorphism</h2>\r\n<p>Polymorphism = Many forms. A single method call can do different things depending on the object.</p>\r\n\r\n<pre><code class=\"language-csharp\">Animal pet = new Dog();\r\npet.Speak(); // Dog barks because override happens</code></pre>\r\n\r\n<p>Even though <code>pet</code> is typed as <code>Animal</code>, it behaves like a <code>Dog</code>. That’s the magic!</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\r\n<p>Imagine a base class <code>Employee</code> with a method <code>Work()</code>. A <code>Manager</code> class inherits from <code>Employee</code> but overrides <code>Work()</code> to “attend meetings” while a <code>Developer</code> might override it to “write code”.</p>\r\n`,\r\n    proTip: \"Use inheritance to avoid repeating code, but don’t overuse it — prefer composition when classes start becoming too dependent.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public class Animal {\r\n  public virtual void Speak() {\r\n    Console.WriteLine(\"Animal sound\");\r\n  }\r\n}\r\n\r\npublic class Dog : Animal {\r\n  public override void Speak() {\r\n    Console.WriteLine(\"Bark!\");\r\n  }\r\n}\r\n\r\nAnimal a = new Dog();\r\na.Speak(); // Bark!\r\n`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-interfaces':\r\n  return {\r\n    slug: 'csharp-interfaces',\r\n    title: 'Interfaces & Abstraction',\r\n    content: `\r\n<p>Interfaces in C# are like contracts 📜. They say: \"If you implement me, you *must* provide these methods.\" But they don’t care *how* you implement them. This is great for making flexible and scalable code.</p>\r\n\r\n<p>Think of an interface like a remote control — it has buttons (methods), but the device (class) decides what happens when you press one. 📺</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Declaring an Interface</h2>\r\n<pre><code class=\"language-csharp\">public interface IAnimal {\r\n  void Speak();\r\n  void Move();\r\n}</code></pre>\r\n\r\n<p>Notice: no method bodies — just declarations.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Implementing an Interface</h2>\r\n<pre><code class=\"language-csharp\">public class Dog : IAnimal {\r\n  public void Speak() {\r\n    Console.WriteLine(\"Bark!\");\r\n  }\r\n\r\n  public void Move() {\r\n    Console.WriteLine(\"Dog runs\");\r\n  }\r\n}</code></pre>\r\n\r\n<p>Now <code>Dog</code> is *guaranteed* to have <code>Speak()</code> and <code>Move()</code>.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Interface as a Type</h2>\r\n<p>You can use the interface itself as a variable type:</p>\r\n\r\n<pre><code class=\"language-csharp\">IAnimal pet = new Dog();\r\npet.Speak(); // Bark!</code></pre>\r\n\r\n<p>This is super useful for abstraction — you can swap out implementations without changing much code.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Multiple Interfaces</h2>\r\n<p>C# doesn't support multiple inheritance with classes — but interfaces? Totally fine! 🎉</p>\r\n\r\n<pre><code class=\"language-csharp\">public interface IFlyable {\r\n  void Fly();\r\n}\r\n\r\npublic class Bird : IAnimal, IFlyable {\r\n  public void Speak() {\r\n    Console.WriteLine(\"Chirp\");\r\n  }\r\n\r\n  public void Move() {\r\n    Console.WriteLine(\"Hop\");\r\n  }\r\n\r\n  public void Fly() {\r\n    Console.WriteLine(\"Bird is flying\");\r\n  }\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\r\n<p>Imagine you're building a payment system. You could create a <code>IPaymentProcessor</code> interface and implement it differently for CreditCard, PayPal, UPI, etc. Your main code doesn’t care *how* it works — it just trusts that each method exists and works correctly.</p>\r\n`,\r\n    proTip: \"Interface names usually start with ‘I’ by convention (e.g., IAnimal, ILogger). It makes your code more readable and consistent.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public interface IShape {\r\n  double Area();\r\n}\r\n\r\npublic class Circle : IShape {\r\n  public double Radius { get; set; }\r\n  public double Area() => Math.PI * Radius * Radius;\r\n}\r\n\r\nIShape shape = new Circle { Radius = 5 };\r\nConsole.WriteLine(shape.Area());`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-collections':\r\n  return {\r\n    slug: 'csharp-collections',\r\n    title: 'Collections & Dictionaries',\r\n    content: `\r\n<p>Collections in C# are like special containers 📦 — they let you store and organize multiple values in a more powerful way than plain arrays. Need a growing list of names? Or a phonebook-style key-value store? Collections have your back.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. List&lt;T&gt; – A Resizable Array</h2>\r\n<p>A <code>List&lt;T&gt;</code> is like a dynamic array. You can add, remove, sort — it’s your go-to for most use cases.</p>\r\n\r\n<pre><code class=\"language-csharp\">List&lt;string&gt; fruits = new List&lt;string&gt;();\r\nfruits.Add(\"Apple\");\r\nfruits.Add(\"Mango\");\r\nfruits.Remove(\"Apple\");\r\n\r\nforeach (var fruit in fruits)\r\n  Console.WriteLine(fruit);</code></pre>\r\n\r\n<p>You don’t have to worry about the size like in arrays — Lists grow as needed. 📈</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Dictionary&lt;K,V&gt; – Key-Value Pairs</h2>\r\n<p>Think of it like a mini-database where you look up values by a unique key, like a real-life dictionary. 🧠</p>\r\n\r\n<pre><code class=\"language-csharp\">Dictionary&lt;string, string&gt; capitals = new Dictionary&lt;string, string&gt;();\r\ncapitals[\"India\"] = \"New Delhi\";\r\ncapitals[\"Japan\"] = \"Tokyo\";\r\n\r\nConsole.WriteLine(capitals[\"India\"]); // New Delhi</code></pre>\r\n\r\n<p>Perfect for things like storing user IDs, configs, or mapping data.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. HashSet&lt;T&gt; – Unique Values Only</h2>\r\n<p>Need a collection with no duplicates? Use <code>HashSet&lt;T&gt;</code>:</p>\r\n\r\n<pre><code class=\"language-csharp\">HashSet&lt;int&gt; uniqueIds = new HashSet&lt;int&gt;();\r\nuniqueIds.Add(1);\r\nuniqueIds.Add(1); // Won’t be added again</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Queue &amp; Stack</h2>\r\n<p><strong>Queue</strong> works like a line at the coffee shop ☕ (First-In-First-Out).</p>\r\n<pre><code class=\"language-csharp\">Queue&lt;string&gt; orders = new Queue&lt;string&gt;();\r\norders.Enqueue(\"Order1\");\r\norders.Enqueue(\"Order2\");\r\n\r\nConsole.WriteLine(orders.Dequeue()); // Order1</code></pre>\r\n\r\n<p><strong>Stack</strong> is like a stack of plates 🍽️ (Last-In-First-Out).</p>\r\n<pre><code class=\"language-csharp\">Stack&lt;string&gt; pages = new Stack&lt;string&gt;();\r\npages.Push(\"Page1\");\r\npages.Push(\"Page2\");\r\n\r\nConsole.WriteLine(pages.Pop()); // Page2</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Tip</h2>\r\n<p>Use:</p>\r\n<ul class=\"list-disc ml-6\">\r\n  <li><code>List&lt;T&gt;</code> when order matters and items can repeat.</li>\r\n  <li><code>Dictionary&lt;K,V&gt;</code> when you need fast lookups with keys.</li>\r\n  <li><code>HashSet&lt;T&gt;</code> when duplicates are a problem.</li>\r\n  <li><code>Queue</code> for tasks in order, and <code>Stack</code> for undo/history features.</li>\r\n</ul>\r\n`,\r\n    proTip: \"All collection types are found in System.Collections.Generic. Always prefer the generic versions (like List<T>) over the old non-generic ones.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `Dictionary<string, int> scores = new Dictionary<string, int>();\r\nscores[\"Alice\"] = 85;\r\nscores[\"Bob\"] = 92;\r\n\r\nforeach (var kv in scores)\r\n  Console.WriteLine($\"{kv.Key}: {kv.Value}\");`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-exceptions':\r\n  return {\r\n    slug: 'csharp-exceptions',\r\n    title: 'Exception Handling',\r\n    content: `\r\n<p>Exceptions are C#'s way of saying, \"Uh oh, something went wrong!\" 💥 They help you deal with unexpected situations — like dividing by zero or trying to read a file that doesn't exist — without crashing your program.</p>\r\n\r\n<p>Think of them as fire alarms 🚨. When triggered, they stop normal flow and let you handle the problem gracefully.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. try-catch Block</h2>\r\n<p>Here’s the basic structure:</p>\r\n\r\n<pre><code class=\"language-csharp\">try {\r\n  int x = 10;\r\n  int y = 0;\r\n  int result = x / y;\r\n} catch (DivideByZeroException ex) {\r\n  Console.WriteLine(\"You can't divide by zero!\");\r\n}</code></pre>\r\n\r\n<p><code>try</code> is where the risky code goes. <code>catch</code> is where you recover when things go wrong.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Multiple Catch Blocks</h2>\r\n<p>You can handle different types of exceptions separately:</p>\r\n\r\n<pre><code class=\"language-csharp\">try {\r\n  // risky stuff\r\n} catch (FormatException) {\r\n  Console.WriteLine(\"Invalid format\");\r\n} catch (NullReferenceException) {\r\n  Console.WriteLine(\"Something was null\");\r\n}</code></pre>\r\n\r\n<p>This is like having different solutions for different problems.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. finally Block</h2>\r\n<p><code>finally</code> runs no matter what — even if there’s no error.</p>\r\n\r\n<pre><code class=\"language-csharp\">try {\r\n  // do something\r\n} catch {\r\n  // handle error\r\n} finally {\r\n  Console.WriteLine(\"This always runs\");\r\n}</code></pre>\r\n\r\n<p>Use it for cleanup: closing files, releasing resources, etc.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Throwing Your Own Exception</h2>\r\n<p>You can raise (throw) exceptions too:</p>\r\n\r\n<pre><code class=\"language-csharp\">if (age &lt; 0) {\r\n  throw new ArgumentException(\"Age can't be negative\");\r\n}</code></pre>\r\n\r\n<p>This is useful when you're writing your own rules.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\r\n<p>Imagine you're building a login system. If a user enters an incorrect password or the database connection fails, exceptions help you show friendly error messages without showing the scary crash stack trace. 😊</p>\r\n`,\r\n    proTip: \"Don’t overuse exceptions for normal logic (like checking if a file exists). Use them for truly exceptional cases — not everyday decisions.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `try {\r\n  string input = Console.ReadLine();\r\n  int number = int.Parse(input);\r\n  Console.WriteLine($\"You entered {number}\");\r\n} catch (FormatException) {\r\n  Console.WriteLine(\"That wasn't a number!\");\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-linq':\r\n  return {\r\n    slug: 'csharp-linq',\r\n    title: 'LINQ Basics',\r\n    content: `\r\n<p><strong>LINQ</strong> (Language Integrated Query) lets you filter, sort, and transform data in C# like you're asking questions in plain English. 🧠 Think of it as SQL + C# had a baby. You can use LINQ on arrays, lists, dictionaries — anything that’s enumerable.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Why LINQ?</h2>\r\n<p>Say goodbye to loops and conditionals when you just want to find or shape data. LINQ gives you a clean, powerful way to work with collections.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Basic LINQ Query</h2>\r\n<p>Here’s a basic example of using LINQ to find even numbers:</p>\r\n\r\n<pre><code class=\"language-csharp\">List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6 };\r\n\r\nvar evens = numbers.Where(n =&gt; n % 2 == 0);\r\n\r\nforeach (var n in evens)\r\n  Console.WriteLine(n);</code></pre>\r\n\r\n<p><code>.Where()</code> filters the list, just like asking “Give me only even numbers”.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Other Useful LINQ Methods</h2>\r\n<ul class=\"list-disc ml-6\">\r\n  <li><code>Select()</code> – Projects each item into a new form.</li>\r\n  <li><code>OrderBy()</code> / <code>OrderByDescending()</code> – Sort items.</li>\r\n  <li><code>FirstOrDefault()</code> – Get first match or default value.</li>\r\n  <li><code>Count()</code>, <code>Sum()</code>, <code>Average()</code> – Aggregate data.</li>\r\n</ul>\r\n\r\n<pre><code class=\"language-csharp\">var names = new List&lt;string&gt; { \"Alice\", \"Bob\", \"Charlie\" };\r\n\r\nvar nameLengths = names.Select(name =&gt; name.Length);\r\nvar sorted = names.OrderBy(name =&gt; name);\r\n\r\nConsole.WriteLine(nameLengths.Sum());</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. LINQ Query Syntax</h2>\r\n<p>You can also write LINQ like SQL:</p>\r\n\r\n<pre><code class=\"language-csharp\">var longNames = from name in names\r\n                where name.Length &gt; 3\r\n                select name;</code></pre>\r\n\r\n<p>This is called <strong>query syntax</strong>. You can use whichever style you prefer!</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\r\n<p>Imagine you're building a course dashboard. You could use LINQ to:</p>\r\n<ul class=\"list-disc ml-6\">\r\n  <li>Find all completed courses</li>\r\n  <li>Sort them by score</li>\r\n  <li>Get the top 3</li>\r\n</ul>\r\n\r\n<pre><code class=\"language-csharp\">var topCourses = courses\r\n  .Where(c =&gt; c.IsCompleted)\r\n  .OrderByDescending(c =&gt; c.Score)\r\n  .Take(3);</code></pre>\r\n\r\n<p>That’s clean, powerful, and readable — all thanks to LINQ! ✨</p>\r\n`,\r\n    proTip: \"You need <code>using System.Linq;</code> to use LINQ methods. Always prefer LINQ over manual loops when working with data—it’s more expressive and less error-prone.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `List<string> fruits = new List<string> { \"Apple\", \"Mango\", \"Banana\", \"Orange\" };\r\n\r\nvar filtered = fruits\r\n  .Where(f => f.Length > 5)\r\n  .OrderBy(f => f);\r\n\r\nforeach (var fruit in filtered)\r\n  Console.WriteLine(fruit);`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-files':\r\n  return {\r\n    slug: 'csharp-files',\r\n    title: 'File Handling',\r\n    content: `\r\n<p>File handling in C# is like teaching your app to read and write journals 📓. Whether you want to save user notes, log errors, or store game scores — you’ll often need to deal with files.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Writing to a File</h2>\r\n<p><code>File.WriteAllText()</code> is the easiest way to write text to a file:</p>\r\n\r\n<pre><code class=\"language-csharp\">string path = \"log.txt\";\r\nFile.WriteAllText(path, \"IgKnight launch successful! 🚀\");</code></pre>\r\n\r\n<p>This will create the file if it doesn’t exist or overwrite it if it does.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Appending to a File</h2>\r\n<p>Want to add more info without deleting the old stuff?</p>\r\n\r\n<pre><code class=\"language-csharp\">File.AppendAllText(path, \"\\\\nMore logs coming in...\");</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Reading from a File</h2>\r\n<p>To read the whole file content at once:</p>\r\n\r\n<pre><code class=\"language-csharp\">string content = File.ReadAllText(path);\r\nConsole.WriteLine(content);</code></pre>\r\n\r\n<p>This is perfect for small to medium files.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Reading Line by Line</h2>\r\n<p>For large files, line-by-line reading is safer:</p>\r\n\r\n<pre><code class=\"language-csharp\">foreach (string line in File.ReadLines(path)) {\r\n  Console.WriteLine(line);\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. File Exists Check</h2>\r\n<p>Before reading or writing, it’s good to check if the file exists:</p>\r\n\r\n<pre><code class=\"language-csharp\">if (File.Exists(path)) {\r\n  Console.WriteLine(\"File is there!\");\r\n} else {\r\n  Console.WriteLine(\"No file yet!\");\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Real-Life Example</h2>\r\n<p>Imagine you're building a note-taking app. You could:</p>\r\n<ul class=\"list-disc ml-6\">\r\n  <li>Save each note in a separate .txt file</li>\r\n  <li>Read them back when the user reopens the app</li>\r\n  <li>Append new ideas without overwriting</li>\r\n</ul>\r\n\r\n<p>File handling lets your app remember things between sessions — kind of like a memory card for your logic. 💾</p>\r\n`,\r\n    proTip: \"Always handle exceptions like <code>FileNotFoundException</code> or <code>IOException</code> when working with files — things can go wrong (e.g. missing file, permission issues).\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `string path = \"notes.txt\";\r\n\r\nif (!File.Exists(path)) {\r\n  File.WriteAllText(path, \"First note!\");\r\n} else {\r\n  File.AppendAllText(path, \"\\\\nAnother thought...\");\r\n}\r\n\r\nstring content = File.ReadAllText(path);\r\nConsole.WriteLine(\"Current notes: \" + content);`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-async':\r\n  return {\r\n    slug: 'csharp-async',\r\n    title: 'Asynchronous Programming',\r\n    content: `\r\n<p>Async programming in C# lets your app do more than one thing at a time — like a multitasker with superpowers 🦸. It’s how you keep your app smooth and responsive even while doing heavy work like downloading files or accessing APIs.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Why Async?</h2>\r\n<p>Imagine you tap a “Download” button in an app, and everything freezes until it's done 😩. That’s what happens without async. With async, the download happens in the background and your app stays usable.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. The Magic Words: <code>async</code> & <code>await</code></h2>\r\n<p>Just add <code>async</code> to your method and use <code>await</code> on any long-running task:</p>\r\n\r\n<pre><code class=\"language-csharp\">public async Task FetchDataAsync() {\r\n  Console.WriteLine(\"Fetching data...\");\r\n  string data = await File.ReadAllTextAsync(\"data.txt\");\r\n  Console.WriteLine(\"Data: \" + data);\r\n}</code></pre>\r\n\r\n<p><code>await</code> tells C# to “pause here and come back when ready” – but without blocking the whole app!</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Common Async Methods</h2>\r\n<ul class=\"list-disc ml-6\">\r\n  <li><code>HttpClient.GetStringAsync()</code> – for web requests</li>\r\n  <li><code>File.ReadAllTextAsync()</code> – for reading files</li>\r\n  <li><code>Task.Delay()</code> – to simulate waiting</li>\r\n</ul>\r\n\r\n<pre><code class=\"language-csharp\">await Task.Delay(2000); // Waits 2 seconds without freezing the app</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Calling Async Methods</h2>\r\n<p>You can only use <code>await</code> inside an <code>async</code> method. If you're in <code>Main()</code>, use:</p>\r\n\r\n<pre><code class=\"language-csharp\">await FetchDataAsync(); // if inside another async method</code></pre>\r\n\r\n<p>For console apps using <code>Main</code> as async (C# 7.1+):</p>\r\n\r\n<pre><code class=\"language-csharp\">static async Task Main(string[] args) {\r\n  await FetchDataAsync();\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Real-Life Example</h2>\r\n<p>Imagine you're building a learning app like IgKnight. When loading a user's progress or fetching quiz questions from an API, you’d use async to keep the UI buttery smooth 🍰.</p>\r\n\r\n<pre><code class=\"language-csharp\">HttpClient client = new HttpClient();\r\nstring response = await client.GetStringAsync(\"https://api.ignight.io/quiz\");\r\nConsole.WriteLine(\"Quiz data: \" + response);</code></pre>\r\n\r\n<p>No lag. No freezing. Just fast, modern UX 💡.</p>\r\n`,\r\n    proTip: \"Avoid <code>.Result</code> or <code>.Wait()</code> on async methods — they block the thread and can cause deadlocks. Always <code>await</code> properly inside an <code>async</code> method.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public async Task LoadDashboardAsync() {\r\n  Console.WriteLine(\"Loading...\");\r\n  await Task.Delay(1500); // Simulate loading\r\n  Console.WriteLine(\"Dashboard Ready ✅\");\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-advanced':\r\n  return {\r\n    slug: 'csharp-advanced',\r\n    title: 'Advanced C# Tips',\r\n    content: `\r\n<p>By now, you know your way around classes, loops, and methods. Let’s step it up 🔥. These advanced C# features make your code cleaner, faster, and smarter — like hidden power-ups in a game 🎮.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Lambda Expressions</h2>\r\n<p>Lambdas are super short, inline functions. Great for filtering, mapping, and callbacks:</p>\r\n\r\n<pre><code class=\"language-csharp\">List&lt;int&gt; nums = new List&lt;int&gt; { 1, 2, 3, 4 };\r\nvar evens = nums.Where(n => n % 2 == 0);</code></pre>\r\n\r\n<p><code>n => n % 2 == 0</code> is a lambda. Think of it as a mini one-line method.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Null-Coalescing Operator (??)</h2>\r\n<p>This returns a fallback if the value is <code>null</code>:</p>\r\n\r\n<pre><code class=\"language-csharp\">string name = userName ?? \"Guest\";</code></pre>\r\n\r\n<p>If <code>userName</code> is null, <code>name</code> becomes \"Guest\". Handy for defaults!</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Ternary Operator</h2>\r\n<p>Quick <code>if-else</code> for assignments:</p>\r\n\r\n<pre><code class=\"language-csharp\">string role = isAdmin ? \"Admin\" : \"User\";</code></pre>\r\n\r\n<p>Reads like: “If <code>isAdmin</code>, set role to Admin, otherwise User.”</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Tuples</h2>\r\n<p>Need to return multiple values from a method? Use a tuple!</p>\r\n\r\n<pre><code class=\"language-csharp\">(string name, int score) GetPlayer() {\r\n  return (\"Jay\", 95);\r\n}</code></pre>\r\n\r\n<p>You can access them like <code>player.name</code> and <code>player.score</code>. It's like a quick custom class.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Expression-bodied Members</h2>\r\n<p>For short methods or properties, skip the braces:</p>\r\n\r\n<pre><code class=\"language-csharp\">public int Square(int x) => x * x;</code></pre>\r\n\r\n<p>Clean and sharp. Perfect for one-liners.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Pattern Matching</h2>\r\n<p>Like switch statements on steroids 💪:</p>\r\n\r\n<pre><code class=\"language-csharp\">object data = 42;\r\nif (data is int number) {\r\n  Console.WriteLine($\"It's a number: {number}\");\r\n}</code></pre>\r\n\r\n<p>This checks and assigns in one go.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">7. Records (C# 9+)</h2>\r\n<p>Need a quick data class with built-in equality and immutability?</p>\r\n\r\n<pre><code class=\"language-csharp\">public record User(string Name, int Age);</code></pre>\r\n\r\n<p>No need to write constructors, getters, or equality logic. Great for clean models in APIs.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">Real-Life Use</h2>\r\n<p>In a learning platform like IgKnight, advanced features help with:</p>\r\n<ul class=\"list-disc ml-6\">\r\n  <li>Filtering course lists with lambdas</li>\r\n  <li>Sending multiple return values using tuples</li>\r\n  <li>Creating clean, testable models with records</li>\r\n</ul>\r\n`,\r\n    proTip: \"Don’t overuse every fancy feature. Use what improves clarity. Simpler is often better — write code your future self will thank you for.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public record Course(string Title, int Duration);\r\n\r\nvar courses = new List<Course> {\r\n  new(\"C#\", 5),\r\n  new(\"JavaScript\", 4)\r\n};\r\n\r\nvar shortCourses = courses.Where(c => c.Duration < 5);\r\nshortCourses.ToList().ForEach(c => Console.WriteLine(c.Title));`\r\n      }\r\n    ]\r\n  };\r\n  case 'csharp-best-practices':\r\n  return {\r\n    slug: 'csharp-best-practices',\r\n    title: 'Best Practices',\r\n    content: `\r\n<p>You've learned the tools — now it's time to code like a pro 💼. These C# best practices help you write cleaner, safer, and more maintainable code, whether you're building an app, API, or part of a big team.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">1. Use Meaningful Names</h2>\r\n<p>Always name your variables, methods, and classes clearly. Avoid vague names like <code>temp</code> or <code>data</code>:</p>\r\n\r\n<pre><code class=\"language-csharp\">// ❌ Bad\r\nint d = 100;\r\n\r\n// ✅ Good\r\nint downloadLimitInMB = 100;</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">2. Keep Methods Short</h2>\r\n<p>Each method should do one thing — and do it well. If it's getting long, split it into helper methods.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">3. Use Access Modifiers</h2>\r\n<p>Mark things <code>private</code>, <code>protected</code>, or <code>public</code> explicitly. This avoids accidental usage and improves security.</p>\r\n\r\n<pre><code class=\"language-csharp\">private int score;\r\npublic void UpdateScore(int newScore) { ... }</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">4. Prefer <code>var</code> When the Type is Obvious</h2>\r\n<p><code>var</code> makes code less noisy, but don’t overuse it for unclear types.</p>\r\n\r\n<pre><code class=\"language-csharp\">var user = new User();       // ✅ Clear\r\nvar x = DoSomethingWeird(); // ❌ What is x?</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">5. Avoid Hardcoding Values</h2>\r\n<p>Don’t sprinkle magic numbers or strings everywhere. Use constants or config files.</p>\r\n\r\n<pre><code class=\"language-csharp\">// ❌ Bad\r\nif (score > 90) { ... }\r\n\r\n// ✅ Good\r\nconst int HighScoreThreshold = 90;\r\nif (score > HighScoreThreshold) { ... }</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">6. Catch Specific Exceptions</h2>\r\n<p>Avoid generic <code>catch (Exception)</code> unless you're logging or rethrowing:</p>\r\n\r\n<pre><code class=\"language-csharp\">try {\r\n  File.ReadAllText(\"data.txt\");\r\n} catch (FileNotFoundException ex) {\r\n  Console.WriteLine(\"File missing!\");\r\n}</code></pre>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">7. Use Async for I/O Operations</h2>\r\n<p>Reading files, hitting APIs, or accessing databases? Use <code>async/await</code> to keep your app smooth.</p>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">8. Follow SOLID Principles (Advanced)</h2>\r\n<p>As you grow, learn SOLID — five design principles that lead to great OOP architecture.</p>\r\n<ul class=\"list-disc ml-6\">\r\n  <li><strong>S</strong>: Single Responsibility</li>\r\n  <li><strong>O</strong>: Open/Closed</li>\r\n  <li><strong>L</strong>: Liskov Substitution</li>\r\n  <li><strong>I</strong>: Interface Segregation</li>\r\n  <li><strong>D</strong>: Dependency Inversion</li>\r\n</ul>\r\n\r\n<h2 class=\"text-xl mt-6 mb-2 font-semibold\">Real-Life Tip</h2>\r\n<p>In a platform like IgKnight, writing clean, consistent code means fewer bugs and faster teamwork. Best practices aren’t just for interviews — they’re for scalable apps.</p>\r\n`,\r\n    proTip: \"Always write code like someone else will read it — because future you is that someone.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'csharp',\r\n        code: `public class QuizService {\r\n  private const int MaxRetries = 3;\r\n\r\n  public async Task<string> GetQuizAsync() {\r\n    try {\r\n      return await File.ReadAllTextAsync(\"quiz.json\");\r\n    } catch (FileNotFoundException) {\r\n      return \"No quiz available.\";\r\n    }\r\n  }\r\n}`\r\n      }\r\n    ]\r\n  };\r\n        \r\n        default:\r\n      return undefined;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}