{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n  constructor() {\n    this._currentVisibleRange = new Range(1, 1, 1, 1);\n  }\n  getCurrentVisibleRange() {\n    return this._currentVisibleRange;\n  }\n  setCurrentVisibleRange(currentVisibleRange) {\n    this._currentVisibleRange = currentVisibleRange;\n  }\n}\nclass HorizontalRevealRangeRequest {\n  constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n    this.minimalReveal = minimalReveal;\n    this.lineNumber = lineNumber;\n    this.startColumn = startColumn;\n    this.endColumn = endColumn;\n    this.startScrollTop = startScrollTop;\n    this.stopScrollTop = stopScrollTop;\n    this.scrollType = scrollType;\n    this.type = 'range';\n    this.minLineNumber = lineNumber;\n    this.maxLineNumber = lineNumber;\n  }\n}\nclass HorizontalRevealSelectionsRequest {\n  constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n    this.minimalReveal = minimalReveal;\n    this.selections = selections;\n    this.startScrollTop = startScrollTop;\n    this.stopScrollTop = stopScrollTop;\n    this.scrollType = scrollType;\n    this.type = 'selections';\n    let minLineNumber = selections[0].startLineNumber;\n    let maxLineNumber = selections[0].endLineNumber;\n    for (let i = 1, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n      maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n    }\n    this.minLineNumber = minLineNumber;\n    this.maxLineNumber = maxLineNumber;\n  }\n}\nexport let ViewLines = /*#__PURE__*/(() => {\n  class ViewLines extends ViewPart {\n    /**\n     * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n     */\n    static #_ = this.HORIZONTAL_EXTRA_PX = 30;\n    constructor(context, linesContent) {\n      super(context);\n      const conf = this._context.configuration;\n      const options = this._context.configuration.options;\n      const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n      this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n      this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n      this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n      this._revealHorizontalRightPadding = options.get(101 /* EditorOption.revealHorizontalRightPadding */);\n      this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n      this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n      this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n      this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n      this._linesContent = linesContent;\n      this._textRangeRestingSpot = document.createElement('div');\n      this._visibleLines = new VisibleLinesCollection({\n        createLine: () => new ViewLine(this._viewLineOptions)\n      });\n      this.domNode = this._visibleLines.domNode;\n      PartFingerprints.write(this.domNode, 8 /* PartFingerprint.ViewLines */);\n      this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n      applyFontInfo(this.domNode, fontInfo);\n      // --- width & height\n      this._maxLineWidth = 0;\n      this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n        this._updateLineWidthsSlow();\n      }, 200);\n      this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n        this._checkMonospaceFontAssumptions();\n      }, 2000);\n      this._lastRenderedData = new LastRenderedData();\n      this._horizontalRevealRequest = null;\n      // sticky scroll widget\n      this._stickyScrollEnabled = options.get(116 /* EditorOption.stickyScroll */).enabled;\n      this._maxNumberStickyLines = options.get(116 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n      this._asyncUpdateLineWidths.dispose();\n      this._asyncCheckMonospaceFontAssumptions.dispose();\n      super.dispose();\n    }\n    getDomNode() {\n      return this.domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n      this._visibleLines.onConfigurationChanged(e);\n      if (e.hasChanged(147 /* EditorOption.wrappingInfo */)) {\n        this._maxLineWidth = 0;\n      }\n      const options = this._context.configuration.options;\n      const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n      this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n      this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n      this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n      this._revealHorizontalRightPadding = options.get(101 /* EditorOption.revealHorizontalRightPadding */);\n      this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n      this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n      this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n      // sticky scroll\n      this._stickyScrollEnabled = options.get(116 /* EditorOption.stickyScroll */).enabled;\n      this._maxNumberStickyLines = options.get(116 /* EditorOption.stickyScroll */).maxLineCount;\n      applyFontInfo(this.domNode, fontInfo);\n      this._onOptionsMaybeChanged();\n      if (e.hasChanged(146 /* EditorOption.layoutInfo */)) {\n        this._maxLineWidth = 0;\n      }\n      return true;\n    }\n    _onOptionsMaybeChanged() {\n      const conf = this._context.configuration;\n      const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n      if (!this._viewLineOptions.equals(newViewLineOptions)) {\n        this._viewLineOptions = newViewLineOptions;\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n          const line = this._visibleLines.getVisibleLine(lineNumber);\n          line.onOptionsChanged(this._viewLineOptions);\n        }\n        return true;\n      }\n      return false;\n    }\n    onCursorStateChanged(e) {\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      let r = false;\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n      }\n      return r;\n    }\n    onDecorationsChanged(e) {\n      if (true /*e.inlineDecorationsChanged*/) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n          this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n        }\n      }\n      return true;\n    }\n    onFlushed(e) {\n      const shouldRender = this._visibleLines.onFlushed(e);\n      this._maxLineWidth = 0;\n      return shouldRender;\n    }\n    onLinesChanged(e) {\n      return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n      return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n      return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n      // Using the future viewport here in order to handle multiple\n      // incoming reveal range requests that might all desire to be animated\n      const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n      if (desiredScrollTop === -1) {\n        // marker to abort the reveal range request\n        return false;\n      }\n      // validate the new desired scroll top\n      let newScrollPosition = this._context.viewLayout.validateScrollPosition({\n        scrollTop: desiredScrollTop\n      });\n      if (e.revealHorizontal) {\n        if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n          // Two or more lines? => scroll to base (That's how you see most of the two lines)\n          newScrollPosition = {\n            scrollTop: newScrollPosition.scrollTop,\n            scrollLeft: 0\n          };\n        } else if (e.range) {\n          // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n          this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n        } else if (e.selections && e.selections.length > 0) {\n          this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n        }\n      } else {\n        this._horizontalRevealRequest = null;\n      }\n      const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n      const scrollType = scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType;\n      this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n      return true;\n    }\n    onScrollChanged(e) {\n      if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n        // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n        this._horizontalRevealRequest = null;\n      }\n      if (this._horizontalRevealRequest && e.scrollTopChanged) {\n        const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n        const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n        if (e.scrollTop < min || e.scrollTop > max) {\n          // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n          this._horizontalRevealRequest = null;\n        }\n      }\n      this.domNode.setWidth(e.scrollWidth);\n      return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n      return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n      this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n      return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n      return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n      const viewLineDomNode = this._getViewLineDomNode(spanNode);\n      if (viewLineDomNode === null) {\n        // Couldn't find view line node\n        return null;\n      }\n      const lineNumber = this._getLineNumberFor(viewLineDomNode);\n      if (lineNumber === -1) {\n        // Couldn't find view line node\n        return null;\n      }\n      if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n        // lineNumber is outside range\n        return null;\n      }\n      if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n        // Line is empty\n        return new Position(lineNumber, 1);\n      }\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n        // Couldn't find line\n        return null;\n      }\n      let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n      const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n      if (column < minColumn) {\n        column = minColumn;\n      }\n      return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n      while (node && node.nodeType === 1) {\n        if (node.className === ViewLine.CLASS_NAME) {\n          return node;\n        }\n        node = node.parentElement;\n      }\n      return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n      const startLineNumber = this._visibleLines.getStartLineNumber();\n      const endLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        const line = this._visibleLines.getVisibleLine(lineNumber);\n        if (domNode === line.getDomNode()) {\n          return lineNumber;\n        }\n      }\n      return -1;\n    }\n    getLineWidth(lineNumber) {\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n        // Couldn't find line\n        return -1;\n      }\n      const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n      const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n      this._updateLineWidthsSlowIfDomDidLayout(context);\n      return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n      if (this.shouldRender()) {\n        // Cannot read from the DOM because it is dirty\n        // i.e. the model & the dom are out of sync, so I'd be reading something stale\n        return null;\n      }\n      const originalEndLineNumber = _range.endLineNumber;\n      const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n      if (!range) {\n        return null;\n      }\n      const visibleRanges = [];\n      let visibleRangesLen = 0;\n      const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n      let nextLineModelLineNumber = 0;\n      if (includeNewLines) {\n        nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n      }\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n          continue;\n        }\n        const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n        const continuesInNextLine = lineNumber !== range.endLineNumber;\n        const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n        const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        if (!visibleRangesForLine) {\n          continue;\n        }\n        if (includeNewLines && lineNumber < originalEndLineNumber) {\n          const currentLineModelLineNumber = nextLineModelLineNumber;\n          nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n          if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n            visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n          }\n        }\n        visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n      }\n      this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n      if (visibleRangesLen === 0) {\n        return null;\n      }\n      return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n      if (this.shouldRender()) {\n        // Cannot read from the DOM because it is dirty\n        // i.e. the model & the dom are out of sync, so I'd be reading something stale\n        return null;\n      }\n      if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n        return null;\n      }\n      const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n      const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n      this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n      return result;\n    }\n    visibleRangeForPosition(position) {\n      const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n      if (!visibleRanges) {\n        return null;\n      }\n      return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n      return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n      this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n      if (!domReadingContext.didDomLayout) {\n        // only proceed if we just did a layout\n        return;\n      }\n      if (this._asyncUpdateLineWidths.isScheduled()) {\n        // reading widths is not scheduled => widths are up-to-date\n        return;\n      }\n      this._asyncUpdateLineWidths.cancel();\n      this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      let localMaxLineWidth = 1;\n      let allWidthsComputed = true;\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n        if (fast && !visibleLine.getWidthIsFast()) {\n          // Cannot compute width in a fast way for this line\n          allWidthsComputed = false;\n          continue;\n        }\n        localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n      }\n      if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n        // we know the max line width for all the lines\n        this._maxLineWidth = 0;\n      }\n      this._ensureMaxLineWidth(localMaxLineWidth);\n      return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n      // Problems with monospace assumptions are more apparent for longer lines,\n      // as small rounding errors start to sum up, so we will select the longest\n      // line for a closer inspection\n      let longestLineNumber = -1;\n      let longestWidth = -1;\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n        if (visibleLine.needsMonospaceFontCheck()) {\n          const lineWidth = visibleLine.getWidth(null);\n          if (lineWidth > longestWidth) {\n            longestWidth = lineWidth;\n            longestLineNumber = lineNumber;\n          }\n        }\n      }\n      if (longestLineNumber === -1) {\n        return;\n      }\n      if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n          const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n          visibleLine.onMonospaceAssumptionsInvalidated();\n        }\n      }\n    }\n    prepareRender() {\n      throw new Error('Not supported');\n    }\n    render() {\n      throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n      // (1) render lines - ensures lines are in the DOM\n      this._visibleLines.renderLines(viewportData);\n      this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n      this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n      this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n      // (2) compute horizontal scroll position:\n      //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n      //  - it might change `scrollWidth` and `scrollLeft`\n      if (this._horizontalRevealRequest) {\n        const horizontalRevealRequest = this._horizontalRevealRequest;\n        // Check that we have the line that contains the horizontal range in the viewport\n        if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n          this._horizontalRevealRequest = null;\n          // allow `visibleRangesForRange2` to work\n          this.onDidRender();\n          // compute new scroll position\n          const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n          if (newScrollLeft) {\n            if (!this._isViewportWrapping) {\n              // ensure `scrollWidth` is large enough\n              this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n            }\n            // set `scrollLeft`\n            this._context.viewModel.viewLayout.setScrollPosition({\n              scrollLeft: newScrollLeft.scrollLeft\n            }, horizontalRevealRequest.scrollType);\n          }\n        }\n      }\n      // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n      if (!this._updateLineWidthsFast()) {\n        // Computing the width of some lines would be slow => delay it\n        this._asyncUpdateLineWidths.schedule();\n      } else {\n        this._asyncUpdateLineWidths.cancel();\n      }\n      if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n          const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n          if (visibleLine.needsMonospaceFontCheck()) {\n            this._asyncCheckMonospaceFontAssumptions.schedule();\n            break;\n          }\n        }\n      }\n      // (3) handle scrolling\n      this._linesContent.setLayerHinting(this._canUseLayerHinting);\n      this._linesContent.setContain('strict');\n      const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n      this._linesContent.setTop(-adjustedScrollTop);\n      this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n      const iLineWidth = Math.ceil(lineWidth);\n      if (this._maxLineWidth < iLineWidth) {\n        this._maxLineWidth = iLineWidth;\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n      }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n      const viewportStartY = viewport.top;\n      const viewportHeight = viewport.height;\n      const viewportEndY = viewportStartY + viewportHeight;\n      let boxIsSingleRange;\n      let boxStartY;\n      let boxEndY;\n      if (selections && selections.length > 0) {\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n          const selection = selections[i];\n          minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n          maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        boxIsSingleRange = false;\n        boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n        boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n      } else if (range) {\n        boxIsSingleRange = true;\n        boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n        boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n      } else {\n        return -1;\n      }\n      const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n      let paddingTop = 0;\n      let paddingBottom = 0;\n      if (!shouldIgnoreScrollOff) {\n        const maxLinesInViewport = viewportHeight / this._lineHeight;\n        const surroundingLines = Math.max(this._cursorSurroundingLines, this._stickyScrollEnabled ? this._maxNumberStickyLines : 0);\n        const context = Math.min(maxLinesInViewport / 2, surroundingLines);\n        paddingTop = context * this._lineHeight;\n        paddingBottom = Math.max(0, context - 1) * this._lineHeight;\n      } else {\n        if (!minimalReveal) {\n          // Reveal one more line above (this case is hit when dragging)\n          paddingTop = this._lineHeight;\n        }\n      }\n      if (!minimalReveal) {\n        if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n          // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n          paddingBottom += this._lineHeight;\n        }\n      }\n      boxStartY -= paddingTop;\n      boxEndY += paddingBottom;\n      let newScrollTop;\n      if (boxEndY - boxStartY > viewportHeight) {\n        // the box is larger than the viewport ... scroll to its top\n        if (!boxIsSingleRange) {\n          // do not reveal multiple cursors if there are more than fit the viewport\n          return -1;\n        }\n        newScrollTop = boxStartY;\n      } else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n        if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n          // Box is already in the viewport... do nothing\n          newScrollTop = viewportStartY;\n        } else {\n          // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n          const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n          // Try to scroll just above the box with the desired gap\n          const desiredScrollTop = boxStartY - desiredGapAbove;\n          // But ensure that the box is not pushed out of viewport\n          const minScrollTop = boxEndY - viewportHeight;\n          newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n        }\n      } else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n        if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n          // Box is already in the viewport... do nothing\n          newScrollTop = viewportStartY;\n        } else {\n          // Box is outside the viewport... center it\n          const boxMiddleY = (boxStartY + boxEndY) / 2;\n          newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n        }\n      } else {\n        newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n      }\n      return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n      const viewport = this._context.viewLayout.getCurrentViewport();\n      const layoutInfo = this._context.configuration.options.get(146 /* EditorOption.layoutInfo */);\n      const viewportStartX = viewport.left;\n      const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n      let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n      let boxEndX = 0;\n      if (horizontalRevealRequest.type === 'range') {\n        const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n        if (!visibleRanges) {\n          return null;\n        }\n        for (const visibleRange of visibleRanges.ranges) {\n          boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n          boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n        }\n      } else {\n        for (const selection of horizontalRevealRequest.selections) {\n          if (selection.startLineNumber !== selection.endLineNumber) {\n            return null;\n          }\n          const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n          if (!visibleRanges) {\n            return null;\n          }\n          for (const visibleRange of visibleRanges.ranges) {\n            boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n            boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n          }\n        }\n      }\n      if (!horizontalRevealRequest.minimalReveal) {\n        boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n        boxEndX += this._revealHorizontalRightPadding;\n      }\n      if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n        return null;\n      }\n      const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n      return {\n        scrollLeft: newScrollLeft,\n        maxHorizontalOffset: boxEndX\n      };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n      viewportStart = viewportStart | 0;\n      viewportEnd = viewportEnd | 0;\n      boxStart = boxStart | 0;\n      boxEnd = boxEnd | 0;\n      revealAtStart = !!revealAtStart;\n      revealAtEnd = !!revealAtEnd;\n      const viewportLength = viewportEnd - viewportStart;\n      const boxLength = boxEnd - boxStart;\n      if (boxLength < viewportLength) {\n        // The box would fit in the viewport\n        if (revealAtStart) {\n          return boxStart;\n        }\n        if (revealAtEnd) {\n          return Math.max(0, boxEnd - viewportLength);\n        }\n        if (boxStart < viewportStart) {\n          // The box is above the viewport\n          return boxStart;\n        } else if (boxEnd > viewportEnd) {\n          // The box is below the viewport\n          return Math.max(0, boxEnd - viewportLength);\n        }\n      } else {\n        // The box would not fit in the viewport\n        // Reveal the beginning of the box\n        return boxStart;\n      }\n      return viewportStart;\n    }\n  }\n  return ViewLines;\n})();","map":{"version":3,"names":["MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","RunOnceScheduler","platform","applyFontInfo","HorizontalPosition","HorizontalRange","LineVisibleRanges","VisibleLinesCollection","PartFingerprints","ViewPart","DomReadingContext","ViewLine","ViewLineOptions","Position","Range","LastRenderedData","constructor","_currentVisibleRange","getCurrentVisibleRange","setCurrentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","lineNumber","startColumn","endColumn","startScrollTop","stopScrollTop","scrollType","type","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selections","startLineNumber","endLineNumber","i","len","length","selection","Math","min","max","ViewLines","_","HORIZONTAL_EXTRA_PX","context","linesContent","conf","_context","configuration","options","fontInfo","get","wrappingInfo","_lineHeight","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","theme","_linesContent","_textRangeRestingSpot","document","createElement","_visibleLines","createLine","domNode","write","setClassName","_maxLineWidth","_asyncUpdateLineWidths","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","dispose","getDomNode","onConfigurationChanged","e","hasChanged","_onOptionsMaybeChanged","newViewLineOptions","equals","getStartLineNumber","getEndLineNumber","line","getVisibleLine","onOptionsChanged","onCursorStateChanged","rendStartLineNumber","rendEndLineNumber","r","onSelectionChanged","onDecorationsChanged","onFlushed","shouldRender","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","desiredScrollTop","_computeScrollTopToRevealRange","viewLayout","getFutureViewport","source","range","verticalType","newScrollPosition","validateScrollPosition","scrollTop","revealHorizontal","scrollLeft","getCurrentScrollTop","scrollTopDelta","abs","viewModel","setScrollPosition","onScrollChanged","scrollLeftChanged","scrollTopChanged","setWidth","scrollWidth","onTokensChanged","onZonesChanged","setMaxLineWidth","onThemeChanged","getPositionFromDOMInfo","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getLineCount","getLineMaxColumn","column","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","className","CLASS_NAME","parentElement","getLineWidth","result","getWidth","_updateLineWidthsSlowIfDomDidLayout","linesVisibleRangesForRange","_range","includeNewLines","originalEndLineNumber","intersectRanges","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","coordinatesConverter","convertViewPositionToModelPosition","continuesInNextLine","visibleRangesForLine","getVisibleRangesForRange","currentLineModelLineNumber","ranges","width","outsideRenderedLine","from","_visibleRangesForLineRange","visibleRangeForPosition","position","left","_updateLineWidthsFast","_updateLineWidths","didDomLayout","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","prepareRender","Error","render","renderText","viewportData","renderLines","visibleRange","getScrollWidth","setHeight","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","schedule","isLinux","setLayerHinting","setContain","adjustedScrollTop","bigNumbersDelta","setTop","setLeft","getCurrentScrollLeft","iLineWidth","ceil","viewport","viewportStartY","top","viewportHeight","height","viewportEndY","boxIsSingleRange","boxStartY","boxEndY","getVerticalOffsetForLineNumber","shouldIgnoreScrollOff","paddingTop","paddingBottom","maxLinesInViewport","surroundingLines","newScrollTop","desiredGapAbove","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","layoutInfo","viewportStartX","viewportEndX","verticalScrollbarWidth","boxStartX","boxEndX","round","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","boxLength"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    /**\n     * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n     */\n    static { this.HORIZONTAL_EXTRA_PX = 30; }\n    constructor(context, linesContent) {\n        super(context);\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(101 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection({\n            createLine: () => new ViewLine(this._viewLineOptions),\n        });\n        this.domNode = this._visibleLines.domNode;\n        PartFingerprints.write(this.domNode, 8 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(116 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(116 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(147 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(101 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(116 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(116 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(146 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const continuesInNextLine = lineNumber !== range.endLineNumber;\n            const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const maxLinesInViewport = (viewportHeight / this._lineHeight);\n            const surroundingLines = Math.max(this._cursorSurroundingLines, this._stickyScrollEnabled ? this._maxNumberStickyLines : 0);\n            const context = Math.min(maxLinesInViewport / 2, surroundingLines);\n            paddingTop = context * this._lineHeight;\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(146 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}