{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Event, PauseableEmitter } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { stringify } from '../../../common/marshalling.js';\nimport { isObject, isUndefinedOrNull } from '../../../common/types.js';\nexport var StorageHint = /*#__PURE__*/function (StorageHint) {\n  // A hint to the storage that the storage\n  // does not exist on disk yet. This allows\n  // the storage library to improve startup\n  // time by not checking the storage for data.\n  StorageHint[StorageHint[\"STORAGE_DOES_NOT_EXIST\"] = 0] = \"STORAGE_DOES_NOT_EXIST\";\n  // A hint to the storage that the storage\n  // is backed by an in-memory storage.\n  StorageHint[StorageHint[\"STORAGE_IN_MEMORY\"] = 1] = \"STORAGE_IN_MEMORY\";\n  return StorageHint;\n}(StorageHint || {});\nexport var StorageState = /*#__PURE__*/function (StorageState) {\n  StorageState[StorageState[\"None\"] = 0] = \"None\";\n  StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n  StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n  return StorageState;\n}(StorageState || {});\nexport let Storage = /*#__PURE__*/(() => {\n  class Storage extends Disposable {\n    static #_ = this.DEFAULT_FLUSH_DELAY = 100;\n    constructor(database, options = Object.create(null)) {\n      super();\n      this.database = database;\n      this.options = options;\n      this._onDidChangeStorage = this._register(new PauseableEmitter());\n      this.onDidChangeStorage = this._onDidChangeStorage.event;\n      this.state = StorageState.None;\n      this.cache = new Map();\n      this.flushDelayer = this._register(new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY));\n      this.pendingDeletes = new Set();\n      this.pendingInserts = new Map();\n      this.whenFlushedCallbacks = [];\n      this.registerListeners();\n    }\n    registerListeners() {\n      this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n    }\n    onDidChangeItemsExternal(e) {\n      this._onDidChangeStorage.pause();\n      try {\n        // items that change external require us to update our\n        // caches with the values. we just accept the value and\n        // emit an event if there is a change.\n        e.changed?.forEach((value, key) => this.acceptExternal(key, value));\n        e.deleted?.forEach(key => this.acceptExternal(key, undefined));\n      } finally {\n        this._onDidChangeStorage.resume();\n      }\n    }\n    acceptExternal(key, value) {\n      if (this.state === StorageState.Closed) {\n        return; // Return early if we are already closed\n      }\n      let changed = false;\n      // Item got removed, check for deletion\n      if (isUndefinedOrNull(value)) {\n        changed = this.cache.delete(key);\n      }\n      // Item got updated, check for change\n      else {\n        const currentValue = this.cache.get(key);\n        if (currentValue !== value) {\n          this.cache.set(key, value);\n          changed = true;\n        }\n      }\n      // Signal to outside listeners\n      if (changed) {\n        this._onDidChangeStorage.fire({\n          key,\n          external: true\n        });\n      }\n    }\n    get(key, fallbackValue) {\n      const value = this.cache.get(key);\n      if (isUndefinedOrNull(value)) {\n        return fallbackValue;\n      }\n      return value;\n    }\n    getBoolean(key, fallbackValue) {\n      const value = this.get(key);\n      if (isUndefinedOrNull(value)) {\n        return fallbackValue;\n      }\n      return value === 'true';\n    }\n    getNumber(key, fallbackValue) {\n      const value = this.get(key);\n      if (isUndefinedOrNull(value)) {\n        return fallbackValue;\n      }\n      return parseInt(value, 10);\n    }\n    set(_x, _x2) {\n      var _this = this;\n      return _asyncToGenerator(function* (key, value, external = false) {\n        if (_this.state === StorageState.Closed) {\n          return; // Return early if we are already closed\n        }\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n          return _this.delete(key, external);\n        }\n        // Otherwise, convert to String and store\n        const valueStr = isObject(value) || Array.isArray(value) ? stringify(value) : String(value);\n        // Return early if value already set\n        const currentValue = _this.cache.get(key);\n        if (currentValue === valueStr) {\n          return;\n        }\n        // Update in cache and pending\n        _this.cache.set(key, valueStr);\n        _this.pendingInserts.set(key, valueStr);\n        _this.pendingDeletes.delete(key);\n        // Event\n        _this._onDidChangeStorage.fire({\n          key,\n          external\n        });\n        // Accumulate work by scheduling after timeout\n        return _this.doFlush();\n      }).apply(this, arguments);\n    }\n    delete(_x3) {\n      var _this2 = this;\n      return _asyncToGenerator(function* (key, external = false) {\n        if (_this2.state === StorageState.Closed) {\n          return; // Return early if we are already closed\n        }\n        // Remove from cache and add to pending\n        const wasDeleted = _this2.cache.delete(key);\n        if (!wasDeleted) {\n          return; // Return early if value already deleted\n        }\n        if (!_this2.pendingDeletes.has(key)) {\n          _this2.pendingDeletes.add(key);\n        }\n        _this2.pendingInserts.delete(key);\n        // Event\n        _this2._onDidChangeStorage.fire({\n          key,\n          external\n        });\n        // Accumulate work by scheduling after timeout\n        return _this2.doFlush();\n      }).apply(this, arguments);\n    }\n    get hasPending() {\n      return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n    }\n    flushPending() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this3.hasPending) {\n          return; // return early if nothing to do\n        }\n        // Get pending data\n        const updateRequest = {\n          insert: _this3.pendingInserts,\n          delete: _this3.pendingDeletes\n        };\n        // Reset pending data for next run\n        _this3.pendingDeletes = new Set();\n        _this3.pendingInserts = new Map();\n        // Update in storage and release any\n        // waiters we have once done\n        return _this3.database.updateItems(updateRequest).finally(() => {\n          if (!_this3.hasPending) {\n            while (_this3.whenFlushedCallbacks.length) {\n              _this3.whenFlushedCallbacks.pop()?.();\n            }\n          }\n        });\n      })();\n    }\n    doFlush(delay) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        if (_this4.options.hint === StorageHint.STORAGE_IN_MEMORY) {\n          return _this4.flushPending(); // return early if in-memory\n        }\n        return _this4.flushDelayer.trigger(() => _this4.flushPending(), delay);\n      })();\n    }\n  }\n  return Storage;\n})();\nexport class InMemoryStorageDatabase {\n  constructor() {\n    this.onDidChangeItemsExternal = Event.None;\n    this.items = new Map();\n  }\n  updateItems(request) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      request.insert?.forEach((value, key) => _this5.items.set(key, value));\n      request.delete?.forEach(key => _this5.items.delete(key));\n    })();\n  }\n}","map":{"version":3,"names":["ThrottledDelayer","Event","PauseableEmitter","Disposable","stringify","isObject","isUndefinedOrNull","StorageHint","StorageState","Storage","_","DEFAULT_FLUSH_DELAY","constructor","database","options","Object","create","_onDidChangeStorage","_register","onDidChangeStorage","event","state","None","cache","Map","flushDelayer","pendingDeletes","Set","pendingInserts","whenFlushedCallbacks","registerListeners","onDidChangeItemsExternal","e","pause","changed","forEach","value","key","acceptExternal","deleted","undefined","resume","Closed","delete","currentValue","get","set","fire","external","fallbackValue","getBoolean","getNumber","parseInt","_x","_x2","_this","_asyncToGenerator","valueStr","Array","isArray","String","doFlush","apply","arguments","_x3","_this2","wasDeleted","has","add","hasPending","size","flushPending","_this3","updateRequest","insert","updateItems","finally","length","pop","delay","_this4","hint","STORAGE_IN_MEMORY","trigger","InMemoryStorageDatabase","items","request","_this5"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/base/parts/storage/common/storage.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Event, PauseableEmitter } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { stringify } from '../../../common/marshalling.js';\nimport { isObject, isUndefinedOrNull } from '../../../common/types.js';\nexport var StorageHint;\n(function (StorageHint) {\n    // A hint to the storage that the storage\n    // does not exist on disk yet. This allows\n    // the storage library to improve startup\n    // time by not checking the storage for data.\n    StorageHint[StorageHint[\"STORAGE_DOES_NOT_EXIST\"] = 0] = \"STORAGE_DOES_NOT_EXIST\";\n    // A hint to the storage that the storage\n    // is backed by an in-memory storage.\n    StorageHint[StorageHint[\"STORAGE_IN_MEMORY\"] = 1] = \"STORAGE_IN_MEMORY\";\n})(StorageHint || (StorageHint = {}));\nexport var StorageState;\n(function (StorageState) {\n    StorageState[StorageState[\"None\"] = 0] = \"None\";\n    StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n    StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n})(StorageState || (StorageState = {}));\nexport class Storage extends Disposable {\n    static { this.DEFAULT_FLUSH_DELAY = 100; }\n    constructor(database, options = Object.create(null)) {\n        super();\n        this.database = database;\n        this.options = options;\n        this._onDidChangeStorage = this._register(new PauseableEmitter());\n        this.onDidChangeStorage = this._onDidChangeStorage.event;\n        this.state = StorageState.None;\n        this.cache = new Map();\n        this.flushDelayer = this._register(new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY));\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        this.whenFlushedCallbacks = [];\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n    }\n    onDidChangeItemsExternal(e) {\n        this._onDidChangeStorage.pause();\n        try {\n            // items that change external require us to update our\n            // caches with the values. we just accept the value and\n            // emit an event if there is a change.\n            e.changed?.forEach((value, key) => this.acceptExternal(key, value));\n            e.deleted?.forEach(key => this.acceptExternal(key, undefined));\n        }\n        finally {\n            this._onDidChangeStorage.resume();\n        }\n    }\n    acceptExternal(key, value) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        let changed = false;\n        // Item got removed, check for deletion\n        if (isUndefinedOrNull(value)) {\n            changed = this.cache.delete(key);\n        }\n        // Item got updated, check for change\n        else {\n            const currentValue = this.cache.get(key);\n            if (currentValue !== value) {\n                this.cache.set(key, value);\n                changed = true;\n            }\n        }\n        // Signal to outside listeners\n        if (changed) {\n            this._onDidChangeStorage.fire({ key, external: true });\n        }\n    }\n    get(key, fallbackValue) {\n        const value = this.cache.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value;\n    }\n    getBoolean(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value === 'true';\n    }\n    getNumber(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return parseInt(value, 10);\n    }\n    async set(key, value, external = false) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            return this.delete(key, external);\n        }\n        // Otherwise, convert to String and store\n        const valueStr = isObject(value) || Array.isArray(value) ? stringify(value) : String(value);\n        // Return early if value already set\n        const currentValue = this.cache.get(key);\n        if (currentValue === valueStr) {\n            return;\n        }\n        // Update in cache and pending\n        this.cache.set(key, valueStr);\n        this.pendingInserts.set(key, valueStr);\n        this.pendingDeletes.delete(key);\n        // Event\n        this._onDidChangeStorage.fire({ key, external });\n        // Accumulate work by scheduling after timeout\n        return this.doFlush();\n    }\n    async delete(key, external = false) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        // Remove from cache and add to pending\n        const wasDeleted = this.cache.delete(key);\n        if (!wasDeleted) {\n            return; // Return early if value already deleted\n        }\n        if (!this.pendingDeletes.has(key)) {\n            this.pendingDeletes.add(key);\n        }\n        this.pendingInserts.delete(key);\n        // Event\n        this._onDidChangeStorage.fire({ key, external });\n        // Accumulate work by scheduling after timeout\n        return this.doFlush();\n    }\n    get hasPending() {\n        return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n    }\n    async flushPending() {\n        if (!this.hasPending) {\n            return; // return early if nothing to do\n        }\n        // Get pending data\n        const updateRequest = { insert: this.pendingInserts, delete: this.pendingDeletes };\n        // Reset pending data for next run\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        // Update in storage and release any\n        // waiters we have once done\n        return this.database.updateItems(updateRequest).finally(() => {\n            if (!this.hasPending) {\n                while (this.whenFlushedCallbacks.length) {\n                    this.whenFlushedCallbacks.pop()?.();\n                }\n            }\n        });\n    }\n    async doFlush(delay) {\n        if (this.options.hint === StorageHint.STORAGE_IN_MEMORY) {\n            return this.flushPending(); // return early if in-memory\n        }\n        return this.flushDelayer.trigger(() => this.flushPending(), delay);\n    }\n}\nexport class InMemoryStorageDatabase {\n    constructor() {\n        this.onDidChangeItemsExternal = Event.None;\n        this.items = new Map();\n    }\n    async updateItems(request) {\n        request.insert?.forEach((value, key) => this.items.set(key, value));\n        request.delete?.forEach(key => this.items.delete(key));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}