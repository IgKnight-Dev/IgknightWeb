{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { ObjectTreeElementCollapseState, TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n  return {\n    ...props,\n    children: [],\n    refreshPromise: undefined,\n    stale: true,\n    slow: false,\n    forceExpanded: false\n  };\n}\nfunction isAncestor(ancestor, descendant) {\n  if (!descendant.parent) {\n    return false;\n  } else if (descendant.parent === ancestor) {\n    return true;\n  } else {\n    return isAncestor(ancestor, descendant.parent);\n  }\n}\nfunction intersects(node, other) {\n  return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n  get element() {\n    return this.node.element.element;\n  }\n  get children() {\n    return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass AsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    this.renderer.disposeElement?.(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n  }\n}\nfunction asTreeEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    elements: e.elements.map(e => e.element)\n  };\n}\nfunction asTreeMouseEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    element: e.element && e.element.element,\n    target: e.target\n  };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new AsyncDataTreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n  constructor(dnd) {\n    this.dnd = dnd;\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    this.dnd.onDragStart?.(asAsyncDataTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, targetSector, originalEvent, raw = true) {\n    return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n  }\n  drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n    this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    this.dnd.onDragEnd?.(originalEvent);\n  }\n  dispose() {\n    this.dnd.dispose();\n  }\n}\nfunction asObjectTreeOptions(options) {\n  return options && {\n    ...options,\n    collapseByDefault: true,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent({\n          ...e,\n          element: e.element\n        });\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent({\n          ...e,\n          element: e.element\n        });\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && {\n      ...options.accessibilityProvider,\n      getPosInSet: undefined,\n      getSetSize: undefined,\n      getRole: options.accessibilityProvider.getRole ? el => {\n        return options.accessibilityProvider.getRole(el.element);\n      } : () => 'treeitem',\n      isChecked: options.accessibilityProvider.isChecked ? e => {\n        return !!options.accessibilityProvider?.isChecked(e.element);\n      } : undefined,\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n        return options.accessibilityProvider.getAriaLevel(node.element);\n      }),\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    },\n    filter: options.filter && {\n      filter(e, parentVisibility) {\n        return options.filter.filter(e.element, parentVisibility);\n      }\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      ...options.keyboardNavigationLabelProvider,\n      getKeyboardNavigationLabel(e) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n      }\n    },\n    sorter: undefined,\n    expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : e => options.expandOnlyOnTwistieClick(e.element),\n    defaultFindVisibility: e => {\n      if (e.hasChildren && e.stale) {\n        return 1 /* TreeVisibility.Visible */;\n      } else if (typeof options.defaultFindVisibility === 'number') {\n        return options.defaultFindVisibility;\n      } else if (typeof options.defaultFindVisibility === 'undefined') {\n        return 2 /* TreeVisibility.Recurse */;\n      } else {\n        return options.defaultFindVisibility(e.element);\n      }\n    }\n  };\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n  get onDidScroll() {\n    return this.tree.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n  }\n  get onDidChangeSelection() {\n    return Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n  }\n  get onMouseDblClick() {\n    return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n  }\n  get onPointer() {\n    return Event.map(this.tree.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.tree.onDidFocus;\n  }\n  /**\n   * To be used internally only!\n   * @deprecated\n   */\n  get onDidChangeModel() {\n    return this.tree.onDidChangeModel;\n  }\n  get onDidChangeCollapseState() {\n    return this.tree.onDidChangeCollapseState;\n  }\n  get onDidChangeFindOpenState() {\n    return this.tree.onDidChangeFindOpenState;\n  }\n  get onDidChangeStickyScrollFocused() {\n    return this.tree.onDidChangeStickyScrollFocused;\n  }\n  get onDidDispose() {\n    return this.tree.onDidDispose;\n  }\n  constructor(user, container, delegate, renderers, dataSource, options = {}) {\n    this.user = user;\n    this.dataSource = dataSource;\n    this.nodes = new Map();\n    this.subTreeRefreshPromises = new Map();\n    this.refreshPromises = new Map();\n    this._onDidRender = new Emitter();\n    this._onDidChangeNodeSlowState = new Emitter();\n    this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n    this.disposables = new DisposableStore();\n    this.identityProvider = options.identityProvider;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.sorter = options.sorter;\n    this.getDefaultCollapseState = e => options.collapseByDefault ? options.collapseByDefault(e) ? ObjectTreeElementCollapseState.PreserveOrCollapsed : ObjectTreeElementCollapseState.PreserveOrExpanded : undefined;\n    this.tree = this.createTree(user, container, delegate, renderers, options);\n    this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n    this.onDidChangeFindMatchType = this.tree.onDidChangeFindMatchType;\n    this.root = createAsyncDataTreeNode({\n      element: undefined,\n      parent: null,\n      hasChildren: true,\n      defaultCollapseState: undefined\n    });\n    if (this.identityProvider) {\n      this.root = {\n        ...this.root,\n        id: null\n      };\n    }\n    this.nodes.set(null, this.root);\n    this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asObjectTreeOptions(options) || {};\n    return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.tree.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.tree.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.tree.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.tree.scrollHeight;\n  }\n  get renderHeight() {\n    return this.tree.renderHeight;\n  }\n  domFocus() {\n    this.tree.domFocus();\n  }\n  layout(height, width) {\n    this.tree.layout(height, width);\n  }\n  style(styles) {\n    this.tree.style(styles);\n  }\n  // Model\n  getInput() {\n    return this.root.element;\n  }\n  setInput(input, viewState) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.refreshPromises.forEach(promise => promise.cancel());\n      _this.refreshPromises.clear();\n      _this.root.element = input;\n      const viewStateContext = viewState && {\n        viewState,\n        focus: [],\n        selection: []\n      };\n      yield _this._updateChildren(input, true, false, viewStateContext);\n      if (viewStateContext) {\n        _this.tree.setFocus(viewStateContext.focus);\n        _this.tree.setSelection(viewStateContext.selection);\n      }\n      if (viewState && typeof viewState.scrollTop === 'number') {\n        _this.scrollTop = viewState.scrollTop;\n      }\n    })();\n  }\n  _updateChildren() {\n    var _this2 = this;\n    return _asyncToGenerator(function* (element = _this2.root.element, recursive = true, rerender = false, viewStateContext, options) {\n      if (typeof _this2.root.element === 'undefined') {\n        throw new TreeError(_this2.user, 'Tree input not set');\n      }\n      if (_this2.root.refreshPromise) {\n        yield _this2.root.refreshPromise;\n        yield Event.toPromise(_this2._onDidRender.event);\n      }\n      const node = _this2.getDataNode(element);\n      yield _this2.refreshAndRenderNode(node, recursive, viewStateContext, options);\n      if (rerender) {\n        try {\n          _this2.tree.rerender(node);\n        } catch {\n          // missing nodes are fine, this could've resulted from\n          // parallel refresh calls, removing `node` altogether\n        }\n      }\n    }).apply(this, arguments);\n  }\n  // View\n  rerender(element) {\n    if (element === undefined || element === this.root.element) {\n      this.tree.rerender();\n      return;\n    }\n    const node = this.getDataNode(element);\n    this.tree.rerender(node);\n  }\n  // Tree\n  getNode(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n    return this.nodeMapper.map(node);\n  }\n  collapse(element, recursive = false) {\n    const node = this.getDataNode(element);\n    return this.tree.collapse(node === this.root ? null : node, recursive);\n  }\n  expand(_x) {\n    var _this3 = this;\n    return _asyncToGenerator(function* (element, recursive = false) {\n      if (typeof _this3.root.element === 'undefined') {\n        throw new TreeError(_this3.user, 'Tree input not set');\n      }\n      if (_this3.root.refreshPromise) {\n        yield _this3.root.refreshPromise;\n        yield Event.toPromise(_this3._onDidRender.event);\n      }\n      const node = _this3.getDataNode(element);\n      if (_this3.tree.hasElement(node) && !_this3.tree.isCollapsible(node)) {\n        return false;\n      }\n      if (node.refreshPromise) {\n        yield _this3.root.refreshPromise;\n        yield Event.toPromise(_this3._onDidRender.event);\n      }\n      if (node !== _this3.root && !node.refreshPromise && !_this3.tree.isCollapsed(node)) {\n        return false;\n      }\n      const result = _this3.tree.expand(node === _this3.root ? null : node, recursive);\n      if (node.refreshPromise) {\n        yield _this3.root.refreshPromise;\n        yield Event.toPromise(_this3._onDidRender.event);\n      }\n      return result;\n    }).apply(this, arguments);\n  }\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setSelection(nodes, browserEvent);\n  }\n  getSelection() {\n    const nodes = this.tree.getSelection();\n    return nodes.map(n => n.element);\n  }\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setFocus(nodes, browserEvent);\n  }\n  getFocus() {\n    const nodes = this.tree.getFocus();\n    return nodes.map(n => n.element);\n  }\n  reveal(element, relativeTop) {\n    this.tree.reveal(this.getDataNode(element), relativeTop);\n  }\n  // Tree navigation\n  getParentElement(element) {\n    const node = this.tree.getParentElement(this.getDataNode(element));\n    return node && node.element;\n  }\n  getFirstElementChild(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n    return node && node.element;\n  }\n  // Implementation\n  getDataNode(element) {\n    const node = this.nodes.get(element === this.root.element ? null : element);\n    if (!node) {\n      throw new TreeError(this.user, `Data tree node not found: ${element}`);\n    }\n    return node;\n  }\n  refreshAndRenderNode(node, recursive, viewStateContext, options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.refreshNode(node, recursive, viewStateContext);\n      if (_this4.disposables.isDisposed) {\n        return; // tree disposed during refresh (#199264)\n      }\n      _this4.render(node, viewStateContext, options);\n    })();\n  }\n  refreshNode(node, recursive, viewStateContext) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      let result;\n      _this5.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n        if (!result && intersects(refreshNode, node)) {\n          result = refreshPromise.then(() => _this5.refreshNode(node, recursive, viewStateContext));\n        }\n      });\n      if (result) {\n        return result;\n      }\n      if (node !== _this5.root) {\n        const treeNode = _this5.tree.getNode(node);\n        if (treeNode.collapsed) {\n          node.hasChildren = !!_this5.dataSource.hasChildren(node.element);\n          node.stale = true;\n          _this5.setChildren(node, [], recursive, viewStateContext);\n          return;\n        }\n      }\n      return _this5.doRefreshSubTree(node, recursive, viewStateContext);\n    })();\n  }\n  doRefreshSubTree(node, recursive, viewStateContext) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      let done;\n      node.refreshPromise = new Promise(c => done = c);\n      _this6.subTreeRefreshPromises.set(node, node.refreshPromise);\n      node.refreshPromise.finally(() => {\n        node.refreshPromise = undefined;\n        _this6.subTreeRefreshPromises.delete(node);\n      });\n      try {\n        const childrenToRefresh = yield _this6.doRefreshNode(node, recursive, viewStateContext);\n        node.stale = false;\n        yield Promises.settled(childrenToRefresh.map(child => _this6.doRefreshSubTree(child, recursive, viewStateContext)));\n      } finally {\n        done();\n      }\n    })();\n  }\n  doRefreshNode(node, recursive, viewStateContext) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      node.hasChildren = !!_this7.dataSource.hasChildren(node.element);\n      let childrenPromise;\n      if (!node.hasChildren) {\n        childrenPromise = Promise.resolve(Iterable.empty());\n      } else {\n        const children = _this7.doGetChildren(node);\n        if (isIterable(children)) {\n          childrenPromise = Promise.resolve(children);\n        } else {\n          const slowTimeout = timeout(800);\n          slowTimeout.then(() => {\n            node.slow = true;\n            _this7._onDidChangeNodeSlowState.fire(node);\n          }, _ => null);\n          childrenPromise = children.finally(() => slowTimeout.cancel());\n        }\n      }\n      try {\n        const children = yield childrenPromise;\n        return _this7.setChildren(node, children, recursive, viewStateContext);\n      } catch (err) {\n        if (node !== _this7.root && _this7.tree.hasElement(node)) {\n          _this7.tree.collapse(node);\n        }\n        if (isCancellationError(err)) {\n          return [];\n        }\n        throw err;\n      } finally {\n        if (node.slow) {\n          node.slow = false;\n          _this7._onDidChangeNodeSlowState.fire(node);\n        }\n      }\n    })();\n  }\n  doGetChildren(node) {\n    var _this8 = this;\n    let result = this.refreshPromises.get(node);\n    if (result) {\n      return result;\n    }\n    const children = this.dataSource.getChildren(node.element);\n    if (isIterable(children)) {\n      return this.processChildren(children);\n    } else {\n      result = createCancelablePromise(/*#__PURE__*/_asyncToGenerator(function* () {\n        return _this8.processChildren(yield children);\n      }));\n      this.refreshPromises.set(node, result);\n      return result.finally(() => {\n        this.refreshPromises.delete(node);\n      });\n    }\n  }\n  _onDidChangeCollapseState({\n    node,\n    deep\n  }) {\n    if (node.element === null) {\n      return;\n    }\n    if (!node.collapsed && node.element.stale) {\n      if (deep) {\n        this.collapse(node.element.element);\n      } else {\n        this.refreshAndRenderNode(node.element, false).catch(onUnexpectedError);\n      }\n    }\n  }\n  setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n    const childrenElements = [...childrenElementsIterable];\n    // perf: if the node was and still is a leaf, avoid all this hassle\n    if (node.children.length === 0 && childrenElements.length === 0) {\n      return [];\n    }\n    const nodesToForget = new Map();\n    const childrenTreeNodesById = new Map();\n    for (const child of node.children) {\n      nodesToForget.set(child.element, child);\n      if (this.identityProvider) {\n        childrenTreeNodesById.set(child.id, {\n          node: child,\n          collapsed: this.tree.hasElement(child) && this.tree.isCollapsed(child)\n        });\n      }\n    }\n    const childrenToRefresh = [];\n    const children = childrenElements.map(element => {\n      const hasChildren = !!this.dataSource.hasChildren(element);\n      if (!this.identityProvider) {\n        const asyncDataTreeNode = createAsyncDataTreeNode({\n          element,\n          parent: node,\n          hasChildren,\n          defaultCollapseState: this.getDefaultCollapseState(element)\n        });\n        if (hasChildren && asyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const id = this.identityProvider.getId(element).toString();\n      const result = childrenTreeNodesById.get(id);\n      if (result) {\n        const asyncDataTreeNode = result.node;\n        nodesToForget.delete(asyncDataTreeNode.element);\n        this.nodes.delete(asyncDataTreeNode.element);\n        this.nodes.set(element, asyncDataTreeNode);\n        asyncDataTreeNode.element = element;\n        asyncDataTreeNode.hasChildren = hasChildren;\n        if (recursive) {\n          if (result.collapsed) {\n            asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n            asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n            asyncDataTreeNode.stale = true;\n          } else {\n            childrenToRefresh.push(asyncDataTreeNode);\n          }\n        } else if (hasChildren && !result.collapsed) {\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const childAsyncDataTreeNode = createAsyncDataTreeNode({\n        element,\n        parent: node,\n        id,\n        hasChildren,\n        defaultCollapseState: this.getDefaultCollapseState(element)\n      });\n      if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n        viewStateContext.focus.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n        viewStateContext.selection.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      } else if (hasChildren && childAsyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      }\n      return childAsyncDataTreeNode;\n    });\n    for (const node of nodesToForget.values()) {\n      dfs(node, node => this.nodes.delete(node.element));\n    }\n    for (const child of children) {\n      this.nodes.set(child.element, child);\n    }\n    node.children.splice(0, node.children.length, ...children);\n    // TODO@joao this doesn't take filter into account\n    if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n      children[0].forceExpanded = true;\n      childrenToRefresh.push(children[0]);\n    }\n    return childrenToRefresh;\n  }\n  render(node, viewStateContext, options) {\n    const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n    const objectTreeOptions = options && {\n      ...options,\n      diffIdentityProvider: options.diffIdentityProvider && {\n        getId(node) {\n          return options.diffIdentityProvider.getId(node.element);\n        }\n      }\n    };\n    this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n    if (node !== this.root) {\n      this.tree.setCollapsible(node, node.hasChildren);\n    }\n    this._onDidRender.fire();\n  }\n  asTreeElement(node, viewStateContext) {\n    if (node.stale) {\n      return {\n        element: node,\n        collapsible: node.hasChildren,\n        collapsed: true\n      };\n    }\n    let collapsed;\n    if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n      collapsed = false;\n    } else if (node.forceExpanded) {\n      collapsed = false;\n      node.forceExpanded = false;\n    } else {\n      collapsed = node.defaultCollapseState;\n    }\n    return {\n      element: node,\n      children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n      collapsible: node.hasChildren,\n      collapsed\n    };\n  }\n  processChildren(children) {\n    if (this.sorter) {\n      children = [...children].sort(this.sorter.compare.bind(this.sorter));\n    }\n    return children;\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.tree.dispose();\n  }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n  get element() {\n    return {\n      elements: this.node.element.elements.map(e => e.element),\n      incompressible: this.node.element.incompressible\n    };\n  }\n  get children() {\n    return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass CompressibleAsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.disposables = [];\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderCompressedElements(node, index, templateData, height) {\n    this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    this.renderer.disposeElement?.(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeCompressedElements(node, index, templateData, height) {\n    this.renderer.disposeCompressedElements?.(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.disposables = dispose(this.disposables);\n  }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n  const objectTreeOptions = options && asObjectTreeOptions(options);\n  return objectTreeOptions && {\n    ...objectTreeOptions,\n    keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && {\n      ...objectTreeOptions.keyboardNavigationLabelProvider,\n      getCompressedNodeKeyboardNavigationLabel(els) {\n        return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n      }\n    }\n  };\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n    super(user, container, virtualDelegate, renderers, dataSource, options);\n    this.compressionDelegate = compressionDelegate;\n    this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n    this.filter = options.filter;\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n    return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  asTreeElement(node, viewStateContext) {\n    return {\n      incompressible: this.compressionDelegate.isIncompressible(node.element),\n      ...super.asTreeElement(node, viewStateContext)\n    };\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  render(node, viewStateContext, options) {\n    if (!this.identityProvider) {\n      return super.render(node, viewStateContext);\n    }\n    // Preserve traits across compressions. Hacky but does the trick.\n    // This is hard to fix properly since it requires rewriting the traits\n    // across trees and lists. Let's just keep it this way for now.\n    const getId = element => this.identityProvider.getId(element).toString();\n    const getUncompressedIds = nodes => {\n      const result = new Set();\n      for (const node of nodes) {\n        const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n        if (!compressedNode.element) {\n          continue;\n        }\n        for (const node of compressedNode.element.elements) {\n          result.add(getId(node.element));\n        }\n      }\n      return result;\n    };\n    const oldSelection = getUncompressedIds(this.tree.getSelection());\n    const oldFocus = getUncompressedIds(this.tree.getFocus());\n    super.render(node, viewStateContext, options);\n    const selection = this.getSelection();\n    let didChangeSelection = false;\n    const focus = this.getFocus();\n    let didChangeFocus = false;\n    const visit = node => {\n      const compressedNode = node.element;\n      if (compressedNode) {\n        for (let i = 0; i < compressedNode.elements.length; i++) {\n          const id = getId(compressedNode.elements[i].element);\n          const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n          // github.com/microsoft/vscode/issues/85938\n          if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n            selection.push(element);\n            didChangeSelection = true;\n          }\n          if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n            focus.push(element);\n            didChangeFocus = true;\n          }\n        }\n      }\n      node.children.forEach(visit);\n    };\n    visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n    if (didChangeSelection) {\n      this.setSelection(selection);\n    }\n    if (didChangeFocus) {\n      this.setFocus(focus);\n    }\n  }\n  // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n  // and we have to filter everything beforehand\n  // Related to #85193 and #85835\n  processChildren(children) {\n    if (this.filter) {\n      children = Iterable.filter(children, e => {\n        const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n        const visibility = getVisibility(result);\n        if (visibility === 2 /* TreeVisibility.Recurse */) {\n          throw new Error('Recursive tree visibility not supported in async data compressed trees');\n        }\n        return visibility === 1 /* TreeVisibility.Visible */;\n      });\n    }\n    return super.processChildren(children);\n  }\n}\nfunction getVisibility(filterResult) {\n  if (typeof filterResult === 'boolean') {\n    return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n  } else if (isFilterResult(filterResult)) {\n    return getVisibleState(filterResult.visibility);\n  } else {\n    return getVisibleState(filterResult);\n  }\n}","map":{"version":3,"names":["ElementsDragAndDropData","ComposedTreeDelegate","getVisibleState","isFilterResult","CompressibleObjectTree","ObjectTree","ObjectTreeElementCollapseState","TreeError","WeakMapper","createCancelablePromise","Promises","timeout","Codicon","ThemeIcon","isCancellationError","onUnexpectedError","Emitter","Event","Iterable","DisposableStore","dispose","isIterable","createAsyncDataTreeNode","props","children","refreshPromise","undefined","stale","slow","forceExpanded","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","constructor","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","renderTemplate","container","templateData","renderElement","index","height","renderTwistie","twistieElement","classList","add","asClassNameArray","treeItemLoading","remove","disposeElement","disposeTemplate","clear","asTreeEvent","e","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","getDragLabel","nodes","originalEvent","onDragStart","onDragOver","targetNode","targetIndex","targetSector","raw","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","defaultFindVisibility","hasChildren","dfs","fn","forEach","child","AsyncDataTree","onDidScroll","tree","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","onDidChangeCollapseState","onDidChangeFindOpenState","onDidChangeStickyScrollFocused","onDidDispose","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","getDefaultCollapseState","PreserveOrCollapsed","PreserveOrExpanded","createTree","onDidChangeFindMode","onDidChangeFindMatchType","root","defaultCollapseState","id","set","_onDidChangeCollapseState","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","scrollTop","scrollHeight","renderHeight","domFocus","layout","width","style","styles","getInput","setInput","input","viewState","_this","_asyncToGenerator","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","_this2","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","apply","arguments","getNode","dataNode","collapse","expand","_x","_this3","hasElement","isCollapsible","isCollapsed","result","getSelection","n","getFocus","reveal","relativeTop","getParentElement","getFirstElementChild","get","_this4","refreshNode","isDisposed","render","_this5","then","treeNode","setChildren","doRefreshSubTree","_this6","done","Promise","c","finally","delete","childrenToRefresh","doRefreshNode","settled","_this7","childrenPromise","resolve","empty","doGetChildren","slowTimeout","fire","_","err","_this8","getChildren","processChildren","deep","catch","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { ObjectTreeElementCollapseState, TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return {\n        ...props,\n        children: [],\n        refreshPromise: undefined,\n        stale: true,\n        slow: false,\n        forceExpanded: false\n    };\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        this.renderer.disposeElement?.(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        this.dnd.onDragStart?.(asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, targetSector, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        this.dnd.onDragEnd?.(originalEvent);\n    }\n    dispose() {\n        this.dnd.dispose();\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && {\n        ...options,\n        collapseByDefault: true,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getPosInSet: undefined,\n            getSetSize: undefined,\n            getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem',\n            isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                return !!(options.accessibilityProvider?.isChecked(e.element));\n            } : undefined,\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }),\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            }\n        },\n        sorter: undefined,\n        expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))),\n        defaultFindVisibility: e => {\n            if (e.hasChildren && e.stale) {\n                return 1 /* TreeVisibility.Visible */;\n            }\n            else if (typeof options.defaultFindVisibility === 'number') {\n                return options.defaultFindVisibility;\n            }\n            else if (typeof options.defaultFindVisibility === 'undefined') {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n            else {\n                return options.defaultFindVisibility(e.element);\n            }\n        }\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    get onDidScroll() { return this.tree.onDidScroll; }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    /**\n     * To be used internally only!\n     * @deprecated\n     */\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidChangeStickyScrollFocused() { return this.tree.onDidChangeStickyScrollFocused; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.getDefaultCollapseState = e => options.collapseByDefault ? (options.collapseByDefault(e) ? ObjectTreeElementCollapseState.PreserveOrCollapsed : ObjectTreeElementCollapseState.PreserveOrExpanded) : undefined;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.onDidChangeFindMatchType = this.tree.onDidChangeFindMatchType;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true,\n            defaultCollapseState: undefined\n        });\n        if (this.identityProvider) {\n            this.root = {\n                ...this.root,\n                id: null\n            };\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.tree.scrollHeight;\n    }\n    get renderHeight() {\n        return this.tree.renderHeight;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    async setInput(input, viewState) {\n        this.refreshPromises.forEach(promise => promise.cancel());\n        this.refreshPromises.clear();\n        this.root.element = input;\n        const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n        await this._updateChildren(input, true, false, viewStateContext);\n        if (viewStateContext) {\n            this.tree.setFocus(viewStateContext.focus);\n            this.tree.setSelection(viewStateContext.selection);\n        }\n        if (viewState && typeof viewState.scrollTop === 'number') {\n            this.scrollTop = viewState.scrollTop;\n        }\n    }\n    async _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        await this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n        if (rerender) {\n            try {\n                this.tree.rerender(node);\n            }\n            catch {\n                // missing nodes are fine, this could've resulted from\n                // parallel refresh calls, removing `node` altogether\n            }\n        }\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    async expand(element, recursive = false) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n            return false;\n        }\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n            return false;\n        }\n        const result = this.tree.expand(node === this.root ? null : node, recursive);\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        return result;\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    async refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        await this.refreshNode(node, recursive, viewStateContext);\n        if (this.disposables.isDisposed) {\n            return; // tree disposed during refresh (#199264)\n        }\n        this.render(node, viewStateContext, options);\n    }\n    async refreshNode(node, recursive, viewStateContext) {\n        let result;\n        this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n            if (!result && intersects(refreshNode, node)) {\n                result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n            }\n        });\n        if (result) {\n            return result;\n        }\n        if (node !== this.root) {\n            const treeNode = this.tree.getNode(node);\n            if (treeNode.collapsed) {\n                node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                node.stale = true;\n                this.setChildren(node, [], recursive, viewStateContext);\n                return;\n            }\n        }\n        return this.doRefreshSubTree(node, recursive, viewStateContext);\n    }\n    async doRefreshSubTree(node, recursive, viewStateContext) {\n        let done;\n        node.refreshPromise = new Promise(c => done = c);\n        this.subTreeRefreshPromises.set(node, node.refreshPromise);\n        node.refreshPromise.finally(() => {\n            node.refreshPromise = undefined;\n            this.subTreeRefreshPromises.delete(node);\n        });\n        try {\n            const childrenToRefresh = await this.doRefreshNode(node, recursive, viewStateContext);\n            node.stale = false;\n            await Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n        }\n        finally {\n            done();\n        }\n    }\n    async doRefreshNode(node, recursive, viewStateContext) {\n        node.hasChildren = !!this.dataSource.hasChildren(node.element);\n        let childrenPromise;\n        if (!node.hasChildren) {\n            childrenPromise = Promise.resolve(Iterable.empty());\n        }\n        else {\n            const children = this.doGetChildren(node);\n            if (isIterable(children)) {\n                childrenPromise = Promise.resolve(children);\n            }\n            else {\n                const slowTimeout = timeout(800);\n                slowTimeout.then(() => {\n                    node.slow = true;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }, _ => null);\n                childrenPromise = children.finally(() => slowTimeout.cancel());\n            }\n        }\n        try {\n            const children = await childrenPromise;\n            return this.setChildren(node, children, recursive, viewStateContext);\n        }\n        catch (err) {\n            if (node !== this.root && this.tree.hasElement(node)) {\n                this.tree.collapse(node);\n            }\n            if (isCancellationError(err)) {\n                return [];\n            }\n            throw err;\n        }\n        finally {\n            if (node.slow) {\n                node.slow = false;\n                this._onDidChangeNodeSlowState.fire(node);\n            }\n        }\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(async () => this.processChildren(await children));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                childrenTreeNodesById.set(child.id, { node: child, collapsed: this.tree.hasElement(child) && this.tree.isCollapsed(child) });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n                if (hasChildren && asyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && !result.collapsed) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && childAsyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].forceExpanded = true;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && {\n            ...options,\n            diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            }\n        };\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else if (node.forceExpanded) {\n            collapsed = false;\n            node.forceExpanded = false;\n        }\n        else {\n            collapsed = node.defaultCollapseState;\n        }\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.tree.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        this.renderer.disposeElement?.(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        this.renderer.disposeCompressedElements?.(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && {\n        ...objectTreeOptions,\n        keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && {\n            ...objectTreeOptions.keyboardNavigationLabelProvider,\n            getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            }\n        }\n    };\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return {\n            incompressible: this.compressionDelegate.isIncompressible(node.element),\n            ...super.asTreeElement(node, viewStateContext)\n        };\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext, options) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext, options);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}