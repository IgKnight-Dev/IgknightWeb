{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, computed, effect, untracked, inject, Injector, isDevMode, makeEnvironmentProviders, provideEnvironmentInitializer, NgModule, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, withLatestFrom, scan, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nimport { toSignal } from '@angular/core/rxjs-interop';\nconst REGISTERED_ACTION_TYPES = {};\nfunction resetRegisteredActionTypes() {\n  for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n    delete REGISTERED_ACTION_TYPES[key];\n  }\n}\n\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nfunction createAction(type, config) {\n  REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n  if (typeof config === 'function') {\n    return defineType(type, (...args) => ({\n      ...config(...args),\n      type\n    }));\n  }\n  const as = config ? config._as : 'empty';\n  switch (as) {\n    case 'empty':\n      return defineType(type, () => ({\n        type\n      }));\n    case 'props':\n      return defineType(type, props => ({\n        ...props,\n        type\n      }));\n    default:\n      throw new Error('Unexpected config.');\n  }\n}\nfunction props() {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return {\n    _as: 'props',\n    _p: undefined\n  };\n}\nfunction union(creators) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return undefined;\n}\nfunction defineType(type, creator) {\n  return Object.defineProperty(creator, 'type', {\n    value: type,\n    writable: false\n  });\n}\nfunction capitalize(text) {\n  return text.charAt(0).toUpperCase() + text.substring(1);\n}\nfunction uncapitalize(text) {\n  return text.charAt(0).toLowerCase() + text.substring(1);\n}\nfunction assertDefined(value, name) {\n  if (value === null || value === undefined) {\n    throw new Error(`${name} must be defined.`);\n  }\n}\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nfunction createActionGroup(config) {\n  const {\n    source,\n    events\n  } = config;\n  return Object.keys(events).reduce((actionGroup, eventName) => ({\n    ...actionGroup,\n    [toActionName(eventName)]: createAction(toActionType(source, eventName), events[eventName])\n  }), {});\n}\nfunction emptyProps() {\n  return props();\n}\nfunction toActionName(eventName) {\n  return eventName.trim().split(' ').map((word, i) => i === 0 ? uncapitalize(word) : capitalize(word)).join('');\n}\nfunction toActionType(source, eventName) {\n  return `[${source}] ${eventName}`;\n}\nconst INIT = '@ngrx/store/init';\nlet ActionsSubject = /*#__PURE__*/(() => {\n  class ActionsSubject extends BehaviorSubject {\n    constructor() {\n      super({\n        type: INIT\n      });\n    }\n    next(action) {\n      if (typeof action === 'function') {\n        throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n      } else if (typeof action === 'undefined') {\n        throw new TypeError(`Actions must be objects`);\n      } else if (typeof action.type === 'undefined') {\n        throw new TypeError(`Actions must have a type property`);\n      }\n      super.next(action);\n    }\n    complete() {\n      /* noop */\n    }\n    ngOnDestroy() {\n      super.complete();\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function ActionsSubject_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ActionsSubject)();\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ActionsSubject,\n      factory: ActionsSubject.ɵfac\n    });\n  }\n  return ActionsSubject;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\nconst _ROOT_STORE_GUARD = new InjectionToken('@ngrx/store Internal Root Guard');\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nconst USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nconst _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nconst USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');\n/**\n * Runtime checks defined by the user via forRoot()\n */\nconst _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');\n/**\n * Runtime checks currently in use\n */\nconst ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');\nconst _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken('@ngrx/store Check if Action types are unique');\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nconst ROOT_STORE_PROVIDER = new InjectionToken('@ngrx/store Root Store Provider');\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nconst FEATURE_STATE_PROVIDER = new InjectionToken('@ngrx/store Feature State Provider');\n\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nfunction combineReducers(reducers, initialState = {}) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n  return function combination(state, action) {\n    state = state === undefined ? initialState : state;\n    let hasChanged = false;\n    const nextState = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\nfunction omit(object, keyToRemove) {\n  return Object.keys(object).filter(key => key !== keyToRemove).reduce((result, key) => Object.assign(result, {\n    [key]: object[key]\n  }), {});\n}\nfunction compose(...functions) {\n  return function (arg) {\n    if (functions.length === 0) {\n      return arg;\n    }\n    const last = functions[functions.length - 1];\n    const rest = functions.slice(0, -1);\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\nfunction createReducerFactory(reducerFactory, metaReducers) {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    reducerFactory = compose.apply(null, [...metaReducers, reducerFactory]);\n  }\n  return (reducers, initialState) => {\n    const reducer = reducerFactory(reducers);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nfunction createFeatureReducerFactory(metaReducers) {\n  const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0 ? compose(...metaReducers) : r => r;\n  return (reducer, initialState) => {\n    reducer = reducerFactory(reducer);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nclass ReducerObservable extends Observable {}\nclass ReducerManagerDispatcher extends ActionsSubject {}\nconst UPDATE = '@ngrx/store/update-reducers';\nlet ReducerManager = /*#__PURE__*/(() => {\n  class ReducerManager extends BehaviorSubject {\n    get currentReducers() {\n      return this.reducers;\n    }\n    constructor(dispatcher, initialState, reducers, reducerFactory) {\n      super(reducerFactory(reducers, initialState));\n      this.dispatcher = dispatcher;\n      this.initialState = initialState;\n      this.reducers = reducers;\n      this.reducerFactory = reducerFactory;\n    }\n    addFeature(feature) {\n      this.addFeatures([feature]);\n    }\n    addFeatures(features) {\n      const reducers = features.reduce((reducerDict, {\n        reducers,\n        reducerFactory,\n        metaReducers,\n        initialState,\n        key\n      }) => {\n        const reducer = typeof reducers === 'function' ? createFeatureReducerFactory(metaReducers)(reducers, initialState) : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n        reducerDict[key] = reducer;\n        return reducerDict;\n      }, {});\n      this.addReducers(reducers);\n    }\n    removeFeature(feature) {\n      this.removeFeatures([feature]);\n    }\n    removeFeatures(features) {\n      this.removeReducers(features.map(p => p.key));\n    }\n    addReducer(key, reducer) {\n      this.addReducers({\n        [key]: reducer\n      });\n    }\n    addReducers(reducers) {\n      this.reducers = {\n        ...this.reducers,\n        ...reducers\n      };\n      this.updateReducers(Object.keys(reducers));\n    }\n    removeReducer(featureKey) {\n      this.removeReducers([featureKey]);\n    }\n    removeReducers(featureKeys) {\n      featureKeys.forEach(key => {\n        this.reducers = omit(this.reducers, key) /*TODO(#823)*/;\n      });\n      this.updateReducers(featureKeys);\n    }\n    updateReducers(featureKeys) {\n      this.next(this.reducerFactory(this.reducers, this.initialState));\n      this.dispatcher.next({\n        type: UPDATE,\n        features: featureKeys\n      });\n    }\n    ngOnDestroy() {\n      this.complete();\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function ReducerManager_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ReducerManager)(i0.ɵɵinject(ReducerManagerDispatcher), i0.ɵɵinject(INITIAL_STATE), i0.ɵɵinject(INITIAL_REDUCERS), i0.ɵɵinject(REDUCER_FACTORY));\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ReducerManager,\n      factory: ReducerManager.ɵfac\n    });\n  }\n  return ReducerManager;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst REDUCER_MANAGER_PROVIDERS = [ReducerManager, {\n  provide: ReducerObservable,\n  useExisting: ReducerManager\n}, {\n  provide: ReducerManagerDispatcher,\n  useExisting: ActionsSubject\n}];\nlet ScannedActionsSubject = /*#__PURE__*/(() => {\n  class ScannedActionsSubject extends Subject {\n    ngOnDestroy() {\n      this.complete();\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = /* @__PURE__ */(() => {\n      let ɵScannedActionsSubject_BaseFactory;\n      return function ScannedActionsSubject_Factory(__ngFactoryType__) {\n        return (ɵScannedActionsSubject_BaseFactory || (ɵScannedActionsSubject_BaseFactory = i0.ɵɵgetInheritedFactory(ScannedActionsSubject)))(__ngFactoryType__ || ScannedActionsSubject);\n      };\n    })();\n    /** @nocollapse */\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ScannedActionsSubject,\n      factory: ScannedActionsSubject.ɵfac\n    });\n  }\n  return ScannedActionsSubject;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [ScannedActionsSubject];\nclass StateObservable extends Observable {}\nlet State = /*#__PURE__*/(() => {\n  class State extends BehaviorSubject {\n    static #_ = this.INIT = INIT;\n    constructor(actions$, reducer$, scannedActions, initialState) {\n      super(initialState);\n      const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n      const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n      const seed = {\n        state: initialState\n      };\n      const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n      this.stateSubscription = stateAndAction$.subscribe(({\n        state,\n        action\n      }) => {\n        this.next(state);\n        scannedActions.next(action);\n      });\n      this.state = toSignal(this, {\n        manualCleanup: true,\n        requireSync: true\n      });\n    }\n    ngOnDestroy() {\n      this.stateSubscription.unsubscribe();\n      this.complete();\n    }\n    /** @nocollapse */\n    static #_2 = this.ɵfac = function State_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || State)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(INITIAL_STATE));\n    };\n    /** @nocollapse */\n    static #_3 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: State,\n      factory: State.ɵfac\n    });\n  }\n  return State;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction reduceState(stateActionPair = {\n  state: undefined\n}, [action, reducer]) {\n  const {\n    state\n  } = stateActionPair;\n  return {\n    state: reducer(state, action),\n    action\n  };\n}\nconst STATE_PROVIDERS = [State, {\n  provide: StateObservable,\n  useExisting: State\n}];\n\n// disabled because we have lowercase generics for `select`\n/**\n * @description\n * Store is an injectable service that provides reactive state management and a public API for dispatching actions.\n *\n * @usageNotes\n *\n * In a component:\n *\n * ```ts\n * import { Component, inject } from '@angular/core';\n * import { Store } from '@ngrx/store';\n *\n * @Component({\n *  selector: 'app-my-component',\n *  template: `\n *    <div>{{ count() }}</div>\n *    <button (click)=\"increment()\">Increment</button>\n *  `\n * })\n * export class MyComponent {\n *   private store = inject(Store);\n *\n *   count = this.store.selectSignal(state => state.count);\n *\n *   increment() {\n *     this.store.dispatch({ type: 'INCREMENT' });\n *   }\n * }\n * ```\n *\n */\nlet Store = /*#__PURE__*/(() => {\n  class Store extends Observable {\n    constructor(state$, actionsObserver, reducerManager, injector) {\n      super();\n      this.actionsObserver = actionsObserver;\n      this.reducerManager = reducerManager;\n      this.injector = injector;\n      this.source = state$;\n      this.state = state$.state;\n    }\n    /**\n     * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n     */\n    select(pathOrMapFn, ...paths) {\n      return select.call(null, pathOrMapFn, ...paths)(this);\n    }\n    /**\n     * Returns a signal of the provided selector.\n     *\n     * @param selector selector function\n     * @param options select signal options\n     * @returns Signal of the state selected by the provided selector\n     * @usageNotes\n     *\n     * ```ts\n     * const count = this.store.selectSignal(state => state.count);\n     * ```\n     *\n     * Or with a selector created by @ngrx/store!createSelector:function\n     *\n     * ```ts\n     * const selectCount = createSelector(\n     *  (state: State) => state.count,\n     * );\n     *\n     * const count = this.store.selectSignal(selectCount);\n     * ```\n     */\n    selectSignal(selector, options) {\n      return computed(() => selector(this.state()), options);\n    }\n    lift(operator) {\n      const store = new Store(this, this.actionsObserver, this.reducerManager);\n      store.operator = operator;\n      return store;\n    }\n    dispatch(actionOrDispatchFn, config) {\n      if (typeof actionOrDispatchFn === 'function') {\n        return this.processDispatchFn(actionOrDispatchFn, config);\n      }\n      this.actionsObserver.next(actionOrDispatchFn);\n    }\n    next(action) {\n      this.actionsObserver.next(action);\n    }\n    error(err) {\n      this.actionsObserver.error(err);\n    }\n    complete() {\n      this.actionsObserver.complete();\n    }\n    addReducer(key, reducer) {\n      this.reducerManager.addReducer(key, reducer);\n    }\n    removeReducer(key) {\n      this.reducerManager.removeReducer(key);\n    }\n    processDispatchFn(dispatchFn, config) {\n      assertDefined(this.injector, 'Store Injector');\n      const effectInjector = config?.injector ?? getCallerInjector() ?? this.injector;\n      return effect(() => {\n        const action = dispatchFn();\n        untracked(() => this.dispatch(action));\n      }, {\n        injector: effectInjector\n      });\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function Store_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Store)(i0.ɵɵinject(StateObservable), i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerManager), i0.ɵɵinject(i0.Injector));\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Store,\n      factory: Store.ɵfac\n    });\n  }\n  return Store;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STORE_PROVIDERS = [Store];\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n  return function selectOperator(source$) {\n    let mapped$;\n    if (typeof pathOrMapFn === 'string') {\n      const pathSlices = [propsOrPath, ...paths].filter(Boolean);\n      mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = source$.pipe(map(source => pathOrMapFn(source, propsOrPath)));\n    } else {\n      throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` + ` expected 'string' or 'function'`);\n    }\n    return mapped$.pipe(distinctUntilChanged());\n  };\n}\nfunction getCallerInjector() {\n  try {\n    return inject(Injector);\n  } catch (_) {\n    return undefined;\n  }\n}\nconst RUNTIME_CHECK_URL = 'https://ngrx.io/guide/store/configuration/runtime-checks';\nfunction isUndefined(target) {\n  return target === undefined;\n}\nfunction isNull(target) {\n  return target === null;\n}\nfunction isArray(target) {\n  return Array.isArray(target);\n}\nfunction isString(target) {\n  return typeof target === 'string';\n}\nfunction isBoolean(target) {\n  return typeof target === 'boolean';\n}\nfunction isNumber(target) {\n  return typeof target === 'number';\n}\nfunction isObjectLike(target) {\n  return typeof target === 'object' && target !== null;\n}\nfunction isObject(target) {\n  return isObjectLike(target) && !isArray(target);\n}\nfunction isPlainObject(target) {\n  if (!isObject(target)) {\n    return false;\n  }\n  const targetPrototype = Object.getPrototypeOf(target);\n  return targetPrototype === Object.prototype || targetPrototype === null;\n}\nfunction isFunction(target) {\n  return typeof target === 'function';\n}\nfunction isComponent(target) {\n  return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\nfunction hasOwnProperty(target, propertyName) {\n  return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\nlet _ngrxMockEnvironment = false;\nfunction setNgrxMockEnvironment(value) {\n  _ngrxMockEnvironment = value;\n}\nfunction isNgrxMockEnvironment() {\n  return _ngrxMockEnvironment;\n}\nfunction isEqualCheck(a, b) {\n  return a === b;\n}\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n  for (let i = 0; i < args.length; i++) {\n    if (!comparator(args[i], lastArguments[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction resultMemoize(projectionFn, isResultEqual) {\n  return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n  let lastArguments = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n  let lastResult = null;\n  let overrideResult;\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n  function setResult(result = undefined) {\n    overrideResult = {\n      result\n    };\n  }\n  function clearResult() {\n    overrideResult = undefined;\n  }\n  /* eslint-disable prefer-rest-params, prefer-spread */\n  // disabled because of the use of `arguments`\n  function memoized() {\n    if (overrideResult !== undefined) {\n      return overrideResult.result;\n    }\n    if (!lastArguments) {\n      lastResult = projectionFn.apply(null, arguments);\n      lastArguments = arguments;\n      return lastResult;\n    }\n    if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n      return lastResult;\n    }\n    const newResult = projectionFn.apply(null, arguments);\n    lastArguments = arguments;\n    if (isResultEqual(lastResult, newResult)) {\n      return lastResult;\n    }\n    lastResult = newResult;\n    return newResult;\n  }\n  return {\n    memoized,\n    reset,\n    setResult,\n    clearResult\n  };\n}\nfunction createSelector(...input) {\n  return createSelectorFactory(defaultMemoize)(...input);\n}\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n  if (props === undefined) {\n    const args = selectors.map(fn => fn(state));\n    return memoizedProjector.memoized.apply(null, args);\n  }\n  const args = selectors.map(fn => fn(state, props));\n  return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nfunction createSelectorFactory(memoize, options = {\n  stateFn: defaultStateFn\n}) {\n  return function (...input) {\n    let args = input;\n    if (Array.isArray(args[0])) {\n      const [head, ...tail] = args;\n      args = [...head, ...tail];\n    } else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n      args = extractArgsFromSelectorsDictionary(args[0]);\n    }\n    const selectors = args.slice(0, args.length - 1);\n    const projector = args[args.length - 1];\n    const memoizedSelectors = selectors.filter(selector => selector.release && typeof selector.release === 'function');\n    const memoizedProjector = memoize(function (...selectors) {\n      return projector.apply(null, selectors);\n    });\n    const memoizedState = defaultMemoize(function (state, props) {\n      return options.stateFn.apply(null, [state, selectors, props, memoizedProjector]);\n    });\n    function release() {\n      memoizedState.reset();\n      memoizedProjector.reset();\n      memoizedSelectors.forEach(selector => selector.release());\n    }\n    return Object.assign(memoizedState.memoized, {\n      release,\n      projector: memoizedProjector.memoized,\n      setResult: memoizedState.setResult,\n      clearResult: memoizedState.clearResult\n    });\n  };\n}\nfunction createFeatureSelector(featureName) {\n  return createSelector(state => {\n    const featureState = state[featureName];\n    if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n      console.warn(`@ngrx/store: The feature name \"${featureName}\" does ` + 'not exist in the state, therefore createFeatureSelector ' + 'cannot access it.  Be sure it is imported in a loaded module ' + `using StoreModule.forRoot('${featureName}', ...) or ` + `StoreModule.forFeature('${featureName}', ...).  If the default ` + 'state is intended to be undefined, as is the case with router ' + 'state, this development-only warning message can be ignored.');\n    }\n    return featureState;\n  }, featureState => featureState);\n}\nfunction isSelectorsDictionary(selectors) {\n  return !!selectors && typeof selectors === 'object' && Object.values(selectors).every(selector => typeof selector === 'function');\n}\nfunction extractArgsFromSelectorsDictionary(selectorsDictionary) {\n  const selectors = Object.values(selectorsDictionary);\n  const resultKeys = Object.keys(selectorsDictionary);\n  const projector = (...selectorResults) => resultKeys.reduce((result, key, index) => ({\n    ...result,\n    [key]: selectorResults[index]\n  }), {});\n  return [...selectors, projector];\n}\n\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectProductsState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nfunction createFeature(featureConfig) {\n  const {\n    name,\n    reducer,\n    extraSelectors: extraSelectorsFactory\n  } = featureConfig;\n  const featureSelector = createFeatureSelector(name);\n  const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n  const baseSelectors = {\n    [`select${capitalize(name)}State`]: featureSelector,\n    ...nestedSelectors\n  };\n  const extraSelectors = extraSelectorsFactory ? extraSelectorsFactory(baseSelectors) : {};\n  return {\n    name,\n    reducer,\n    ...baseSelectors,\n    ...extraSelectors\n  };\n}\nfunction createNestedSelectors(featureSelector, reducer) {\n  const initialState = getInitialState(reducer);\n  const nestedKeys = isPlainObject(initialState) ? Object.keys(initialState) : [];\n  return nestedKeys.reduce((nestedSelectors, nestedKey) => ({\n    ...nestedSelectors,\n    [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, parentState => parentState?.[nestedKey])\n  }), {});\n}\nfunction getInitialState(reducer) {\n  return reducer(undefined, {\n    type: '@ngrx/feature/init'\n  });\n}\nfunction _createStoreReducers(reducers) {\n  return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\nfunction _createFeatureStore(configs, featureStores) {\n  return featureStores.map((feat, index) => {\n    if (configs[index] instanceof InjectionToken) {\n      const conf = inject(configs[index]);\n      return {\n        key: feat.key,\n        reducerFactory: conf.reducerFactory ? conf.reducerFactory : combineReducers,\n        metaReducers: conf.metaReducers ? conf.metaReducers : [],\n        initialState: conf.initialState\n      };\n    }\n    return feat;\n  });\n}\nfunction _createFeatureReducers(reducerCollection) {\n  return reducerCollection.map(reducer => {\n    return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n  });\n}\nfunction _initialStateFactory(initialState) {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n  return initialState;\n}\nfunction _concatMetaReducers(metaReducers, userProvidedMetaReducers) {\n  return metaReducers.concat(userProvidedMetaReducers);\n}\nfunction _provideForRootGuard() {\n  const store = inject(Store, {\n    optional: true,\n    skipSelf: true\n  });\n  if (store) {\n    throw new TypeError(`The root Store has been provided more than once. Feature modules should provide feature states instead.`);\n  }\n  return 'guarded';\n}\nfunction immutabilityCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    const act = checks.action(action) ? freeze(action) : action;\n    const nextState = reducer(state, act);\n    return checks.state() ? freeze(nextState) : nextState;\n  };\n}\nfunction freeze(target) {\n  Object.freeze(target);\n  const targetIsFunction = isFunction(target);\n  Object.getOwnPropertyNames(target).forEach(prop => {\n    // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n    if (prop.startsWith('ɵ')) {\n      return;\n    }\n    if (hasOwnProperty(target, prop) && (targetIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true)) {\n      const propValue = target[prop];\n      if ((isObjectLike(propValue) || isFunction(propValue)) && !Object.isFrozen(propValue)) {\n        freeze(propValue);\n      }\n    }\n  });\n  return target;\n}\nfunction serializationCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action)) {\n      const unserializableAction = getUnserializable(action);\n      throwIfUnserializable(unserializableAction, 'action');\n    }\n    const nextState = reducer(state, action);\n    if (checks.state()) {\n      const unserializableState = getUnserializable(nextState);\n      throwIfUnserializable(unserializableState, 'state');\n    }\n    return nextState;\n  };\n}\nfunction getUnserializable(target, path = []) {\n  // Guard against undefined and null, e.g. a reducer that returns undefined\n  if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n    return {\n      path: ['root'],\n      value: target\n    };\n  }\n  const keys = Object.keys(target);\n  return keys.reduce((result, key) => {\n    if (result) {\n      return result;\n    }\n    const value = target[key];\n    // Ignore Ivy components\n    if (isComponent(value)) {\n      return result;\n    }\n    if (isUndefined(value) || isNull(value) || isNumber(value) || isBoolean(value) || isString(value) || isArray(value)) {\n      return false;\n    }\n    if (isPlainObject(value)) {\n      return getUnserializable(value, [...path, key]);\n    }\n    return {\n      path: [...path, key],\n      value\n    };\n  }, false);\n}\nfunction throwIfUnserializable(unserializable, context) {\n  if (unserializable === false) {\n    return;\n  }\n  const unserializablePath = unserializable.path.join('.');\n  const error = new Error(`Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`);\n  error.value = unserializable.value;\n  error.unserializablePath = unserializablePath;\n  throw error;\n}\nfunction inNgZoneAssertMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action) && !i0.NgZone.isInAngularZone()) {\n      throw new Error(`Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`);\n    }\n    return reducer(state, action);\n  };\n}\nfunction createActiveRuntimeChecks(runtimeChecks) {\n  if (isDevMode()) {\n    return {\n      strictStateSerializability: false,\n      strictActionSerializability: false,\n      strictStateImmutability: true,\n      strictActionImmutability: true,\n      strictActionWithinNgZone: false,\n      strictActionTypeUniqueness: false,\n      ...runtimeChecks\n    };\n  }\n  return {\n    strictStateSerializability: false,\n    strictActionSerializability: false,\n    strictStateImmutability: false,\n    strictActionImmutability: false,\n    strictActionWithinNgZone: false,\n    strictActionTypeUniqueness: false\n  };\n}\nfunction createSerializationCheckMetaReducer({\n  strictActionSerializability,\n  strictStateSerializability\n}) {\n  return reducer => strictActionSerializability || strictStateSerializability ? serializationCheckMetaReducer(reducer, {\n    action: action => strictActionSerializability && !ignoreNgrxAction(action),\n    state: () => strictStateSerializability\n  }) : reducer;\n}\nfunction createImmutabilityCheckMetaReducer({\n  strictActionImmutability,\n  strictStateImmutability\n}) {\n  return reducer => strictActionImmutability || strictStateImmutability ? immutabilityCheckMetaReducer(reducer, {\n    action: action => strictActionImmutability && !ignoreNgrxAction(action),\n    state: () => strictStateImmutability\n  }) : reducer;\n}\nfunction ignoreNgrxAction(action) {\n  return action.type.startsWith('@ngrx');\n}\nfunction createInNgZoneCheckMetaReducer({\n  strictActionWithinNgZone\n}) {\n  return reducer => strictActionWithinNgZone ? inNgZoneAssertMetaReducer(reducer, {\n    action: action => strictActionWithinNgZone && !ignoreNgrxAction(action)\n  }) : reducer;\n}\nfunction provideRuntimeChecks(runtimeChecks) {\n  return [{\n    provide: _USER_RUNTIME_CHECKS,\n    useValue: runtimeChecks\n  }, {\n    provide: USER_RUNTIME_CHECKS,\n    useFactory: _runtimeChecksFactory,\n    deps: [_USER_RUNTIME_CHECKS]\n  }, {\n    provide: ACTIVE_RUNTIME_CHECKS,\n    deps: [USER_RUNTIME_CHECKS],\n    useFactory: createActiveRuntimeChecks\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createImmutabilityCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createSerializationCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createInNgZoneCheckMetaReducer\n  }];\n}\nfunction checkForActionTypeUniqueness() {\n  return [{\n    provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: _actionTypeUniquenessCheck\n  }];\n}\nfunction _runtimeChecksFactory(runtimeChecks) {\n  return runtimeChecks;\n}\nfunction _actionTypeUniquenessCheck(config) {\n  if (!config.strictActionTypeUniqueness) {\n    return;\n  }\n  const duplicates = Object.entries(REGISTERED_ACTION_TYPES).filter(([, registrations]) => registrations > 1).map(([type]) => type);\n  if (duplicates.length) {\n    throw new Error(`Action types are registered more than once, ${duplicates.map(type => `\"${type}\"`).join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`);\n  }\n}\n\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideState(featureNameOrSlice, reducers, config = {}) {\n  return makeEnvironmentProviders([..._provideState(featureNameOrSlice, reducers, config), ENVIRONMENT_STATE_PROVIDER]);\n}\nfunction _provideStore(reducers = {}, config = {}) {\n  return [{\n    provide: _ROOT_STORE_GUARD,\n    useFactory: _provideForRootGuard\n  }, {\n    provide: _INITIAL_STATE,\n    useValue: config.initialState\n  }, {\n    provide: INITIAL_STATE,\n    useFactory: _initialStateFactory,\n    deps: [_INITIAL_STATE]\n  }, {\n    provide: _INITIAL_REDUCERS,\n    useValue: reducers\n  }, {\n    provide: _STORE_REDUCERS,\n    useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS\n  }, {\n    provide: INITIAL_REDUCERS,\n    deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n    useFactory: _createStoreReducers\n  }, {\n    provide: USER_PROVIDED_META_REDUCERS,\n    useValue: config.metaReducers ? config.metaReducers : []\n  }, {\n    provide: _RESOLVED_META_REDUCERS,\n    deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n    useFactory: _concatMetaReducers\n  }, {\n    provide: _REDUCER_FACTORY,\n    useValue: config.reducerFactory ? config.reducerFactory : combineReducers\n  }, {\n    provide: REDUCER_FACTORY,\n    deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n    useFactory: createReducerFactory\n  }, ACTIONS_SUBJECT_PROVIDERS, REDUCER_MANAGER_PROVIDERS, SCANNED_ACTIONS_SUBJECT_PROVIDERS, STATE_PROVIDERS, STORE_PROVIDERS, provideRuntimeChecks(config.runtimeChecks), checkForActionTypeUniqueness()];\n}\nfunction rootStoreProviderFactory() {\n  inject(ActionsSubject);\n  inject(ReducerObservable);\n  inject(ScannedActionsSubject);\n  inject(Store);\n  inject(_ROOT_STORE_GUARD, {\n    optional: true\n  });\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n}\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER = [{\n  provide: ROOT_STORE_PROVIDER,\n  useFactory: rootStoreProviderFactory\n}, provideEnvironmentInitializer(() => inject(ROOT_STORE_PROVIDER))];\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nfunction provideStore(reducers, config) {\n  return makeEnvironmentProviders([..._provideStore(reducers, config), ENVIRONMENT_STORE_PROVIDER]);\n}\nfunction featureStateProviderFactory() {\n  inject(ROOT_STORE_PROVIDER);\n  const features = inject(_STORE_FEATURES);\n  const featureReducers = inject(FEATURE_REDUCERS);\n  const reducerManager = inject(ReducerManager);\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n  const feats = features.map((feature, index) => {\n    const featureReducerCollection = featureReducers.shift();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reducers = featureReducerCollection /*TODO(#823)*/[index];\n    return {\n      ...feature,\n      reducers,\n      initialState: _initialStateFactory(feature.initialState)\n    };\n  });\n  reducerManager.addFeatures(feats);\n}\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER = [{\n  provide: FEATURE_STATE_PROVIDER,\n  useFactory: featureStateProviderFactory\n}, provideEnvironmentInitializer(() => inject(FEATURE_STATE_PROVIDER))];\nfunction _provideState(featureNameOrSlice, reducers, config = {}) {\n  return [{\n    provide: _FEATURE_CONFIGS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? {} : config\n  }, {\n    provide: STORE_FEATURES,\n    multi: true,\n    useValue: {\n      key: featureNameOrSlice instanceof Object ? featureNameOrSlice.name : featureNameOrSlice,\n      reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory ? config.reducerFactory : combineReducers,\n      metaReducers: !(config instanceof InjectionToken) && config.metaReducers ? config.metaReducers : [],\n      initialState: !(config instanceof InjectionToken) && config.initialState ? config.initialState : undefined\n    }\n  }, {\n    provide: _STORE_FEATURES,\n    deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n    useFactory: _createFeatureStore\n  }, {\n    provide: _FEATURE_REDUCERS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? featureNameOrSlice.reducer : reducers\n  }, {\n    provide: _FEATURE_REDUCERS_TOKEN,\n    multi: true,\n    useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS\n  }, {\n    provide: FEATURE_REDUCERS,\n    multi: true,\n    deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n    useFactory: _createFeatureReducers\n  }, checkForActionTypeUniqueness()];\n}\nlet StoreRootModule = /*#__PURE__*/(() => {\n  class StoreRootModule {\n    constructor(actions$, reducer$, scannedActions$, store, guard, actionCheck) {}\n    /** @nocollapse */\n    static #_ = this.ɵfac = function StoreRootModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StoreRootModule)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(Store), i0.ɵɵinject(_ROOT_STORE_GUARD, 8), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreRootModule\n    });\n    /** @nocollapse */\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return StoreRootModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StoreFeatureModule = /*#__PURE__*/(() => {\n  class StoreFeatureModule {\n    constructor(features, featureReducers, reducerManager, root, actionCheck) {\n      this.features = features;\n      this.featureReducers = featureReducers;\n      this.reducerManager = reducerManager;\n      const feats = features.map((feature, index) => {\n        const featureReducerCollection = featureReducers.shift();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const reducers = featureReducerCollection /*TODO(#823)*/[index];\n        return {\n          ...feature,\n          reducers,\n          initialState: _initialStateFactory(feature.initialState)\n        };\n      });\n      reducerManager.addFeatures(feats);\n    }\n    // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n    ngOnDestroy() {\n      this.reducerManager.removeFeatures(this.features);\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function StoreFeatureModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StoreFeatureModule)(i0.ɵɵinject(_STORE_FEATURES), i0.ɵɵinject(FEATURE_REDUCERS), i0.ɵɵinject(ReducerManager), i0.ɵɵinject(StoreRootModule), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreFeatureModule\n    });\n    /** @nocollapse */\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return StoreFeatureModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StoreModule = /*#__PURE__*/(() => {\n  class StoreModule {\n    static forRoot(reducers, config) {\n      return {\n        ngModule: StoreRootModule,\n        providers: [..._provideStore(reducers, config)]\n      };\n    }\n    static forFeature(featureNameOrSlice, reducers, config = {}) {\n      return {\n        ngModule: StoreFeatureModule,\n        providers: [..._provideState(featureNameOrSlice, reducers, config)]\n      };\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function StoreModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StoreModule)();\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreModule\n    });\n    /** @nocollapse */\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return StoreModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nfunction on(...args) {\n  const reducer = args.pop();\n  const types = args.map(creator => creator.type);\n  return {\n    reducer,\n    types\n  };\n}\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nfunction createReducer(initialState, ...ons) {\n  const map = new Map();\n  for (const on of ons) {\n    for (const type of on.types) {\n      const existingReducer = map.get(type);\n      if (existingReducer) {\n        const newReducer = (state, action) => on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n  return function (state = initialState, action) {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIVE_RUNTIME_CHECKS, ActionsSubject, FEATURE_REDUCERS, FEATURE_STATE_PROVIDER, INIT, INITIAL_REDUCERS, INITIAL_STATE, META_REDUCERS, REDUCER_FACTORY, ROOT_STORE_PROVIDER, ReducerManager, ReducerManagerDispatcher, ReducerObservable, STORE_FEATURES, ScannedActionsSubject, State, StateObservable, Store, StoreFeatureModule, StoreModule, StoreRootModule, UPDATE, USER_PROVIDED_META_REDUCERS, USER_RUNTIME_CHECKS, combineReducers, compose, createAction, createActionGroup, createFeature, createFeatureSelector, createReducer, createReducerFactory, createSelector, createSelectorFactory, defaultMemoize, defaultStateFn, emptyProps, isNgrxMockEnvironment, on, props, provideState, provideStore, reduceState, resultMemoize, select, setNgrxMockEnvironment, union };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Inject","computed","effect","untracked","inject","Injector","isDevMode","makeEnvironmentProviders","provideEnvironmentInitializer","NgModule","Optional","BehaviorSubject","Observable","Subject","queueScheduler","observeOn","withLatestFrom","scan","pluck","map","distinctUntilChanged","toSignal","REGISTERED_ACTION_TYPES","resetRegisteredActionTypes","key","Object","keys","createAction","type","config","defineType","args","as","_as","props","Error","_p","undefined","union","creators","creator","defineProperty","value","writable","capitalize","text","charAt","toUpperCase","substring","uncapitalize","toLowerCase","assertDefined","name","createActionGroup","source","events","reduce","actionGroup","eventName","toActionName","toActionType","emptyProps","trim","split","word","i","join","INIT","ActionsSubject","constructor","next","action","TypeError","complete","ngOnDestroy","_","ɵfac","ActionsSubject_Factory","__ngFactoryType__","_2","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ACTIONS_SUBJECT_PROVIDERS","_ROOT_STORE_GUARD","_INITIAL_STATE","INITIAL_STATE","REDUCER_FACTORY","_REDUCER_FACTORY","INITIAL_REDUCERS","_INITIAL_REDUCERS","STORE_FEATURES","_STORE_REDUCERS","_FEATURE_REDUCERS","_FEATURE_CONFIGS","_STORE_FEATURES","_FEATURE_REDUCERS_TOKEN","FEATURE_REDUCERS","USER_PROVIDED_META_REDUCERS","META_REDUCERS","_RESOLVED_META_REDUCERS","USER_RUNTIME_CHECKS","_USER_RUNTIME_CHECKS","ACTIVE_RUNTIME_CHECKS","_ACTION_TYPE_UNIQUENESS_CHECK","ROOT_STORE_PROVIDER","FEATURE_STATE_PROVIDER","combineReducers","reducers","initialState","reducerKeys","finalReducers","length","finalReducerKeys","combination","state","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","result","assign","compose","functions","arg","last","rest","slice","reduceRight","composed","fn","createReducerFactory","reducerFactory","metaReducers","Array","isArray","apply","createFeatureReducerFactory","r","ReducerObservable","ReducerManagerDispatcher","UPDATE","ReducerManager","currentReducers","dispatcher","addFeature","feature","addFeatures","features","reducerDict","addReducers","removeFeature","removeFeatures","removeReducers","p","addReducer","updateReducers","removeReducer","featureKey","featureKeys","forEach","ReducerManager_Factory","ɵɵinject","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","ɵScannedActionsSubject_BaseFactory","ScannedActionsSubject_Factory","ɵɵgetInheritedFactory","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","pipe","withLatestReducer$","seed","stateAndAction$","reduceState","stateSubscription","subscribe","manualCleanup","requireSync","unsubscribe","State_Factory","_3","stateActionPair","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","injector","select","pathOrMapFn","paths","call","selectSignal","selector","options","lift","operator","store","dispatch","actionOrDispatchFn","processDispatchFn","error","err","dispatchFn","effectInjector","getCallerInjector","Store_Factory","STORE_PROVIDERS","propsOrPath","selectOperator","source$","mapped$","pathSlices","Boolean","RUNTIME_CHECK_URL","isUndefined","target","isNull","isString","isBoolean","isNumber","isObjectLike","isObject","isPlainObject","targetPrototype","getPrototypeOf","prototype","isFunction","isComponent","hasOwnProperty","propertyName","_ngrxMockEnvironment","setNgrxMockEnvironment","isNgrxMockEnvironment","isEqualCheck","a","b","isArgumentsChanged","lastArguments","comparator","resultMemoize","projectionFn","isResultEqual","defaultMemoize","isArgumentsEqual","lastResult","overrideResult","reset","setResult","clearResult","memoized","arguments","newResult","createSelector","input","createSelectorFactory","defaultStateFn","selectors","memoizedProjector","memoize","stateFn","head","tail","isSelectorsDictionary","extractArgsFromSelectorsDictionary","projector","memoizedSelectors","release","memoizedState","createFeatureSelector","featureName","featureState","console","warn","values","every","selectorsDictionary","resultKeys","selectorResults","index","createFeature","featureConfig","extraSelectors","extraSelectorsFactory","featureSelector","nestedSelectors","createNestedSelectors","baseSelectors","getInitialState","nestedKeys","nestedKey","parentState","_createStoreReducers","_createFeatureStore","configs","featureStores","feat","conf","_createFeatureReducers","reducerCollection","_initialStateFactory","_concatMetaReducers","userProvidedMetaReducers","concat","_provideForRootGuard","optional","skipSelf","immutabilityCheckMetaReducer","checks","act","freeze","targetIsFunction","getOwnPropertyNames","prop","startsWith","propValue","isFrozen","serializationCheckMetaReducer","unserializableAction","getUnserializable","throwIfUnserializable","unserializableState","path","unserializable","context","unserializablePath","inNgZoneAssertMetaReducer","NgZone","isInAngularZone","createActiveRuntimeChecks","runtimeChecks","strictStateSerializability","strictActionSerializability","strictStateImmutability","strictActionImmutability","strictActionWithinNgZone","strictActionTypeUniqueness","createSerializationCheckMetaReducer","ignoreNgrxAction","createImmutabilityCheckMetaReducer","createInNgZoneCheckMetaReducer","provideRuntimeChecks","useValue","useFactory","_runtimeChecksFactory","deps","multi","checkForActionTypeUniqueness","_actionTypeUniquenessCheck","duplicates","entries","registrations","provideState","featureNameOrSlice","_provideState","ENVIRONMENT_STATE_PROVIDER","_provideStore","rootStoreProviderFactory","ENVIRONMENT_STORE_PROVIDER","provideStore","featureStateProviderFactory","featureReducers","feats","featureReducerCollection","shift","StoreRootModule","scannedActions$","guard","actionCheck","StoreRootModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","StoreFeatureModule","root","StoreFeatureModule_Factory","StoreModule","forRoot","ngModule","providers","forFeature","StoreModule_Factory","on","pop","types","createReducer","ons","Map","existingReducer","get","newReducer","set"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@ngrx/store/fesm2022/ngrx-store.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, computed, effect, untracked, inject, Injector, isDevMode, makeEnvironmentProviders, provideEnvironmentInitializer, NgModule, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, withLatestFrom, scan, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nimport { toSignal } from '@angular/core/rxjs-interop';\n\nconst REGISTERED_ACTION_TYPES = {};\nfunction resetRegisteredActionTypes() {\n    for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n        delete REGISTERED_ACTION_TYPES[key];\n    }\n}\n\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nfunction createAction(type, config) {\n    REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n    if (typeof config === 'function') {\n        return defineType(type, (...args) => ({\n            ...config(...args),\n            type,\n        }));\n    }\n    const as = config ? config._as : 'empty';\n    switch (as) {\n        case 'empty':\n            return defineType(type, () => ({ type }));\n        case 'props':\n            return defineType(type, (props) => ({\n                ...props,\n                type,\n            }));\n        default:\n            throw new Error('Unexpected config.');\n    }\n}\nfunction props() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { _as: 'props', _p: undefined };\n}\nfunction union(creators) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return undefined;\n}\nfunction defineType(type, creator) {\n    return Object.defineProperty(creator, 'type', {\n        value: type,\n        writable: false,\n    });\n}\n\nfunction capitalize(text) {\n    return (text.charAt(0).toUpperCase() + text.substring(1));\n}\nfunction uncapitalize(text) {\n    return (text.charAt(0).toLowerCase() + text.substring(1));\n}\nfunction assertDefined(value, name) {\n    if (value === null || value === undefined) {\n        throw new Error(`${name} must be defined.`);\n    }\n}\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nfunction createActionGroup(config) {\n    const { source, events } = config;\n    return Object.keys(events).reduce((actionGroup, eventName) => ({\n        ...actionGroup,\n        [toActionName(eventName)]: createAction(toActionType(source, eventName), events[eventName]),\n    }), {});\n}\nfunction emptyProps() {\n    return props();\n}\nfunction toActionName(eventName) {\n    return eventName\n        .trim()\n        .split(' ')\n        .map((word, i) => (i === 0 ? uncapitalize(word) : capitalize(word)))\n        .join('');\n}\nfunction toActionType(source, eventName) {\n    return `[${source}] ${eventName}`;\n}\n\nconst INIT = '@ngrx/store/init';\nclass ActionsSubject extends BehaviorSubject {\n    constructor() {\n        super({ type: INIT });\n    }\n    next(action) {\n        if (typeof action === 'function') {\n            throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n        }\n        else if (typeof action === 'undefined') {\n            throw new TypeError(`Actions must be objects`);\n        }\n        else if (typeof action.type === 'undefined') {\n            throw new TypeError(`Actions must have a type property`);\n        }\n        super.next(action);\n    }\n    complete() {\n        /* noop */\n    }\n    ngOnDestroy() {\n        super.complete();\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ActionsSubject, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ActionsSubject }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ActionsSubject, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\n\nconst _ROOT_STORE_GUARD = new InjectionToken('@ngrx/store Internal Root Guard');\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nconst USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nconst _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nconst USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');\n/**\n * Runtime checks defined by the user via forRoot()\n */\nconst _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');\n/**\n * Runtime checks currently in use\n */\nconst ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');\nconst _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken('@ngrx/store Check if Action types are unique');\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nconst ROOT_STORE_PROVIDER = new InjectionToken('@ngrx/store Root Store Provider');\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nconst FEATURE_STATE_PROVIDER = new InjectionToken('@ngrx/store Feature State Provider');\n\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nfunction combineReducers(reducers, initialState = {}) {\n    const reducerKeys = Object.keys(reducers);\n    const finalReducers = {};\n    for (let i = 0; i < reducerKeys.length; i++) {\n        const key = reducerKeys[i];\n        if (typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key];\n        }\n    }\n    const finalReducerKeys = Object.keys(finalReducers);\n    return function combination(state, action) {\n        state = state === undefined ? initialState : state;\n        let hasChanged = false;\n        const nextState = {};\n        for (let i = 0; i < finalReducerKeys.length; i++) {\n            const key = finalReducerKeys[i];\n            const reducer = finalReducers[key];\n            const previousStateForKey = state[key];\n            const nextStateForKey = reducer(previousStateForKey, action);\n            nextState[key] = nextStateForKey;\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n        }\n        return hasChanged ? nextState : state;\n    };\n}\nfunction omit(object, keyToRemove) {\n    return Object.keys(object)\n        .filter((key) => key !== keyToRemove)\n        .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\nfunction compose(...functions) {\n    return function (arg) {\n        if (functions.length === 0) {\n            return arg;\n        }\n        const last = functions[functions.length - 1];\n        const rest = functions.slice(0, -1);\n        return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n    };\n}\nfunction createReducerFactory(reducerFactory, metaReducers) {\n    if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n        reducerFactory = compose.apply(null, [\n            ...metaReducers,\n            reducerFactory,\n        ]);\n    }\n    return (reducers, initialState) => {\n        const reducer = reducerFactory(reducers);\n        return (state, action) => {\n            state = state === undefined ? initialState : state;\n            return reducer(state, action);\n        };\n    };\n}\nfunction createFeatureReducerFactory(metaReducers) {\n    const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0\n        ? compose(...metaReducers)\n        : (r) => r;\n    return (reducer, initialState) => {\n        reducer = reducerFactory(reducer);\n        return (state, action) => {\n            state = state === undefined ? initialState : state;\n            return reducer(state, action);\n        };\n    };\n}\n\nclass ReducerObservable extends Observable {\n}\nclass ReducerManagerDispatcher extends ActionsSubject {\n}\nconst UPDATE = '@ngrx/store/update-reducers';\nclass ReducerManager extends BehaviorSubject {\n    get currentReducers() {\n        return this.reducers;\n    }\n    constructor(dispatcher, initialState, reducers, reducerFactory) {\n        super(reducerFactory(reducers, initialState));\n        this.dispatcher = dispatcher;\n        this.initialState = initialState;\n        this.reducers = reducers;\n        this.reducerFactory = reducerFactory;\n    }\n    addFeature(feature) {\n        this.addFeatures([feature]);\n    }\n    addFeatures(features) {\n        const reducers = features.reduce((reducerDict, { reducers, reducerFactory, metaReducers, initialState, key }) => {\n            const reducer = typeof reducers === 'function'\n                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)\n                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n            reducerDict[key] = reducer;\n            return reducerDict;\n        }, {});\n        this.addReducers(reducers);\n    }\n    removeFeature(feature) {\n        this.removeFeatures([feature]);\n    }\n    removeFeatures(features) {\n        this.removeReducers(features.map((p) => p.key));\n    }\n    addReducer(key, reducer) {\n        this.addReducers({ [key]: reducer });\n    }\n    addReducers(reducers) {\n        this.reducers = { ...this.reducers, ...reducers };\n        this.updateReducers(Object.keys(reducers));\n    }\n    removeReducer(featureKey) {\n        this.removeReducers([featureKey]);\n    }\n    removeReducers(featureKeys) {\n        featureKeys.forEach((key) => {\n            this.reducers = omit(this.reducers, key) /*TODO(#823)*/;\n        });\n        this.updateReducers(featureKeys);\n    }\n    updateReducers(featureKeys) {\n        this.next(this.reducerFactory(this.reducers, this.initialState));\n        this.dispatcher.next({\n            type: UPDATE,\n            features: featureKeys,\n        });\n    }\n    ngOnDestroy() {\n        this.complete();\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ReducerManager, deps: [{ token: ReducerManagerDispatcher }, { token: INITIAL_STATE }, { token: INITIAL_REDUCERS }, { token: REDUCER_FACTORY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ReducerManager }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ReducerManager, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: ReducerManagerDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_STATE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_REDUCERS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [REDUCER_FACTORY]\n                }] }] });\nconst REDUCER_MANAGER_PROVIDERS = [\n    ReducerManager,\n    { provide: ReducerObservable, useExisting: ReducerManager },\n    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\nclass ScannedActionsSubject extends Subject {\n    ngOnDestroy() {\n        this.complete();\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ScannedActionsSubject, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ScannedActionsSubject }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: ScannedActionsSubject, decorators: [{\n            type: Injectable\n        }] });\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [\n    ScannedActionsSubject,\n];\n\nclass StateObservable extends Observable {\n}\nclass State extends BehaviorSubject {\n    static { this.INIT = INIT; }\n    constructor(actions$, reducer$, scannedActions, initialState) {\n        super(initialState);\n        const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n        const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n        const seed = { state: initialState };\n        const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n        this.stateSubscription = stateAndAction$.subscribe(({ state, action }) => {\n            this.next(state);\n            scannedActions.next(action);\n        });\n        this.state = toSignal(this, { manualCleanup: true, requireSync: true });\n    }\n    ngOnDestroy() {\n        this.stateSubscription.unsubscribe();\n        this.complete();\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: State, deps: [{ token: ActionsSubject }, { token: ReducerObservable }, { token: ScannedActionsSubject }, { token: INITIAL_STATE }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: State }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: State, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_STATE]\n                }] }] });\nfunction reduceState(stateActionPair = { state: undefined }, [action, reducer]) {\n    const { state } = stateActionPair;\n    return { state: reducer(state, action), action };\n}\nconst STATE_PROVIDERS = [\n    State,\n    { provide: StateObservable, useExisting: State },\n];\n\n// disabled because we have lowercase generics for `select`\n/**\n * @description\n * Store is an injectable service that provides reactive state management and a public API for dispatching actions.\n *\n * @usageNotes\n *\n * In a component:\n *\n * ```ts\n * import { Component, inject } from '@angular/core';\n * import { Store } from '@ngrx/store';\n *\n * @Component({\n *  selector: 'app-my-component',\n *  template: `\n *    <div>{{ count() }}</div>\n *    <button (click)=\"increment()\">Increment</button>\n *  `\n * })\n * export class MyComponent {\n *   private store = inject(Store);\n *\n *   count = this.store.selectSignal(state => state.count);\n *\n *   increment() {\n *     this.store.dispatch({ type: 'INCREMENT' });\n *   }\n * }\n * ```\n *\n */\nclass Store extends Observable {\n    constructor(state$, actionsObserver, reducerManager, injector) {\n        super();\n        this.actionsObserver = actionsObserver;\n        this.reducerManager = reducerManager;\n        this.injector = injector;\n        this.source = state$;\n        this.state = state$.state;\n    }\n    /**\n     * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n     */\n    select(pathOrMapFn, ...paths) {\n        return select.call(null, pathOrMapFn, ...paths)(this);\n    }\n    /**\n     * Returns a signal of the provided selector.\n     *\n     * @param selector selector function\n     * @param options select signal options\n     * @returns Signal of the state selected by the provided selector\n     * @usageNotes\n     *\n     * ```ts\n     * const count = this.store.selectSignal(state => state.count);\n     * ```\n     *\n     * Or with a selector created by @ngrx/store!createSelector:function\n     *\n     * ```ts\n     * const selectCount = createSelector(\n     *  (state: State) => state.count,\n     * );\n     *\n     * const count = this.store.selectSignal(selectCount);\n     * ```\n     */\n    selectSignal(selector, options) {\n        return computed(() => selector(this.state()), options);\n    }\n    lift(operator) {\n        const store = new Store(this, this.actionsObserver, this.reducerManager);\n        store.operator = operator;\n        return store;\n    }\n    dispatch(actionOrDispatchFn, config) {\n        if (typeof actionOrDispatchFn === 'function') {\n            return this.processDispatchFn(actionOrDispatchFn, config);\n        }\n        this.actionsObserver.next(actionOrDispatchFn);\n    }\n    next(action) {\n        this.actionsObserver.next(action);\n    }\n    error(err) {\n        this.actionsObserver.error(err);\n    }\n    complete() {\n        this.actionsObserver.complete();\n    }\n    addReducer(key, reducer) {\n        this.reducerManager.addReducer(key, reducer);\n    }\n    removeReducer(key) {\n        this.reducerManager.removeReducer(key);\n    }\n    processDispatchFn(dispatchFn, config) {\n        assertDefined(this.injector, 'Store Injector');\n        const effectInjector = config?.injector ?? getCallerInjector() ?? this.injector;\n        return effect(() => {\n            const action = dispatchFn();\n            untracked(() => this.dispatch(action));\n        }, { injector: effectInjector });\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: Store, deps: [{ token: StateObservable }, { token: ActionsSubject }, { token: ReducerManager }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: Store }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: Store, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: StateObservable }, { type: ActionsSubject }, { type: ReducerManager }, { type: i0.Injector }] });\nconst STORE_PROVIDERS = [Store];\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n    return function selectOperator(source$) {\n        let mapped$;\n        if (typeof pathOrMapFn === 'string') {\n            const pathSlices = [propsOrPath, ...paths].filter(Boolean);\n            mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n        }\n        else if (typeof pathOrMapFn === 'function') {\n            mapped$ = source$.pipe(map((source) => pathOrMapFn(source, propsOrPath)));\n        }\n        else {\n            throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n                ` expected 'string' or 'function'`);\n        }\n        return mapped$.pipe(distinctUntilChanged());\n    };\n}\nfunction getCallerInjector() {\n    try {\n        return inject(Injector);\n    }\n    catch (_) {\n        return undefined;\n    }\n}\n\nconst RUNTIME_CHECK_URL = 'https://ngrx.io/guide/store/configuration/runtime-checks';\nfunction isUndefined(target) {\n    return target === undefined;\n}\nfunction isNull(target) {\n    return target === null;\n}\nfunction isArray(target) {\n    return Array.isArray(target);\n}\nfunction isString(target) {\n    return typeof target === 'string';\n}\nfunction isBoolean(target) {\n    return typeof target === 'boolean';\n}\nfunction isNumber(target) {\n    return typeof target === 'number';\n}\nfunction isObjectLike(target) {\n    return typeof target === 'object' && target !== null;\n}\nfunction isObject(target) {\n    return isObjectLike(target) && !isArray(target);\n}\nfunction isPlainObject(target) {\n    if (!isObject(target)) {\n        return false;\n    }\n    const targetPrototype = Object.getPrototypeOf(target);\n    return targetPrototype === Object.prototype || targetPrototype === null;\n}\nfunction isFunction(target) {\n    return typeof target === 'function';\n}\nfunction isComponent(target) {\n    return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\nfunction hasOwnProperty(target, propertyName) {\n    return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\n\nlet _ngrxMockEnvironment = false;\nfunction setNgrxMockEnvironment(value) {\n    _ngrxMockEnvironment = value;\n}\nfunction isNgrxMockEnvironment() {\n    return _ngrxMockEnvironment;\n}\n\nfunction isEqualCheck(a, b) {\n    return a === b;\n}\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n    for (let i = 0; i < args.length; i++) {\n        if (!comparator(args[i], lastArguments[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction resultMemoize(projectionFn, isResultEqual) {\n    return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n    let lastArguments = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n    let lastResult = null;\n    let overrideResult;\n    function reset() {\n        lastArguments = null;\n        lastResult = null;\n    }\n    function setResult(result = undefined) {\n        overrideResult = { result };\n    }\n    function clearResult() {\n        overrideResult = undefined;\n    }\n    /* eslint-disable prefer-rest-params, prefer-spread */\n    // disabled because of the use of `arguments`\n    function memoized() {\n        if (overrideResult !== undefined) {\n            return overrideResult.result;\n        }\n        if (!lastArguments) {\n            lastResult = projectionFn.apply(null, arguments);\n            lastArguments = arguments;\n            return lastResult;\n        }\n        if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n            return lastResult;\n        }\n        const newResult = projectionFn.apply(null, arguments);\n        lastArguments = arguments;\n        if (isResultEqual(lastResult, newResult)) {\n            return lastResult;\n        }\n        lastResult = newResult;\n        return newResult;\n    }\n    return { memoized, reset, setResult, clearResult };\n}\nfunction createSelector(...input) {\n    return createSelectorFactory(defaultMemoize)(...input);\n}\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n    if (props === undefined) {\n        const args = selectors.map((fn) => fn(state));\n        return memoizedProjector.memoized.apply(null, args);\n    }\n    const args = selectors.map((fn) => fn(state, props));\n    return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nfunction createSelectorFactory(memoize, options = {\n    stateFn: defaultStateFn,\n}) {\n    return function (...input) {\n        let args = input;\n        if (Array.isArray(args[0])) {\n            const [head, ...tail] = args;\n            args = [...head, ...tail];\n        }\n        else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n            args = extractArgsFromSelectorsDictionary(args[0]);\n        }\n        const selectors = args.slice(0, args.length - 1);\n        const projector = args[args.length - 1];\n        const memoizedSelectors = selectors.filter((selector) => selector.release && typeof selector.release === 'function');\n        const memoizedProjector = memoize(function (...selectors) {\n            return projector.apply(null, selectors);\n        });\n        const memoizedState = defaultMemoize(function (state, props) {\n            return options.stateFn.apply(null, [\n                state,\n                selectors,\n                props,\n                memoizedProjector,\n            ]);\n        });\n        function release() {\n            memoizedState.reset();\n            memoizedProjector.reset();\n            memoizedSelectors.forEach((selector) => selector.release());\n        }\n        return Object.assign(memoizedState.memoized, {\n            release,\n            projector: memoizedProjector.memoized,\n            setResult: memoizedState.setResult,\n            clearResult: memoizedState.clearResult,\n        });\n    };\n}\nfunction createFeatureSelector(featureName) {\n    return createSelector((state) => {\n        const featureState = state[featureName];\n        if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n            console.warn(`@ngrx/store: The feature name \"${featureName}\" does ` +\n                'not exist in the state, therefore createFeatureSelector ' +\n                'cannot access it.  Be sure it is imported in a loaded module ' +\n                `using StoreModule.forRoot('${featureName}', ...) or ` +\n                `StoreModule.forFeature('${featureName}', ...).  If the default ` +\n                'state is intended to be undefined, as is the case with router ' +\n                'state, this development-only warning message can be ignored.');\n        }\n        return featureState;\n    }, (featureState) => featureState);\n}\nfunction isSelectorsDictionary(selectors) {\n    return (!!selectors &&\n        typeof selectors === 'object' &&\n        Object.values(selectors).every((selector) => typeof selector === 'function'));\n}\nfunction extractArgsFromSelectorsDictionary(selectorsDictionary) {\n    const selectors = Object.values(selectorsDictionary);\n    const resultKeys = Object.keys(selectorsDictionary);\n    const projector = (...selectorResults) => resultKeys.reduce((result, key, index) => ({\n        ...result,\n        [key]: selectorResults[index],\n    }), {});\n    return [...selectors, projector];\n}\n\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectProductsState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nfunction createFeature(featureConfig) {\n    const { name, reducer, extraSelectors: extraSelectorsFactory, } = featureConfig;\n    const featureSelector = createFeatureSelector(name);\n    const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n    const baseSelectors = {\n        [`select${capitalize(name)}State`]: featureSelector,\n        ...nestedSelectors,\n    };\n    const extraSelectors = extraSelectorsFactory\n        ? extraSelectorsFactory(baseSelectors)\n        : {};\n    return {\n        name,\n        reducer,\n        ...baseSelectors,\n        ...extraSelectors,\n    };\n}\nfunction createNestedSelectors(featureSelector, reducer) {\n    const initialState = getInitialState(reducer);\n    const nestedKeys = (isPlainObject(initialState) ? Object.keys(initialState) : []);\n    return nestedKeys.reduce((nestedSelectors, nestedKey) => ({\n        ...nestedSelectors,\n        [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, (parentState) => parentState?.[nestedKey]),\n    }), {});\n}\nfunction getInitialState(reducer) {\n    return reducer(undefined, { type: '@ngrx/feature/init' });\n}\n\nfunction _createStoreReducers(reducers) {\n    return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\nfunction _createFeatureStore(configs, featureStores) {\n    return featureStores.map((feat, index) => {\n        if (configs[index] instanceof InjectionToken) {\n            const conf = inject(configs[index]);\n            return {\n                key: feat.key,\n                reducerFactory: conf.reducerFactory\n                    ? conf.reducerFactory\n                    : combineReducers,\n                metaReducers: conf.metaReducers ? conf.metaReducers : [],\n                initialState: conf.initialState,\n            };\n        }\n        return feat;\n    });\n}\nfunction _createFeatureReducers(reducerCollection) {\n    return reducerCollection.map((reducer) => {\n        return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n    });\n}\nfunction _initialStateFactory(initialState) {\n    if (typeof initialState === 'function') {\n        return initialState();\n    }\n    return initialState;\n}\nfunction _concatMetaReducers(metaReducers, userProvidedMetaReducers) {\n    return metaReducers.concat(userProvidedMetaReducers);\n}\nfunction _provideForRootGuard() {\n    const store = inject(Store, { optional: true, skipSelf: true });\n    if (store) {\n        throw new TypeError(`The root Store has been provided more than once. Feature modules should provide feature states instead.`);\n    }\n    return 'guarded';\n}\n\nfunction immutabilityCheckMetaReducer(reducer, checks) {\n    return function (state, action) {\n        const act = checks.action(action) ? freeze(action) : action;\n        const nextState = reducer(state, act);\n        return checks.state() ? freeze(nextState) : nextState;\n    };\n}\nfunction freeze(target) {\n    Object.freeze(target);\n    const targetIsFunction = isFunction(target);\n    Object.getOwnPropertyNames(target).forEach((prop) => {\n        // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n        if (prop.startsWith('ɵ')) {\n            return;\n        }\n        if (hasOwnProperty(target, prop) &&\n            (targetIsFunction\n                ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments'\n                : true)) {\n            const propValue = target[prop];\n            if ((isObjectLike(propValue) || isFunction(propValue)) &&\n                !Object.isFrozen(propValue)) {\n                freeze(propValue);\n            }\n        }\n    });\n    return target;\n}\n\nfunction serializationCheckMetaReducer(reducer, checks) {\n    return function (state, action) {\n        if (checks.action(action)) {\n            const unserializableAction = getUnserializable(action);\n            throwIfUnserializable(unserializableAction, 'action');\n        }\n        const nextState = reducer(state, action);\n        if (checks.state()) {\n            const unserializableState = getUnserializable(nextState);\n            throwIfUnserializable(unserializableState, 'state');\n        }\n        return nextState;\n    };\n}\nfunction getUnserializable(target, path = []) {\n    // Guard against undefined and null, e.g. a reducer that returns undefined\n    if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n        return {\n            path: ['root'],\n            value: target,\n        };\n    }\n    const keys = Object.keys(target);\n    return keys.reduce((result, key) => {\n        if (result) {\n            return result;\n        }\n        const value = target[key];\n        // Ignore Ivy components\n        if (isComponent(value)) {\n            return result;\n        }\n        if (isUndefined(value) ||\n            isNull(value) ||\n            isNumber(value) ||\n            isBoolean(value) ||\n            isString(value) ||\n            isArray(value)) {\n            return false;\n        }\n        if (isPlainObject(value)) {\n            return getUnserializable(value, [...path, key]);\n        }\n        return {\n            path: [...path, key],\n            value,\n        };\n    }, false);\n}\nfunction throwIfUnserializable(unserializable, context) {\n    if (unserializable === false) {\n        return;\n    }\n    const unserializablePath = unserializable.path.join('.');\n    const error = new Error(`Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`);\n    error.value = unserializable.value;\n    error.unserializablePath = unserializablePath;\n    throw error;\n}\n\nfunction inNgZoneAssertMetaReducer(reducer, checks) {\n    return function (state, action) {\n        if (checks.action(action) && !i0.NgZone.isInAngularZone()) {\n            throw new Error(`Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`);\n        }\n        return reducer(state, action);\n    };\n}\n\nfunction createActiveRuntimeChecks(runtimeChecks) {\n    if (isDevMode()) {\n        return {\n            strictStateSerializability: false,\n            strictActionSerializability: false,\n            strictStateImmutability: true,\n            strictActionImmutability: true,\n            strictActionWithinNgZone: false,\n            strictActionTypeUniqueness: false,\n            ...runtimeChecks,\n        };\n    }\n    return {\n        strictStateSerializability: false,\n        strictActionSerializability: false,\n        strictStateImmutability: false,\n        strictActionImmutability: false,\n        strictActionWithinNgZone: false,\n        strictActionTypeUniqueness: false,\n    };\n}\nfunction createSerializationCheckMetaReducer({ strictActionSerializability, strictStateSerializability, }) {\n    return (reducer) => strictActionSerializability || strictStateSerializability\n        ? serializationCheckMetaReducer(reducer, {\n            action: (action) => strictActionSerializability && !ignoreNgrxAction(action),\n            state: () => strictStateSerializability,\n        })\n        : reducer;\n}\nfunction createImmutabilityCheckMetaReducer({ strictActionImmutability, strictStateImmutability, }) {\n    return (reducer) => strictActionImmutability || strictStateImmutability\n        ? immutabilityCheckMetaReducer(reducer, {\n            action: (action) => strictActionImmutability && !ignoreNgrxAction(action),\n            state: () => strictStateImmutability,\n        })\n        : reducer;\n}\nfunction ignoreNgrxAction(action) {\n    return action.type.startsWith('@ngrx');\n}\nfunction createInNgZoneCheckMetaReducer({ strictActionWithinNgZone, }) {\n    return (reducer) => strictActionWithinNgZone\n        ? inNgZoneAssertMetaReducer(reducer, {\n            action: (action) => strictActionWithinNgZone && !ignoreNgrxAction(action),\n        })\n        : reducer;\n}\nfunction provideRuntimeChecks(runtimeChecks) {\n    return [\n        {\n            provide: _USER_RUNTIME_CHECKS,\n            useValue: runtimeChecks,\n        },\n        {\n            provide: USER_RUNTIME_CHECKS,\n            useFactory: _runtimeChecksFactory,\n            deps: [_USER_RUNTIME_CHECKS],\n        },\n        {\n            provide: ACTIVE_RUNTIME_CHECKS,\n            deps: [USER_RUNTIME_CHECKS],\n            useFactory: createActiveRuntimeChecks,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [ACTIVE_RUNTIME_CHECKS],\n            useFactory: createImmutabilityCheckMetaReducer,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [ACTIVE_RUNTIME_CHECKS],\n            useFactory: createSerializationCheckMetaReducer,\n        },\n        {\n            provide: META_REDUCERS,\n            multi: true,\n            deps: [ACTIVE_RUNTIME_CHECKS],\n            useFactory: createInNgZoneCheckMetaReducer,\n        },\n    ];\n}\nfunction checkForActionTypeUniqueness() {\n    return [\n        {\n            provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n            multi: true,\n            deps: [ACTIVE_RUNTIME_CHECKS],\n            useFactory: _actionTypeUniquenessCheck,\n        },\n    ];\n}\nfunction _runtimeChecksFactory(runtimeChecks) {\n    return runtimeChecks;\n}\nfunction _actionTypeUniquenessCheck(config) {\n    if (!config.strictActionTypeUniqueness) {\n        return;\n    }\n    const duplicates = Object.entries(REGISTERED_ACTION_TYPES)\n        .filter(([, registrations]) => registrations > 1)\n        .map(([type]) => type);\n    if (duplicates.length) {\n        throw new Error(`Action types are registered more than once, ${duplicates\n            .map((type) => `\"${type}\"`)\n            .join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`);\n    }\n}\n\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideState(featureNameOrSlice, reducers, config = {}) {\n    return makeEnvironmentProviders([\n        ..._provideState(featureNameOrSlice, reducers, config),\n        ENVIRONMENT_STATE_PROVIDER,\n    ]);\n}\nfunction _provideStore(reducers = {}, config = {}) {\n    return [\n        {\n            provide: _ROOT_STORE_GUARD,\n            useFactory: _provideForRootGuard,\n        },\n        { provide: _INITIAL_STATE, useValue: config.initialState },\n        {\n            provide: INITIAL_STATE,\n            useFactory: _initialStateFactory,\n            deps: [_INITIAL_STATE],\n        },\n        { provide: _INITIAL_REDUCERS, useValue: reducers },\n        {\n            provide: _STORE_REDUCERS,\n            useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS,\n        },\n        {\n            provide: INITIAL_REDUCERS,\n            deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n            useFactory: _createStoreReducers,\n        },\n        {\n            provide: USER_PROVIDED_META_REDUCERS,\n            useValue: config.metaReducers ? config.metaReducers : [],\n        },\n        {\n            provide: _RESOLVED_META_REDUCERS,\n            deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n            useFactory: _concatMetaReducers,\n        },\n        {\n            provide: _REDUCER_FACTORY,\n            useValue: config.reducerFactory ? config.reducerFactory : combineReducers,\n        },\n        {\n            provide: REDUCER_FACTORY,\n            deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n            useFactory: createReducerFactory,\n        },\n        ACTIONS_SUBJECT_PROVIDERS,\n        REDUCER_MANAGER_PROVIDERS,\n        SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n        STATE_PROVIDERS,\n        STORE_PROVIDERS,\n        provideRuntimeChecks(config.runtimeChecks),\n        checkForActionTypeUniqueness(),\n    ];\n}\nfunction rootStoreProviderFactory() {\n    inject(ActionsSubject);\n    inject(ReducerObservable);\n    inject(ScannedActionsSubject);\n    inject(Store);\n    inject(_ROOT_STORE_GUARD, { optional: true });\n    inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n}\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER = [\n    { provide: ROOT_STORE_PROVIDER, useFactory: rootStoreProviderFactory },\n    provideEnvironmentInitializer(() => inject(ROOT_STORE_PROVIDER)),\n];\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nfunction provideStore(reducers, config) {\n    return makeEnvironmentProviders([\n        ..._provideStore(reducers, config),\n        ENVIRONMENT_STORE_PROVIDER,\n    ]);\n}\nfunction featureStateProviderFactory() {\n    inject(ROOT_STORE_PROVIDER);\n    const features = inject(_STORE_FEATURES);\n    const featureReducers = inject(FEATURE_REDUCERS);\n    const reducerManager = inject(ReducerManager);\n    inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n    const feats = features.map((feature, index) => {\n        const featureReducerCollection = featureReducers.shift();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const reducers = featureReducerCollection /*TODO(#823)*/[index];\n        return {\n            ...feature,\n            reducers,\n            initialState: _initialStateFactory(feature.initialState),\n        };\n    });\n    reducerManager.addFeatures(feats);\n}\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER = [\n    {\n        provide: FEATURE_STATE_PROVIDER,\n        useFactory: featureStateProviderFactory,\n    },\n    provideEnvironmentInitializer(() => inject(FEATURE_STATE_PROVIDER)),\n];\nfunction _provideState(featureNameOrSlice, reducers, config = {}) {\n    return [\n        {\n            provide: _FEATURE_CONFIGS,\n            multi: true,\n            useValue: featureNameOrSlice instanceof Object ? {} : config,\n        },\n        {\n            provide: STORE_FEATURES,\n            multi: true,\n            useValue: {\n                key: featureNameOrSlice instanceof Object\n                    ? featureNameOrSlice.name\n                    : featureNameOrSlice,\n                reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory\n                    ? config.reducerFactory\n                    : combineReducers,\n                metaReducers: !(config instanceof InjectionToken) && config.metaReducers\n                    ? config.metaReducers\n                    : [],\n                initialState: !(config instanceof InjectionToken) && config.initialState\n                    ? config.initialState\n                    : undefined,\n            },\n        },\n        {\n            provide: _STORE_FEATURES,\n            deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n            useFactory: _createFeatureStore,\n        },\n        {\n            provide: _FEATURE_REDUCERS,\n            multi: true,\n            useValue: featureNameOrSlice instanceof Object\n                ? featureNameOrSlice.reducer\n                : reducers,\n        },\n        {\n            provide: _FEATURE_REDUCERS_TOKEN,\n            multi: true,\n            useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n        },\n        {\n            provide: FEATURE_REDUCERS,\n            multi: true,\n            deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n            useFactory: _createFeatureReducers,\n        },\n        checkForActionTypeUniqueness(),\n    ];\n}\n\nclass StoreRootModule {\n    constructor(actions$, reducer$, scannedActions$, store, guard, actionCheck) { }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreRootModule, deps: [{ token: ActionsSubject }, { token: ReducerObservable }, { token: ScannedActionsSubject }, { token: Store }, { token: _ROOT_STORE_GUARD, optional: true }, { token: _ACTION_TYPE_UNIQUENESS_CHECK, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreRootModule }); }\n    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreRootModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreRootModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: () => [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: Store }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [_ROOT_STORE_GUARD]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [_ACTION_TYPE_UNIQUENESS_CHECK]\n                }] }] });\nclass StoreFeatureModule {\n    constructor(features, featureReducers, reducerManager, root, actionCheck) {\n        this.features = features;\n        this.featureReducers = featureReducers;\n        this.reducerManager = reducerManager;\n        const feats = features.map((feature, index) => {\n            const featureReducerCollection = featureReducers.shift();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const reducers = featureReducerCollection /*TODO(#823)*/[index];\n            return {\n                ...feature,\n                reducers,\n                initialState: _initialStateFactory(feature.initialState),\n            };\n        });\n        reducerManager.addFeatures(feats);\n    }\n    // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n    ngOnDestroy() {\n        this.reducerManager.removeFeatures(this.features);\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreFeatureModule, deps: [{ token: _STORE_FEATURES }, { token: FEATURE_REDUCERS }, { token: ReducerManager }, { token: StoreRootModule }, { token: _ACTION_TYPE_UNIQUENESS_CHECK, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreFeatureModule }); }\n    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreFeatureModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreFeatureModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_STORE_FEATURES]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [FEATURE_REDUCERS]\n                }] }, { type: ReducerManager }, { type: StoreRootModule }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [_ACTION_TYPE_UNIQUENESS_CHECK]\n                }] }] });\nclass StoreModule {\n    static forRoot(reducers, config) {\n        return {\n            ngModule: StoreRootModule,\n            providers: [..._provideStore(reducers, config)],\n        };\n    }\n    static forFeature(featureNameOrSlice, reducers, config = {}) {\n        return {\n            ngModule: StoreFeatureModule,\n            providers: [..._provideState(featureNameOrSlice, reducers, config)],\n        };\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreModule }); }\n    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: StoreModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nfunction on(...args) {\n    const reducer = args.pop();\n    const types = args.map((creator) => creator.type);\n    return { reducer, types };\n}\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nfunction createReducer(initialState, ...ons) {\n    const map = new Map();\n    for (const on of ons) {\n        for (const type of on.types) {\n            const existingReducer = map.get(type);\n            if (existingReducer) {\n                const newReducer = (state, action) => on.reducer(existingReducer(state, action), action);\n                map.set(type, newReducer);\n            }\n            else {\n                map.set(type, on.reducer);\n            }\n        }\n    }\n    return function (state = initialState, action) {\n        const reducer = map.get(action.type);\n        return reducer ? reducer(state, action) : state;\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIVE_RUNTIME_CHECKS, ActionsSubject, FEATURE_REDUCERS, FEATURE_STATE_PROVIDER, INIT, INITIAL_REDUCERS, INITIAL_STATE, META_REDUCERS, REDUCER_FACTORY, ROOT_STORE_PROVIDER, ReducerManager, ReducerManagerDispatcher, ReducerObservable, STORE_FEATURES, ScannedActionsSubject, State, StateObservable, Store, StoreFeatureModule, StoreModule, StoreRootModule, UPDATE, USER_PROVIDED_META_REDUCERS, USER_RUNTIME_CHECKS, combineReducers, compose, createAction, createActionGroup, createFeature, createFeatureSelector, createReducer, createReducerFactory, createSelector, createSelectorFactory, defaultMemoize, defaultStateFn, emptyProps, isNgrxMockEnvironment, on, props, provideState, provideStore, reduceState, resultMemoize, select, setNgrxMockEnvironment, union };\n"],"mappings":"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B,CAAC;EACnD,MAAMX,SAAS,GAAGA,CAAC,GAAGa,eAAe,KAAKD,UAAU,CAAC5O,MAAM,CAAC,CAACuE,MAAM,EAAEvG,GAAG,EAAE8Q,KAAK,MAAM;IACjF,GAAGvK,MAAM;IACT,CAACvG,GAAG,GAAG6Q,eAAe,CAACC,KAAK;EAChC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACP,OAAO,CAAC,GAAGtB,SAAS,EAAEQ,SAAS,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,aAAaA,CAACC,aAAa,EAAE;EAClC,MAAM;IAAEpP,IAAI;IAAEoE,OAAO;IAAEiL,cAAc,EAAEC;EAAuB,CAAC,GAAGF,aAAa;EAC/E,MAAMG,eAAe,GAAGf,qBAAqB,CAACxO,IAAI,CAAC;EACnD,MAAMwP,eAAe,GAAGC,qBAAqB,CAACF,eAAe,EAAEnL,OAAO,CAAC;EACvE,MAAMsL,aAAa,GAAG;IAClB,CAAC,SAASlQ,UAAU,CAACQ,IAAI,CAAC,OAAO,GAAGuP,eAAe;IACnD,GAAGC;EACP,CAAC;EACD,MAAMH,cAAc,GAAGC,qBAAqB,GACtCA,qBAAqB,CAACI,aAAa,CAAC,GACpC,CAAC,CAAC;EACR,OAAO;IACH1P,IAAI;IACJoE,OAAO;IACP,GAAGsL,aAAa;IAChB,GAAGL;EACP,CAAC;AACL;AACA,SAASI,qBAAqBA,CAACF,eAAe,EAAEnL,OAAO,EAAE;EACrD,MAAMT,YAAY,GAAGgM,eAAe,CAACvL,OAAO,CAAC;EAC7C,MAAMwL,UAAU,GAAIlE,aAAa,CAAC/H,YAAY,CAAC,GAAGtF,MAAM,CAACC,IAAI,CAACqF,YAAY,CAAC,GAAG,EAAG;EACjF,OAAOiM,UAAU,CAACxP,MAAM,CAAC,CAACoP,eAAe,EAAEK,SAAS,MAAM;IACtD,GAAGL,eAAe;IAClB,CAAC,SAAShQ,UAAU,CAACqQ,SAAS,CAAC,EAAE,GAAGrC,cAAc,CAAC+B,eAAe,EAAGO,WAAW,IAAKA,WAAW,GAAGD,SAAS,CAAC;EACjH,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACX;AACA,SAASF,eAAeA,CAACvL,OAAO,EAAE;EAC9B,OAAOA,OAAO,CAACnF,SAAS,EAAE;IAAET,IAAI,EAAE;EAAqB,CAAC,CAAC;AAC7D;AAEA,SAASuR,oBAAoBA,CAACrM,QAAQ,EAAE;EACpC,OAAOA,QAAQ,YAAY/G,cAAc,GAAGK,MAAM,CAAC0G,QAAQ,CAAC,GAAGA,QAAQ;AAC3E;AACA,SAASsM,mBAAmBA,CAACC,OAAO,EAAEC,aAAa,EAAE;EACjD,OAAOA,aAAa,CAACnS,GAAG,CAAC,CAACoS,IAAI,EAAEjB,KAAK,KAAK;IACtC,IAAIe,OAAO,CAACf,KAAK,CAAC,YAAYvS,cAAc,EAAE;MAC1C,MAAMyT,IAAI,GAAGpT,MAAM,CAACiT,OAAO,CAACf,KAAK,CAAC,CAAC;MACnC,OAAO;QACH9Q,GAAG,EAAE+R,IAAI,CAAC/R,GAAG;QACbmH,cAAc,EAAE6K,IAAI,CAAC7K,cAAc,GAC7B6K,IAAI,CAAC7K,cAAc,GACnB9B,eAAe;QACrB+B,YAAY,EAAE4K,IAAI,CAAC5K,YAAY,GAAG4K,IAAI,CAAC5K,YAAY,GAAG,EAAE;QACxD7B,YAAY,EAAEyM,IAAI,CAACzM;MACvB,CAAC;IACL;IACA,OAAOwM,IAAI;EACf,CAAC,CAAC;AACN;AACA,SAASE,sBAAsBA,CAACC,iBAAiB,EAAE;EAC/C,OAAOA,iBAAiB,CAACvS,GAAG,CAAEqG,OAAO,IAAK;IACtC,OAAOA,OAAO,YAAYzH,cAAc,GAAGK,MAAM,CAACoH,OAAO,CAAC,GAAGA,OAAO;EACxE,CAAC,CAAC;AACN;AACA,SAASmM,oBAAoBA,CAAC5M,YAAY,EAAE;EACxC,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;IACpC,OAAOA,YAAY,CAAC,CAAC;EACzB;EACA,OAAOA,YAAY;AACvB;AACA,SAAS6M,mBAAmBA,CAAChL,YAAY,EAAEiL,wBAAwB,EAAE;EACjE,OAAOjL,YAAY,CAACkL,MAAM,CAACD,wBAAwB,CAAC;AACxD;AACA,SAASE,oBAAoBA,CAAA,EAAG;EAC5B,MAAM3G,KAAK,GAAGhN,MAAM,CAACkM,KAAK,EAAE;IAAE0H,QAAQ,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAK,CAAC,CAAC;EAC/D,IAAI7G,KAAK,EAAE;IACP,MAAM,IAAI5I,SAAS,CAAC,yGAAyG,CAAC;EAClI;EACA,OAAO,SAAS;AACpB;AAEA,SAAS0P,4BAA4BA,CAAC1M,OAAO,EAAE2M,MAAM,EAAE;EACnD,OAAO,UAAU9M,KAAK,EAAE9C,MAAM,EAAE;IAC5B,MAAM6P,GAAG,GAAGD,MAAM,CAAC5P,MAAM,CAACA,MAAM,CAAC,GAAG8P,MAAM,CAAC9P,MAAM,CAAC,GAAGA,MAAM;IAC3D,MAAMgD,SAAS,GAAGC,OAAO,CAACH,KAAK,EAAE+M,GAAG,CAAC;IACrC,OAAOD,MAAM,CAAC9M,KAAK,CAAC,CAAC,GAAGgN,MAAM,CAAC9M,SAAS,CAAC,GAAGA,SAAS;EACzD,CAAC;AACL;AACA,SAAS8M,MAAMA,CAAC9F,MAAM,EAAE;EACpB9M,MAAM,CAAC4S,MAAM,CAAC9F,MAAM,CAAC;EACrB,MAAM+F,gBAAgB,GAAGpF,UAAU,CAACX,MAAM,CAAC;EAC3C9M,MAAM,CAAC8S,mBAAmB,CAAChG,MAAM,CAAC,CAAChE,OAAO,CAAEiK,IAAI,IAAK;IACjD;IACA,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MACtB;IACJ;IACA,IAAIrF,cAAc,CAACb,MAAM,EAAEiG,IAAI,CAAC,KAC3BF,gBAAgB,GACXE,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,WAAW,GAC9D,IAAI,CAAC,EAAE;MACb,MAAME,SAAS,GAAGnG,MAAM,CAACiG,IAAI,CAAC;MAC9B,IAAI,CAAC5F,YAAY,CAAC8F,SAAS,CAAC,IAAIxF,UAAU,CAACwF,SAAS,CAAC,KACjD,CAACjT,MAAM,CAACkT,QAAQ,CAACD,SAAS,CAAC,EAAE;QAC7BL,MAAM,CAACK,SAAS,CAAC;MACrB;IACJ;EACJ,CAAC,CAAC;EACF,OAAOnG,MAAM;AACjB;AAEA,SAASqG,6BAA6BA,CAACpN,OAAO,EAAE2M,MAAM,EAAE;EACpD,OAAO,UAAU9M,KAAK,EAAE9C,MAAM,EAAE;IAC5B,IAAI4P,MAAM,CAAC5P,MAAM,CAACA,MAAM,CAAC,EAAE;MACvB,MAAMsQ,oBAAoB,GAAGC,iBAAiB,CAACvQ,MAAM,CAAC;MACtDwQ,qBAAqB,CAACF,oBAAoB,EAAE,QAAQ,CAAC;IACzD;IACA,MAAMtN,SAAS,GAAGC,OAAO,CAACH,KAAK,EAAE9C,MAAM,CAAC;IACxC,IAAI4P,MAAM,CAAC9M,KAAK,CAAC,CAAC,EAAE;MAChB,MAAM2N,mBAAmB,GAAGF,iBAAiB,CAACvN,SAAS,CAAC;MACxDwN,qBAAqB,CAACC,mBAAmB,EAAE,OAAO,CAAC;IACvD;IACA,OAAOzN,SAAS;EACpB,CAAC;AACL;AACA,SAASuN,iBAAiBA,CAACvG,MAAM,EAAE0G,IAAI,GAAG,EAAE,EAAE;EAC1C;EACA,IAAI,CAAC3G,WAAW,CAACC,MAAM,CAAC,IAAIC,MAAM,CAACD,MAAM,CAAC,KAAK0G,IAAI,CAAC/N,MAAM,KAAK,CAAC,EAAE;IAC9D,OAAO;MACH+N,IAAI,EAAE,CAAC,MAAM,CAAC;MACdvS,KAAK,EAAE6L;IACX,CAAC;EACL;EACA,MAAM7M,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC6M,MAAM,CAAC;EAChC,OAAO7M,IAAI,CAAC8B,MAAM,CAAC,CAACuE,MAAM,EAAEvG,GAAG,KAAK;IAChC,IAAIuG,MAAM,EAAE;MACR,OAAOA,MAAM;IACjB;IACA,MAAMrF,KAAK,GAAG6L,MAAM,CAAC/M,GAAG,CAAC;IACzB;IACA,IAAI2N,WAAW,CAACzM,KAAK,CAAC,EAAE;MACpB,OAAOqF,MAAM;IACjB;IACA,IAAIuG,WAAW,CAAC5L,KAAK,CAAC,IAClB8L,MAAM,CAAC9L,KAAK,CAAC,IACbiM,QAAQ,CAACjM,KAAK,CAAC,IACfgM,SAAS,CAAChM,KAAK,CAAC,IAChB+L,QAAQ,CAAC/L,KAAK,CAAC,IACfoG,OAAO,CAACpG,KAAK,CAAC,EAAE;MAChB,OAAO,KAAK;IAChB;IACA,IAAIoM,aAAa,CAACpM,KAAK,CAAC,EAAE;MACtB,OAAOoS,iBAAiB,CAACpS,KAAK,EAAE,CAAC,GAAGuS,IAAI,EAAEzT,GAAG,CAAC,CAAC;IACnD;IACA,OAAO;MACHyT,IAAI,EAAE,CAAC,GAAGA,IAAI,EAAEzT,GAAG,CAAC;MACpBkB;IACJ,CAAC;EACL,CAAC,EAAE,KAAK,CAAC;AACb;AACA,SAASqS,qBAAqBA,CAACG,cAAc,EAAEC,OAAO,EAAE;EACpD,IAAID,cAAc,KAAK,KAAK,EAAE;IAC1B;EACJ;EACA,MAAME,kBAAkB,GAAGF,cAAc,CAACD,IAAI,CAAC/Q,IAAI,CAAC,GAAG,CAAC;EACxD,MAAMsJ,KAAK,GAAG,IAAIrL,KAAK,CAAC,2BAA2BgT,OAAO,QAAQC,kBAAkB,MAAM/G,iBAAiB,UAAU8G,OAAO,iBAAiB,CAAC;EAC9I3H,KAAK,CAAC9K,KAAK,GAAGwS,cAAc,CAACxS,KAAK;EAClC8K,KAAK,CAAC4H,kBAAkB,GAAGA,kBAAkB;EAC7C,MAAM5H,KAAK;AACf;AAEA,SAAS6H,yBAAyBA,CAAC7N,OAAO,EAAE2M,MAAM,EAAE;EAChD,OAAO,UAAU9M,KAAK,EAAE9C,MAAM,EAAE;IAC5B,IAAI4P,MAAM,CAAC5P,MAAM,CAACA,MAAM,CAAC,IAAI,CAAC1E,EAAE,CAACyV,MAAM,CAACC,eAAe,CAAC,CAAC,EAAE;MACvD,MAAM,IAAIpT,KAAK,CAAC,WAAWoC,MAAM,CAAC3C,IAAI,6BAA6ByM,iBAAiB,2BAA2B,CAAC;IACpH;IACA,OAAO7G,OAAO,CAACH,KAAK,EAAE9C,MAAM,CAAC;EACjC,CAAC;AACL;AAEA,SAASiR,yBAAyBA,CAACC,aAAa,EAAE;EAC9C,IAAInV,SAAS,CAAC,CAAC,EAAE;IACb,OAAO;MACHoV,0BAA0B,EAAE,KAAK;MACjCC,2BAA2B,EAAE,KAAK;MAClCC,uBAAuB,EAAE,IAAI;MAC7BC,wBAAwB,EAAE,IAAI;MAC9BC,wBAAwB,EAAE,KAAK;MAC/BC,0BAA0B,EAAE,KAAK;MACjC,GAAGN;IACP,CAAC;EACL;EACA,OAAO;IACHC,0BAA0B,EAAE,KAAK;IACjCC,2BAA2B,EAAE,KAAK;IAClCC,uBAAuB,EAAE,KAAK;IAC9BC,wBAAwB,EAAE,KAAK;IAC/BC,wBAAwB,EAAE,KAAK;IAC/BC,0BAA0B,EAAE;EAChC,CAAC;AACL;AACA,SAASC,mCAAmCA,CAAC;EAAEL,2BAA2B;EAAED;AAA4B,CAAC,EAAE;EACvG,OAAQlO,OAAO,IAAKmO,2BAA2B,IAAID,0BAA0B,GACvEd,6BAA6B,CAACpN,OAAO,EAAE;IACrCjD,MAAM,EAAGA,MAAM,IAAKoR,2BAA2B,IAAI,CAACM,gBAAgB,CAAC1R,MAAM,CAAC;IAC5E8C,KAAK,EAAEA,CAAA,KAAMqO;EACjB,CAAC,CAAC,GACAlO,OAAO;AACjB;AACA,SAAS0O,kCAAkCA,CAAC;EAAEL,wBAAwB;EAAED;AAAyB,CAAC,EAAE;EAChG,OAAQpO,OAAO,IAAKqO,wBAAwB,IAAID,uBAAuB,GACjE1B,4BAA4B,CAAC1M,OAAO,EAAE;IACpCjD,MAAM,EAAGA,MAAM,IAAKsR,wBAAwB,IAAI,CAACI,gBAAgB,CAAC1R,MAAM,CAAC;IACzE8C,KAAK,EAAEA,CAAA,KAAMuO;EACjB,CAAC,CAAC,GACApO,OAAO;AACjB;AACA,SAASyO,gBAAgBA,CAAC1R,MAAM,EAAE;EAC9B,OAAOA,MAAM,CAAC3C,IAAI,CAAC6S,UAAU,CAAC,OAAO,CAAC;AAC1C;AACA,SAAS0B,8BAA8BA,CAAC;EAAEL;AAA0B,CAAC,EAAE;EACnE,OAAQtO,OAAO,IAAKsO,wBAAwB,GACtCT,yBAAyB,CAAC7N,OAAO,EAAE;IACjCjD,MAAM,EAAGA,MAAM,IAAKuR,wBAAwB,IAAI,CAACG,gBAAgB,CAAC1R,MAAM;EAC5E,CAAC,CAAC,GACAiD,OAAO;AACjB;AACA,SAAS4O,oBAAoBA,CAACX,aAAa,EAAE;EACzC,OAAO,CACH;IACI9K,OAAO,EAAEnE,oBAAoB;IAC7B6P,QAAQ,EAAEZ;EACd,CAAC,EACD;IACI9K,OAAO,EAAEpE,mBAAmB;IAC5B+P,UAAU,EAAEC,qBAAqB;IACjCC,IAAI,EAAE,CAAChQ,oBAAoB;EAC/B,CAAC,EACD;IACImE,OAAO,EAAElE,qBAAqB;IAC9B+P,IAAI,EAAE,CAACjQ,mBAAmB,CAAC;IAC3B+P,UAAU,EAAEd;EAChB,CAAC,EACD;IACI7K,OAAO,EAAEtE,aAAa;IACtBoQ,KAAK,EAAE,IAAI;IACXD,IAAI,EAAE,CAAC/P,qBAAqB,CAAC;IAC7B6P,UAAU,EAAEJ;EAChB,CAAC,EACD;IACIvL,OAAO,EAAEtE,aAAa;IACtBoQ,KAAK,EAAE,IAAI;IACXD,IAAI,EAAE,CAAC/P,qBAAqB,CAAC;IAC7B6P,UAAU,EAAEN;EAChB,CAAC,EACD;IACIrL,OAAO,EAAEtE,aAAa;IACtBoQ,KAAK,EAAE,IAAI;IACXD,IAAI,EAAE,CAAC/P,qBAAqB,CAAC;IAC7B6P,UAAU,EAAEH;EAChB,CAAC,CACJ;AACL;AACA,SAASO,4BAA4BA,CAAA,EAAG;EACpC,OAAO,CACH;IACI/L,OAAO,EAAEjE,6BAA6B;IACtC+P,KAAK,EAAE,IAAI;IACXD,IAAI,EAAE,CAAC/P,qBAAqB,CAAC;IAC7B6P,UAAU,EAAEK;EAChB,CAAC,CACJ;AACL;AACA,SAASJ,qBAAqBA,CAACd,aAAa,EAAE;EAC1C,OAAOA,aAAa;AACxB;AACA,SAASkB,0BAA0BA,CAAC9U,MAAM,EAAE;EACxC,IAAI,CAACA,MAAM,CAACkU,0BAA0B,EAAE;IACpC;EACJ;EACA,MAAMa,UAAU,GAAGnV,MAAM,CAACoV,OAAO,CAACvV,uBAAuB,CAAC,CACrDwG,MAAM,CAAC,CAAC,GAAGgP,aAAa,CAAC,KAAKA,aAAa,GAAG,CAAC,CAAC,CAChD3V,GAAG,CAAC,CAAC,CAACS,IAAI,CAAC,KAAKA,IAAI,CAAC;EAC1B,IAAIgV,UAAU,CAAC1P,MAAM,EAAE;IACnB,MAAM,IAAI/E,KAAK,CAAC,+CAA+CyU,UAAU,CACpEzV,GAAG,CAAES,IAAI,IAAK,IAAIA,IAAI,GAAG,CAAC,CAC1BsC,IAAI,CAAC,IAAI,CAAC,KAAKmK,iBAAiB,6BAA6B,CAAC;EACvE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0I,YAAYA,CAACC,kBAAkB,EAAElQ,QAAQ,EAAEjF,MAAM,GAAG,CAAC,CAAC,EAAE;EAC7D,OAAOtB,wBAAwB,CAAC,CAC5B,GAAG0W,aAAa,CAACD,kBAAkB,EAAElQ,QAAQ,EAAEjF,MAAM,CAAC,EACtDqV,0BAA0B,CAC7B,CAAC;AACN;AACA,SAASC,aAAaA,CAACrQ,QAAQ,GAAG,CAAC,CAAC,EAAEjF,MAAM,GAAG,CAAC,CAAC,EAAE;EAC/C,OAAO,CACH;IACI8I,OAAO,EAAErF,iBAAiB;IAC1BgR,UAAU,EAAEvC;EAChB,CAAC,EACD;IAAEpJ,OAAO,EAAEpF,cAAc;IAAE8Q,QAAQ,EAAExU,MAAM,CAACkF;EAAa,CAAC,EAC1D;IACI4D,OAAO,EAAEnF,aAAa;IACtB8Q,UAAU,EAAE3C,oBAAoB;IAChC6C,IAAI,EAAE,CAACjR,cAAc;EACzB,CAAC,EACD;IAAEoF,OAAO,EAAE/E,iBAAiB;IAAEyQ,QAAQ,EAAEvP;EAAS,CAAC,EAClD;IACI6D,OAAO,EAAE7E,eAAe;IACxB8E,WAAW,EAAE9D,QAAQ,YAAY/G,cAAc,GAAG+G,QAAQ,GAAGlB;EACjE,CAAC,EACD;IACI+E,OAAO,EAAEhF,gBAAgB;IACzB6Q,IAAI,EAAE,CAAC5Q,iBAAiB,EAAE,CAAC,IAAI5F,MAAM,CAAC8F,eAAe,CAAC,CAAC,CAAC;IACxDwQ,UAAU,EAAEnD;EAChB,CAAC,EACD;IACIxI,OAAO,EAAEvE,2BAA2B;IACpCiQ,QAAQ,EAAExU,MAAM,CAAC+G,YAAY,GAAG/G,MAAM,CAAC+G,YAAY,GAAG;EAC1D,CAAC,EACD;IACI+B,OAAO,EAAErE,uBAAuB;IAChCkQ,IAAI,EAAE,CAACnQ,aAAa,EAAED,2BAA2B,CAAC;IAClDkQ,UAAU,EAAE1C;EAChB,CAAC,EACD;IACIjJ,OAAO,EAAEjF,gBAAgB;IACzB2Q,QAAQ,EAAExU,MAAM,CAAC8G,cAAc,GAAG9G,MAAM,CAAC8G,cAAc,GAAG9B;EAC9D,CAAC,EACD;IACI8D,OAAO,EAAElF,eAAe;IACxB+Q,IAAI,EAAE,CAAC9Q,gBAAgB,EAAEY,uBAAuB,CAAC;IACjDgQ,UAAU,EAAE5N;EAChB,CAAC,EACDrD,yBAAyB,EACzBqF,yBAAyB,EACzBO,iCAAiC,EACjCoB,eAAe,EACfyB,eAAe,EACfsI,oBAAoB,CAACvU,MAAM,CAAC4T,aAAa,CAAC,EAC1CiB,4BAA4B,CAAC,CAAC,CACjC;AACL;AACA,SAASU,wBAAwBA,CAAA,EAAG;EAChChX,MAAM,CAACgE,cAAc,CAAC;EACtBhE,MAAM,CAAC8I,iBAAiB,CAAC;EACzB9I,MAAM,CAACyK,qBAAqB,CAAC;EAC7BzK,MAAM,CAACkM,KAAK,CAAC;EACblM,MAAM,CAACkF,iBAAiB,EAAE;IAAE0O,QAAQ,EAAE;EAAK,CAAC,CAAC;EAC7C5T,MAAM,CAACsG,6BAA6B,EAAE;IAAEsN,QAAQ,EAAE;EAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA,MAAMqD,0BAA0B,GAAG,CAC/B;EAAE1M,OAAO,EAAEhE,mBAAmB;EAAE2P,UAAU,EAAEc;AAAyB,CAAC,EACtE5W,6BAA6B,CAAC,MAAMJ,MAAM,CAACuG,mBAAmB,CAAC,CAAC,CACnE;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2Q,YAAYA,CAACxQ,QAAQ,EAAEjF,MAAM,EAAE;EACpC,OAAOtB,wBAAwB,CAAC,CAC5B,GAAG4W,aAAa,CAACrQ,QAAQ,EAAEjF,MAAM,CAAC,EAClCwV,0BAA0B,CAC7B,CAAC;AACN;AACA,SAASE,2BAA2BA,CAAA,EAAG;EACnCnX,MAAM,CAACuG,mBAAmB,CAAC;EAC3B,MAAMgD,QAAQ,GAAGvJ,MAAM,CAAC6F,eAAe,CAAC;EACxC,MAAMuR,eAAe,GAAGpX,MAAM,CAAC+F,gBAAgB,CAAC;EAChD,MAAMsG,cAAc,GAAGrM,MAAM,CAACiJ,cAAc,CAAC;EAC7CjJ,MAAM,CAACsG,6BAA6B,EAAE;IAAEsN,QAAQ,EAAE;EAAK,CAAC,CAAC;EACzD,MAAMyD,KAAK,GAAG9N,QAAQ,CAACxI,GAAG,CAAC,CAACsI,OAAO,EAAE6I,KAAK,KAAK;IAC3C,MAAMoF,wBAAwB,GAAGF,eAAe,CAACG,KAAK,CAAC,CAAC;IACxD;IACA,MAAM7Q,QAAQ,GAAG4Q,wBAAwB,CAAC,eAAepF,KAAK,CAAC;IAC/D,OAAO;MACH,GAAG7I,OAAO;MACV3C,QAAQ;MACRC,YAAY,EAAE4M,oBAAoB,CAAClK,OAAO,CAAC1C,YAAY;IAC3D,CAAC;EACL,CAAC,CAAC;EACF0F,cAAc,CAAC/C,WAAW,CAAC+N,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA,MAAMP,0BAA0B,GAAG,CAC/B;EACIvM,OAAO,EAAE/D,sBAAsB;EAC/B0P,UAAU,EAAEiB;AAChB,CAAC,EACD/W,6BAA6B,CAAC,MAAMJ,MAAM,CAACwG,sBAAsB,CAAC,CAAC,CACtE;AACD,SAASqQ,aAAaA,CAACD,kBAAkB,EAAElQ,QAAQ,EAAEjF,MAAM,GAAG,CAAC,CAAC,EAAE;EAC9D,OAAO,CACH;IACI8I,OAAO,EAAE3E,gBAAgB;IACzByQ,KAAK,EAAE,IAAI;IACXJ,QAAQ,EAAEW,kBAAkB,YAAYvV,MAAM,GAAG,CAAC,CAAC,GAAGI;EAC1D,CAAC,EACD;IACI8I,OAAO,EAAE9E,cAAc;IACvB4Q,KAAK,EAAE,IAAI;IACXJ,QAAQ,EAAE;MACN7U,GAAG,EAAEwV,kBAAkB,YAAYvV,MAAM,GACnCuV,kBAAkB,CAAC5T,IAAI,GACvB4T,kBAAkB;MACxBrO,cAAc,EAAE,EAAE9G,MAAM,YAAY9B,cAAc,CAAC,IAAI8B,MAAM,CAAC8G,cAAc,GACtE9G,MAAM,CAAC8G,cAAc,GACrB9B,eAAe;MACrB+B,YAAY,EAAE,EAAE/G,MAAM,YAAY9B,cAAc,CAAC,IAAI8B,MAAM,CAAC+G,YAAY,GAClE/G,MAAM,CAAC+G,YAAY,GACnB,EAAE;MACR7B,YAAY,EAAE,EAAElF,MAAM,YAAY9B,cAAc,CAAC,IAAI8B,MAAM,CAACkF,YAAY,GAClElF,MAAM,CAACkF,YAAY,GACnB1E;IACV;EACJ,CAAC,EACD;IACIsI,OAAO,EAAE1E,eAAe;IACxBuQ,IAAI,EAAE,CAACxQ,gBAAgB,EAAEH,cAAc,CAAC;IACxCyQ,UAAU,EAAElD;EAChB,CAAC,EACD;IACIzI,OAAO,EAAE5E,iBAAiB;IAC1B0Q,KAAK,EAAE,IAAI;IACXJ,QAAQ,EAAEW,kBAAkB,YAAYvV,MAAM,GACxCuV,kBAAkB,CAACxP,OAAO,GAC1BV;EACV,CAAC,EACD;IACI6D,OAAO,EAAEzE,uBAAuB;IAChCuQ,KAAK,EAAE,IAAI;IACX7L,WAAW,EAAE9D,QAAQ,YAAY/G,cAAc,GAAG+G,QAAQ,GAAGf;EACjE,CAAC,EACD;IACI4E,OAAO,EAAExE,gBAAgB;IACzBsQ,KAAK,EAAE,IAAI;IACXD,IAAI,EAAE,CAACzQ,iBAAiB,EAAE,CAAC,IAAI/F,MAAM,CAACkG,uBAAuB,CAAC,CAAC,CAAC;IAChEoQ,UAAU,EAAE7C;EAChB,CAAC,EACDiD,4BAA4B,CAAC,CAAC,CACjC;AACL;AAAC,IAEKkB,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClBvT,WAAWA,CAAC+G,QAAQ,EAAEC,QAAQ,EAAEwM,eAAe,EAAEzK,KAAK,EAAE0K,KAAK,EAAEC,WAAW,EAAE,CAAE;IAC9E;IAAA,QAAApT,CAAA,GAA4B,IAAI,CAACC,IAAI,YAAAoT,wBAAAlT,iBAAA;MAAA,YAAAA,iBAAA,IAAwF8S,eAAe,EA9uCzB/X,EAAE,CAAA4K,QAAA,CA8uCyCrG,cAAc,GA9uCzDvE,EAAE,CAAA4K,QAAA,CA8uCoEvB,iBAAiB,GA9uCvFrJ,EAAE,CAAA4K,QAAA,CA8uCkGI,qBAAqB,GA9uCzHhL,EAAE,CAAA4K,QAAA,CA8uCoI6B,KAAK,GA9uC3IzM,EAAE,CAAA4K,QAAA,CA8uCsJnF,iBAAiB,MA9uCzKzF,EAAE,CAAA4K,QAAA,CA8uCoM/D,6BAA6B;IAAA,CAA2D;IACjZ;IAAA,QAAA3B,EAAA,GAA4B,IAAI,CAACkT,IAAI,kBA/uC8EpY,EAAE,CAAAqY,gBAAA;MAAAtW,IAAA,EA+uCSgW;IAAe,EAAG;IAChJ;IAAA,QAAAzL,EAAA,GAA4B,IAAI,CAACgM,IAAI,kBAhvC8EtY,EAAE,CAAAuY,gBAAA,IAgvC2B;EACpJ;EAAC,OALKR,eAAe;AAAA;AAMrB;EAAA,QAAAxS,SAAA,oBAAAA,SAAA;AAAA;AAayB,IACnBiT,kBAAkB;EAAxB,MAAMA,kBAAkB,CAAC;IACrBhU,WAAWA,CAACsF,QAAQ,EAAE6N,eAAe,EAAE/K,cAAc,EAAE6L,IAAI,EAAEP,WAAW,EAAE;MACtE,IAAI,CAACpO,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAAC6N,eAAe,GAAGA,eAAe;MACtC,IAAI,CAAC/K,cAAc,GAAGA,cAAc;MACpC,MAAMgL,KAAK,GAAG9N,QAAQ,CAACxI,GAAG,CAAC,CAACsI,OAAO,EAAE6I,KAAK,KAAK;QAC3C,MAAMoF,wBAAwB,GAAGF,eAAe,CAACG,KAAK,CAAC,CAAC;QACxD;QACA,MAAM7Q,QAAQ,GAAG4Q,wBAAwB,CAAC,eAAepF,KAAK,CAAC;QAC/D,OAAO;UACH,GAAG7I,OAAO;UACV3C,QAAQ;UACRC,YAAY,EAAE4M,oBAAoB,CAAClK,OAAO,CAAC1C,YAAY;QAC3D,CAAC;MACL,CAAC,CAAC;MACF0F,cAAc,CAAC/C,WAAW,CAAC+N,KAAK,CAAC;IACrC;IACA;IACA/S,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC+H,cAAc,CAAC1C,cAAc,CAAC,IAAI,CAACJ,QAAQ,CAAC;IACrD;IACA;IAAA,QAAAhF,CAAA,GAA4B,IAAI,CAACC,IAAI,YAAA2T,2BAAAzT,iBAAA;MAAA,YAAAA,iBAAA,IAAwFuT,kBAAkB,EArxC5BxY,EAAE,CAAA4K,QAAA,CAqxC4CxE,eAAe,GArxC7DpG,EAAE,CAAA4K,QAAA,CAqxCwEtE,gBAAgB,GArxC1FtG,EAAE,CAAA4K,QAAA,CAqxCqGpB,cAAc,GArxCrHxJ,EAAE,CAAA4K,QAAA,CAqxCgImN,eAAe,GArxCjJ/X,EAAE,CAAA4K,QAAA,CAqxC4J/D,6BAA6B;IAAA,CAA2D;IACzW;IAAA,QAAA3B,EAAA,GAA4B,IAAI,CAACkT,IAAI,kBAtxC8EpY,EAAE,CAAAqY,gBAAA;MAAAtW,IAAA,EAsxCSyW;IAAkB,EAAG;IACnJ;IAAA,QAAAlM,EAAA,GAA4B,IAAI,CAACgM,IAAI,kBAvxC8EtY,EAAE,CAAAuY,gBAAA,IAuxC8B;EACvJ;EAAC,OAxBKC,kBAAkB;AAAA;AAyBxB;EAAA,QAAAjT,SAAA,oBAAAA,SAAA;AAAA;AAcyB,IACnBoT,WAAW;EAAjB,MAAMA,WAAW,CAAC;IACd,OAAOC,OAAOA,CAAC3R,QAAQ,EAAEjF,MAAM,EAAE;MAC7B,OAAO;QACH6W,QAAQ,EAAEd,eAAe;QACzBe,SAAS,EAAE,CAAC,GAAGxB,aAAa,CAACrQ,QAAQ,EAAEjF,MAAM,CAAC;MAClD,CAAC;IACL;IACA,OAAO+W,UAAUA,CAAC5B,kBAAkB,EAAElQ,QAAQ,EAAEjF,MAAM,GAAG,CAAC,CAAC,EAAE;MACzD,OAAO;QACH6W,QAAQ,EAAEL,kBAAkB;QAC5BM,SAAS,EAAE,CAAC,GAAG1B,aAAa,CAACD,kBAAkB,EAAElQ,QAAQ,EAAEjF,MAAM,CAAC;MACtE,CAAC;IACL;IACA;IAAA,QAAA8C,CAAA,GAA4B,IAAI,CAACC,IAAI,YAAAiU,oBAAA/T,iBAAA;MAAA,YAAAA,iBAAA,IAAwF0T,WAAW;IAAA,CAAkD;IAC1L;IAAA,QAAAzT,EAAA,GAA4B,IAAI,CAACkT,IAAI,kBAtzC8EpY,EAAE,CAAAqY,gBAAA;MAAAtW,IAAA,EAszCS4W;IAAW,EAAG;IAC5I;IAAA,QAAArM,EAAA,GAA4B,IAAI,CAACgM,IAAI,kBAvzC8EtY,EAAE,CAAAuY,gBAAA,IAuzCuB;EAChJ;EAAC,OAhBKI,WAAW;AAAA;AAiBjB;EAAA,QAAApT,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0T,EAAEA,CAAC,GAAG/W,IAAI,EAAE;EACjB,MAAMyF,OAAO,GAAGzF,IAAI,CAACgX,GAAG,CAAC,CAAC;EAC1B,MAAMC,KAAK,GAAGjX,IAAI,CAACZ,GAAG,CAAEqB,OAAO,IAAKA,OAAO,CAACZ,IAAI,CAAC;EACjD,OAAO;IAAE4F,OAAO;IAAEwR;EAAM,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAClS,YAAY,EAAE,GAAGmS,GAAG,EAAE;EACzC,MAAM/X,GAAG,GAAG,IAAIgY,GAAG,CAAC,CAAC;EACrB,KAAK,MAAML,EAAE,IAAII,GAAG,EAAE;IAClB,KAAK,MAAMtX,IAAI,IAAIkX,EAAE,CAACE,KAAK,EAAE;MACzB,MAAMI,eAAe,GAAGjY,GAAG,CAACkY,GAAG,CAACzX,IAAI,CAAC;MACrC,IAAIwX,eAAe,EAAE;QACjB,MAAME,UAAU,GAAGA,CAACjS,KAAK,EAAE9C,MAAM,KAAKuU,EAAE,CAACtR,OAAO,CAAC4R,eAAe,CAAC/R,KAAK,EAAE9C,MAAM,CAAC,EAAEA,MAAM,CAAC;QACxFpD,GAAG,CAACoY,GAAG,CAAC3X,IAAI,EAAE0X,UAAU,CAAC;MAC7B,CAAC,MACI;QACDnY,GAAG,CAACoY,GAAG,CAAC3X,IAAI,EAAEkX,EAAE,CAACtR,OAAO,CAAC;MAC7B;IACJ;EACJ;EACA,OAAO,UAAUH,KAAK,GAAGN,YAAY,EAAExC,MAAM,EAAE;IAC3C,MAAMiD,OAAO,GAAGrG,GAAG,CAACkY,GAAG,CAAC9U,MAAM,CAAC3C,IAAI,CAAC;IACpC,OAAO4F,OAAO,GAAGA,OAAO,CAACH,KAAK,EAAE9C,MAAM,CAAC,GAAG8C,KAAK;EACnD,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASZ,qBAAqB,EAAErC,cAAc,EAAE+B,gBAAgB,EAAES,sBAAsB,EAAEzC,IAAI,EAAEwB,gBAAgB,EAAEH,aAAa,EAAEa,aAAa,EAAEZ,eAAe,EAAEkB,mBAAmB,EAAE0C,cAAc,EAAEF,wBAAwB,EAAED,iBAAiB,EAAErD,cAAc,EAAEgF,qBAAqB,EAAEM,KAAK,EAAED,eAAe,EAAEoB,KAAK,EAAE+L,kBAAkB,EAAEG,WAAW,EAAEZ,eAAe,EAAExO,MAAM,EAAEhD,2BAA2B,EAAEG,mBAAmB,EAAEM,eAAe,EAAEoB,OAAO,EAAEtG,YAAY,EAAE0B,iBAAiB,EAAEkP,aAAa,EAAEX,qBAAqB,EAAEqH,aAAa,EAAEvQ,oBAAoB,EAAEkI,cAAc,EAAEE,qBAAqB,EAAEZ,cAAc,EAAEa,cAAc,EAAElN,UAAU,EAAE2L,qBAAqB,EAAEsJ,EAAE,EAAE5W,KAAK,EAAE6U,YAAY,EAAEO,YAAY,EAAE1L,WAAW,EAAEmE,aAAa,EAAEpD,MAAM,EAAE4C,sBAAsB,EAAEjN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}