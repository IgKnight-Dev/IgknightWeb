{"ast":null,"code":"export const CssTopics = [{\n  id: 'css-introduction',\n  title: 'Introduction to CSS',\n  slug: 'css-introduction'\n}, {\n  id: 'css-selectors-properties',\n  title: 'Selectors & Properties',\n  slug: 'css-selectors-properties'\n}, {\n  id: 'css-colors-fonts',\n  title: 'Colors & Fonts',\n  slug: 'css-colors-fonts'\n}, {\n  id: 'css-box-model',\n  title: 'The Box Model',\n  slug: 'css-box-model'\n}, {\n  id: 'css-display-position',\n  title: 'Display & Positioning',\n  slug: 'css-display-position'\n}, {\n  id: 'css-flexbox',\n  title: 'Flexbox Layout',\n  slug: 'css-flexbox'\n}, {\n  id: 'css-grid',\n  title: 'CSS Grid',\n  slug: 'css-grid'\n}, {\n  id: 'css-position-display',\n  title: 'CSS Position & Display Explained Simply',\n  slug: 'css-position-display'\n}, {\n  id: 'css-spacing-sizing',\n  title: 'Margin, Padding & Sizing',\n  slug: 'css-spacing-sizing'\n}, {\n  id: 'css-background-border',\n  title: 'Backgrounds & Borders',\n  slug: 'css-background-border'\n}, {\n  id: 'css-pseudo-classes',\n  title: 'Pseudo-classes & Pseudo-elements',\n  slug: 'css-pseudo-classes'\n}, {\n  id: 'css-transitions-animations',\n  title: 'Transitions & Animations',\n  slug: 'css-transitions-animations'\n}, {\n  id: 'css-responsive',\n  title: 'Responsive Design & Media Queries',\n  slug: 'css-responsive'\n}, {\n  id: 'css-variables',\n  title: 'CSS Variables',\n  slug: 'css-variables'\n}, {\n  id: 'css-best-practices',\n  title: 'Best Practices & Real Projects',\n  slug: 'css-best-practices'\n}];\nexport function CssTopicContent(slug) {\n  switch (slug) {\n    case 'css-introduction':\n      return {\n        slug: 'css-introduction',\n        title: 'What is CSS?',\n        content: `\n          <p>CSS (Cascading Style Sheets) is what makes your website look <strong>awesome</strong>. Without it, everything would be plain, black-and-white text.</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Real-World Analogy</h3>\n          <p>Think of HTML as your body ‚Äî the bones and structure. CSS is like your clothes, hairstyle, and the way you present yourself. You still function without them... but you wouldn't look as cool.</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìå What Can CSS Do?</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>Change colors, fonts, and text size</li>\n            <li>Control spacing and layout</li>\n            <li>Make things move with animations</li>\n            <li>Make your website responsive (look great on all devices)</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Why \"Cascading\"?</h3>\n          <p>CSS rules \"cascade\" from top to bottom. If two styles target the same element, the one that's more specific or appears later usually wins. It's like stacking outfits ‚Äî the last shirt you wear covers the earlier one.</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è How Do You Use It?</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Inline:</strong> Directly on the element (not recommended)</li>\n            <li><strong>Internal:</strong> Inside a <code>&lt;style&gt;</code> tag in the HTML</li>\n            <li><strong>External:</strong> Linked via a separate <code>.css</code> file ‚Äî the best and cleanest way</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Where You'll See CSS</h3>\n          <p>Every modern website uses CSS ‚Äî whether it's a blog, an e-commerce site, or even platforms like YouTube and Netflix. It's what turns boring markup into beautiful interfaces.</p>\n        `,\n        proTip: \"Start small. Style one element at a time and use browser dev tools (Inspect Element) to play around and see what happens!\",\n        codeSamples: [{\n          language: 'html',\n          code: `\n          <!-- HTML + Internal CSS Example -->\n          <!DOCTYPE html>\n          <html>\n          <head>\n            <style>\n              h1 {\n                color: orange;\n                text-align: center;\n              }\n              p {\n                font-size: 16px;\n                color: #555;\n              }\n            </style>\n          </head>\n          <body>\n            <h1>Welcome to IgKnight!</h1>\n            <p>This page looks better with CSS üòâ</p>\n          </body>\n          </html>`\n        }, {\n          language: 'css',\n          code: `\n          /* External CSS Example */\n          body {\n            background-color: #f4f4f4;\n            font-family: sans-serif;\n          }\n\n          h1 {\n            color: #ef4444;\n          }\n\n          p {\n            color: #334155;\n            line-height: 1.5;\n          }`\n        }]\n      };\n    case 'css-syntax-selectors':\n      return {\n        slug: 'css-syntax-selectors',\n        title: 'CSS Syntax & Selectors',\n        content: `\n          <p>CSS works by <strong>selecting elements</strong> on the page and applying styles to them. It‚Äôs like saying, ‚ÄúHey, all the <code>&lt;h1&gt;</code> tags ‚Äî wear orange!‚Äù</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß© Basic CSS Rule Syntax</h3>\n          <p>A CSS rule has 2 parts:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Selector:</strong> What you want to style (like <code>h1</code> or <code>.btn</code>)</li>\n            <li><strong>Declaration Block:</strong> The styles inside <code>{ }</code></li>\n          </ul>\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\nselector {\n  property: value;\n}\n</code></pre>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Types of Selectors (The Essentials)</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><code>element</code> ‚Äî targets all elements (e.g., <code>p</code>, <code>h1</code>)</li>\n            <li><code>.class</code> ‚Äî targets elements with a specific class (e.g., <code>.card</code>)</li>\n            <li><code>#id</code> ‚Äî targets an element with a specific ID (e.g., <code>#header</code>)</li>\n            <li><code>div p</code> ‚Äî targets <code>p</code> inside <code>div</code> (called descendant selector)</li>\n            <li><code>div > p</code> ‚Äî targets direct children only</li>\n            <li><code>div + p</code> ‚Äî targets the very next <code>p</code> after a <code>div</code></li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü§ñ Real-World Analogy</h3>\n          <p>Imagine you walk into a room and shout instructions:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li>‚ÄúEveryone wearing a <strong>blue shirt</strong> ‚Äî sit down!‚Äù (like a <code>.blue</code> class)</li>\n            <li>‚ÄúYou, <strong>John!</strong>‚Äù (that‚Äôs a unique <code>#id</code>)</li>\n            <li>‚ÄúAll the <strong>chairs</strong> ‚Äî move left‚Äù (targeting all elements)</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Tip:</h3>\n          <p>Use <code>.class</code> for groups of elements, and <code>#id</code> only once per page. Keep your selectors clean and clear.</p>\n        `,\n        proTip: \"Inspect your elements in the browser and play with styles in real-time ‚Äî it‚Äôs the best way to learn selectors!\",\n        codeSamples: [{\n          language: 'css',\n          code: `\n        /* Element Selector */\n        h1 {\n          color: #f97316;\n        }\n\n        /* Class Selector */\n        .card {\n          background-color: white;\n          border-radius: 8px;\n          padding: 20px;\n        }\n\n        /* ID Selector */\n        #main-title {\n          font-size: 2rem;\n          text-align: center;\n        }`\n        }, {\n          language: 'html',\n          code: `\n              <!-- HTML Elements with classes and IDs -->\n              <h1 id=\"main-title\">Welcome!</h1>\n              <div class=\"card\">\n                <p>This is a card.</p>\n              </div>`\n        }]\n      };\n    case 'css-colors-fonts':\n      return {\n        slug: 'css-colors-fonts',\n        title: 'Colors & Fonts in CSS',\n        content: `\n          <p>Let‚Äôs add some life to your page! üåà With just a few lines of CSS, you can make text colorful, fun, serious, or fancy ‚Äî it‚Äôs all up to the vibe you want to create.</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Setting Text Colors</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><code>color</code> is for the text color.</li>\n            <li>You can use color names (<code>red</code>), hex codes (<code>#f97316</code>), RGB, or HSL.</li>\n          </ul>\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\np {\n  color: #10b981; /* emerald green */\n}\n</code></pre>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üñåÔ∏è Background Colors</h3>\n          <p>Use <code>background-color</code> to paint the element‚Äôs background.</p>\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\n.card {\n  background-color: #1f2937; /* dark gray */\n  color: white;\n}\n</code></pre>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úçÔ∏è Font Styling</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><code>font-family</code>: Set the typeface (e.g., Arial, 'Poppins')</li>\n            <li><code>font-size</code>: Controls size of the text</li>\n            <li><code>font-weight</code>: Makes text bold or thin</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\n          <p>Think of your web page like a poster:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Color</strong> grabs attention or sets the mood (like party vs. funeral üéâ‚ö∞Ô∏è)</li>\n            <li><strong>Font</strong> shows personality ‚Äî serious, casual, or fun</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Tip:</h3>\n          <p>Stick to 2‚Äì3 font families max. Combine a bold heading font with a clean body font.</p>\n        `,\n        proTip: \"Google Fonts is your best friend for stylish web typography. Just include the link and set it using font-family!\",\n        codeSamples: [{\n          language: 'css',\n          code: `\n        body {\n          font-family: 'Segoe UI', sans-serif;\n          color: #1f2937;\n          background-color: #f4f4f4;\n        }\n\n        h1 {\n          color: #ef4444;\n          font-size: 2.5rem;\n          font-weight: bold;\n        }\n\n        .card {\n          background-color: #ffffff;\n          padding: 20px;\n          border-radius: 10px;\n        }`\n        }, {\n          language: 'html',\n          code: `\n        <h1>My Stylish Page</h1>\n        <div class=\"card\">\n          <p>This card has a background color and uses a modern font.</p>\n        </div>`\n        }]\n      };\n    case 'css-box-model':\n      return {\n        slug: 'css-box-model',\n        title: 'Understanding the Box Model',\n        content: `\n          <p>Every HTML element is like a box ‚Äî whether it‚Äôs text, an image, a button, or a div. CSS lets you control how much space each box takes up and how it behaves with others around it.</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ What‚Äôs Inside a CSS Box?</h3>\n          <p>Imagine a cardboard box. It has:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Content</strong> ‚Äî The actual stuff (text, image, etc.)</li>\n            <li><strong>Padding</strong> ‚Äî Space between the content and the border (like bubble wrap)</li>\n            <li><strong>Border</strong> ‚Äî The actual box edge</li>\n            <li><strong>Margin</strong> ‚Äî Space between this box and the next (like space on the shelf)</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-Life Analogy</h3>\n          <p>Think of a gift box:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Gift item = Content</strong></li>\n            <li><strong>Bubble wrap = Padding</strong></li>\n            <li><strong>Box wall = Border</strong></li>\n            <li><strong>Space in the gift bag = Margin</strong></li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Visual Representation</h3>\n          <p>This is what it looks like:</p>\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\n+---------------------------+\n|        Margin             |\n|  +---------------------+  |\n|  |     Border           | |\n|  |  +---------------+  | |\n|  |  |   Padding     |  | |\n|  |  | +-----------+ |  | |\n|  |  | |  Content  | |  | |\n|  |  | +-----------+ |  | |\n|  |  +---------------+  | |\n|  +---------------------+  |\n+---------------------------+\n</code></pre>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Common CSS Properties</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><code>padding: 10px;</code> ‚Äî Adds space inside the box</li>\n            <li><code>margin: 20px;</code> ‚Äî Adds space outside the box</li>\n            <li><code>border: 2px solid #ccc;</code> ‚Äî Adds a border around the element</li>\n            <li><code>box-sizing: border-box;</code> ‚Äî Includes padding & border in the element‚Äôs width</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Tip:</h3>\n          <p>Always use <code>box-sizing: border-box</code> to avoid layout headaches. It makes sizing predictable!</p>\n        `,\n        proTip: \"Try inspecting any element in your browser (Right-click ‚Üí Inspect). You‚Äôll see the full box model live!\",\n        codeSamples: [{\n          language: 'css',\n          code: `\n      * {\n        box-sizing: border-box;\n      }\n\n      .card {\n        width: 300px;\n        padding: 20px;\n        margin: 30px auto;\n        border: 2px solid #10b981;\n        background-color: #f0fdfa;\n      }`\n        }, {\n          language: 'html',\n          code: `\n      <div class=\"card\">\n        <p>This card has padding, margin, and a border ‚Äî it's all part of the box model!</p>\n      </div>`\n        }]\n      };\n    case 'css-display-position':\n      return {\n        slug: 'css-display-position',\n        title: 'Display & Position Explained',\n        content: `\n          <p>CSS controls not just how elements look, but also how they <strong>sit and behave</strong> on the page. Think of it like arranging furniture in a room ‚Äî some items go side by side, some stack, and some float in corners!</p>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Display Types</h3>\n          <p>By default, elements behave in certain ways:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Block:</strong> Takes up full width (like a sofa). E.g., <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code></li>\n            <li><strong>Inline:</strong> Sits beside other items (like books on a shelf). E.g., <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code></li>\n            <li><strong>Inline-block:</strong> Like inline, but you can size it. Best of both worlds!</li>\n            <li><strong>None:</strong> Makes it vanish from the page layout.</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìç CSS Positioning</h3>\n          <p>Positioning lets you decide <strong>where something lives</strong> on the screen ‚Äî fixed, free, or relative to something else.</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Static (default):</strong> Normal flow of the document</li>\n            <li><strong>Relative:</strong> Moves from its normal spot (without affecting others)</li>\n            <li><strong>Absolute:</strong> Floats freely ‚Äî placed exactly where you say</li>\n            <li><strong>Fixed:</strong> Sticks to the screen (e.g., sticky headers)</li>\n            <li><strong>Sticky:</strong> Acts like relative but becomes fixed when scrolling</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü™ë Real-Life Analogy</h3>\n          <p>Think of a webpage as a room:</p>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><strong>Static:</strong> Furniture arranged normally</li>\n            <li><strong>Relative:</strong> You move the table slightly, but everything else stays put</li>\n            <li><strong>Absolute:</strong> You place a hanging shelf on the wall wherever you want</li>\n            <li><strong>Fixed:</strong> A sticky note stuck to your monitor ‚Äî always in sight!</li>\n          </ul>\n\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Common Properties</h3>\n          <ul class=\"list-disc list-inside text-gray-300\">\n            <li><code>display: block | inline | none;</code></li>\n            <li><code>position: relative | absolute | fixed;</code></li>\n            <li><code>top, left, right, bottom</code> ‚Äî Only work with positioned elements</li>\n            <li><code>z-index</code> ‚Äî Controls which item is \"on top\"</li>\n          </ul>\n        `,\n        proTip: 'Use position: sticky for headers or sidebars that scroll with you but stay visible when needed!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n    .box {\n      width: 150px;\n      height: 150px;\n      background-color: #f59e0b;\n      position: absolute;\n      top: 50px;\n      left: 100px;\n    }`\n        }, {\n          language: 'html',\n          code: `\n    <div style=\"position: relative;\">\n      <div class=\"box\">I‚Äôm absolutely positioned</div>\n    </div>`\n        }]\n      };\n    case 'css-flexbox':\n      return {\n        slug: 'css-flexbox',\n        title: 'Flexible Layouts with Flexbox',\n        content: `\n      <p>Flexbox (short for <strong>Flexible Box</strong>) is a powerful CSS layout module designed to distribute space along a single column or row ‚Äî especially helpful when creating responsive designs.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real Life Analogy</h3>\n      <p>Think of Flexbox like a row of food containers in a lunchbox. You can decide how big or small each one is, how they align with each other, and whether they wrap or stay in a line ‚Äî all easily!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Basic Flexbox Setup</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\n.container {\n  display: flex;\n}\n      </code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚öôÔ∏è Common Flex Properties</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>flex-direction</code>: row | column</li>\n        <li><code>justify-content</code>: start | center | space-between | space-around</li>\n        <li><code>align-items</code>: stretch | center | flex-start | flex-end</li>\n        <li><code>gap</code>: Adds spacing between items</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Wrapping with Flexbox</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\n.container {\n  flex-wrap: wrap;\n}\n      </code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Pro Tip</h3>\n      <p>Use the browser dev tools to experiment with Flexbox live ‚Äî it's the fastest way to understand how your layout changes in real-time!</p>\n    `,\n        proTip: 'Flexbox is ideal for one-dimensional layouts ‚Äî use Grid when you need full rows *and* columns.',\n        codeSamples: [{\n          language: 'html',\n          code: `\n      <div class=\"container\">\n        <div class=\"box\">Box 1</div>\n        <div class=\"box\">Box 2</div>\n        <div class=\"box\">Box 3</div>\n      </div>\n              `\n        }, {\n          language: 'css',\n          code: `\n      .container {\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n        gap: 20px;\n      }\n\n      .box {\n        background-color: #4f46e5;\n        color: white;\n        padding: 20px;\n        border-radius: 8px;\n      }\n              `\n        }]\n      };\n    case 'css-grid':\n      return {\n        slug: 'css-grid',\n        title: 'Mastering CSS Grid',\n        content: `\n      <p>CSS Grid is a layout system built for two-dimensional layouts ‚Äî rows and columns. It's like building a spreadsheet-style structure for your webpage!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Real Life Analogy</h3>\n      <p>Imagine a chessboard. Each square is a \"grid cell\". You can place elements in those squares, make them span multiple squares, or stack them neatly in rows and columns. That's Grid!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Basic Grid Setup</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n      </code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî¢ Grid Terms Made Simple</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>grid-template-columns</code>: Defines the number and size of columns</li>\n        <li><code>grid-template-rows</code>: Defines the number and size of rows</li>\n        <li><code>gap</code>: Space between rows and columns</li>\n        <li><code>grid-column / grid-row</code>: Control item placement and span</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Placing Items</h3>\n      <p>You can tell items where to go like:</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\n.item1 {\n  grid-column: 1 / span 2;\n}\n.item2 {\n  grid-row: 2;\n}\n      </code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Pro Tip</h3>\n      <p>Grid is best when your layout involves both rows and columns. For one-directional layouts, Flexbox is still simpler.</p>\n    `,\n        proTip: 'Use tools like <a class=\"underline text-blue-400\" href=\"https://cssgrid-generator.netlify.app/\" target=\"_blank\">CSS Grid Generator</a> to visualize your layout!',\n        codeSamples: [{\n          language: 'html',\n          code: `\n<div class=\"container\">\n  <div class=\"box\">1</div>\n  <div class=\"box\">2</div>\n  <div class=\"box\">3</div>\n  <div class=\"box\">4</div>\n</div>\n        `\n        }, {\n          language: 'css',\n          code: `\n    .container {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 16px;\n    }\n\n    .box {\n      background-color: #f97316;\n      color: white;\n      padding: 20px;\n      text-align: center;\n      border-radius: 8px;\n    }\n            `\n        }]\n      };\n    case 'css-position-display':\n      return {\n        slug: 'css-position-display',\n        title: 'CSS Position & Display Explained Simply',\n        content: `\n      <p>Positioning and display are two of the most misunderstood yet powerful tools in CSS. They control how your elements behave, flow, and sit on the screen.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Real-World Analogy</h3>\n      <p>Think of HTML elements like stickers on a whiteboard. <strong>Display</strong> decides how the stickers are arranged (block vs inline), and <strong>Position</strong> decides if you want to stick them at a fixed spot, move them freely, or stack them over others.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßæ Common Display Values</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>block</code> ‚Äì Takes full width, starts on new line (<code>&lt;div&gt;</code>)</li>\n        <li><code>inline</code> ‚Äì Takes only as much width as content (<code>&lt;span&gt;</code>)</li>\n        <li><code>inline-block</code> ‚Äì Like inline but supports width, height</li>\n        <li><code>none</code> ‚Äì Completely hides the element</li>\n        <li><code>flex</code>, <code>grid</code> ‚Äì Special layouts</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìç Position Types (With Examples)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>static</code> ‚Äì Default (just flows normally)</li>\n        <li><code>relative</code> ‚Äì Can shift around, but original space is preserved</li>\n        <li><code>absolute</code> ‚Äì Breaks out of flow, positions inside nearest relative parent</li>\n        <li><code>fixed</code> ‚Äì Sticks to viewport (like a navbar or floating button)</li>\n        <li><code>sticky</code> ‚Äì Acts like relative until it sticks while scrolling</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚öôÔ∏è Basic Use Case</h3>\n      <p>Want a box to float at the top-right?</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\n.floating-box {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: orange;\n  padding: 10px;\n  color: white;\n}\n      </code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Quick Tips</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Use <code>relative</code> on a parent if child uses <code>absolute</code></li>\n        <li><code>z-index</code> controls which layer shows on top</li>\n        <li>Use <code>display: none</code> to hide, or <code>visibility: hidden</code> to hide but keep space</li>\n      </ul>\n    `,\n        proTip: 'Use Chrome DevTools to right-click ‚Üí \"Inspect\" and experiment with different display and position styles live!',\n        codeSamples: [{\n          language: 'html',\n          code: `\n<div class=\"banner\">\n  <p>Hello! I'm sticky.</p>\n</div>\n        `\n        }, {\n          language: 'css',\n          code: `\n    .banner {\n      position: sticky;\n      top: 0;\n      background-color: #f97316;\n      padding: 10px;\n      color: white;\n      font-weight: bold;\n    }\n            `\n        }]\n      };\n    case 'css-spacing-sizing':\n      return {\n        slug: 'css-spacing-sizing',\n        title: 'Margin, Padding & Sizing',\n        content: `\n      <p>Spacing in CSS is all about how elements breathe. Think of your UI like furniture in a room ‚Äî you don‚Äôt want everything crammed into a corner! Margin, padding, and sizing help create a clean, readable layout.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìè Margin vs Padding (Room Analogy)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>Padding:</strong> The cushion inside a box ‚Äî space between the content and the border.</li>\n        <li><strong>Margin:</strong> The space outside the box ‚Äî how far it stays from the next box.</li>\n        <li><strong>Border:</strong> Think of this as the actual box wall ‚Äî padding is inside, margin is outside.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî¢ How to Use Them</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>margin</code> and <code>padding</code> can accept 1 to 4 values (top, right, bottom, left).</li>\n        <li>Use <code>margin: 20px;</code> for all sides, or <code>padding: 10px 20px;</code> for top/bottom & left/right.</li>\n        <li>You can target specific sides: <code>margin-top</code>, <code>padding-left</code>, etc.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Sizing Content</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>width</code> & <code>height</code> control the size of the box.</li>\n        <li><code>max-width</code> is a life-saver for responsive design ‚Äî it prevents things from growing too wide.</li>\n        <li>Use <code>min-height</code> to ensure something doesn‚Äôt collapse.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß™ Pro Tip</h3>\n      <p>Use <code>* { box-sizing: border-box }</code> globally to include padding and border in the width/height ‚Äî much easier to manage layouts!</p>\n    `,\n        proTip: 'Use DevTools (right-click ‚Üí Inspect) to visually test margins and paddings live!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n.box {\n  padding: 20px;\n  margin: 30px;\n  border: 2px solid #ccc;\n  width: 300px;\n  height: 150px;\n}`\n        }, {\n          language: 'css',\n          code: `\n* {\n  box-sizing: border-box;\n}`\n        }]\n      };\n    case 'css-background-border':\n      return {\n        slug: 'css-background-border',\n        title: 'Backgrounds & Borders',\n        content: `\n      <p>CSS lets you dress up your elements like you‚Äôre decorating a gift box ‚Äî background is the wrapping paper, and borders are the ribbon around it.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Background Basics</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>background-color</code>: Fills the element with color.</li>\n        <li><code>background-image</code>: Adds an image as the background.</li>\n        <li><code>background-repeat</code>, <code>background-size</code>, <code>background-position</code>: Control how the image behaves.</li>\n        <li>Tip: Use <code>background-size: cover;</code> to fill the box with the image nicely.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üñåÔ∏è Border Basics</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>border</code>: Controls the line around your element. You can style it with color, thickness, and shape.</li>\n        <li>Shorthand: <code>border: 2px solid orange;</code></li>\n        <li>Fancy styles: <code>dashed</code>, <code>dotted</code>, <code>double</code>, etc.</li>\n        <li><code>border-radius</code>: Rounds the corners like softening a sharp box ‚Äî <code>border-radius: 8px;</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Vibes</h3>\n      <p>If a <code>&lt;div&gt;</code> is a gift box:  \n        <br/>üéÅ Background is the wrapping paper  \n        <br/>üéÄ Border is the ribbon wrapped around it  \n        <br/>‚ú® Border-radius makes it a soft pillow instead of a hard box!\n      </p>\n    `,\n        proTip: 'You can combine multiple background layers by comma-separating them ‚Äî like adding patterns over gradients!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n.card {\n  background-color: #f97316;\n  border: 3px solid #1f2937;\n  color: white;\n  padding: 20px;\n  border-radius: 12px;\n}`\n        }, {\n          language: 'css',\n          code: `\n.hero-banner {\n  background-image: url('banner.jpg');\n  background-size: cover;\n  background-position: center;\n  height: 300px;\n}`\n        }]\n      };\n    case 'css-pseudo-classes':\n      return {\n        slug: 'css-pseudo-classes',\n        title: 'Pseudo-classes & Pseudo-elements',\n        content: `\n      <p>Pseudo-classes and pseudo-elements in CSS are like magical helpers. They let you style elements based on their state or even add parts that don‚Äôt exist in your HTML.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üïπÔ∏è Pseudo-Classes (State-Based Styling)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Use pseudo-classes to style elements *when something happens* ‚Äî like hovering or focusing.</li>\n        <li><code>:hover</code> ‚Äî When you hover over something.</li>\n        <li><code>:focus</code> ‚Äî When an input gets focused.</li>\n        <li><code>:nth-child()</code> ‚Äî Style specific items in a list or grid.</li>\n        <li><code>:checked</code> ‚Äî Target selected radio buttons or checkboxes.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé≠ Pseudo-Elements (Add Content)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>::before</code> and <code>::after</code> ‚Äî Add decorative content before or after real content.</li>\n        <li><code>::first-letter</code> ‚Äî Style the first letter of a paragraph, like a storybook drop cap.</li>\n        <li><code>::placeholder</code> ‚Äî Style the gray text inside an input box.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü™Ñ Real-World Example</h3>\n      <p>Think of <strong>:hover</strong> like changing a button‚Äôs color when someone touches it.  \n         And <strong>::after</strong> is like placing a sticker on top of a box ‚Äî it‚Äôs not inside the box but still shows up visually!</p>\n    `,\n        proTip: 'Use pseudo-elements to add icons, highlights, or effects without touching your HTML ‚Äî super handy for clean code!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n.button:hover {\n  background-color: #f97316;\n  color: white;\n}`\n        }, {\n          language: 'css',\n          code: `\n.card::after {\n  content: 'üî•';\n  display: inline-block;\n  margin-left: 8px;\n}`\n        }, {\n          language: 'css',\n          code: `\ninput::placeholder {\n  color: #999;\n  font-style: italic;\n}`\n        }]\n      };\n    case 'css-transitions-animations':\n      return {\n        slug: 'css-transitions-animations',\n        title: 'Transitions & Animations',\n        content: `\n      <p>CSS can make your website feel alive! Transitions and animations let you add smooth movements and fun effects ‚Äî like buttons fading, cards sliding in, or icons bouncing.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßä CSS Transitions (Smooth Changes)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>transition</code> is used when an element changes its state ‚Äî like color on hover.</li>\n        <li>You define what to animate, how long it takes, and the timing style.</li>\n        <li>Example: <code>transition: background-color 0.3s ease;</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéûÔ∏è CSS Animations (Looped or Keyframed)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Use <code>@keyframes</code> to describe step-by-step animations.</li>\n        <li><code>animation-name</code>, <code>duration</code>, <code>iteration-count</code>, etc., control how it behaves.</li>\n        <li>You can create loaders, sliders, pop-ins, and much more!</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé¢ Real-World Analogy</h3>\n      <p>üéØ <strong>Transition</strong> is like a light switch dimming instead of flipping suddenly.  \n         üé¨ <strong>Animation</strong> is like a full movie scene ‚Äî you plan the motion frame by frame!</p>\n    `,\n        proTip: 'Always add <code>transition</code> to the element‚Äôs default state ‚Äî not inside <code>:hover</code>!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n.card {\n  background-color: #1f2937;\n  transition: background-color 0.3s ease;\n}\n\n.card:hover {\n  background-color: #f97316;\n}`\n        }, {\n          language: 'css',\n          code: `\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n.icon {\n  animation: bounce 1s infinite;\n}`\n        }]\n      };\n    case 'css-responsive':\n      return {\n        slug: 'css-responsive',\n        title: 'Responsive Design & Media Queries',\n        content: `\n      <p>Responsive design makes your website look great on all screen sizes ‚Äî from tiny mobile phones to giant desktop monitors.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì± Why Responsiveness Matters</h3>\n      <p>Imagine opening a website on your phone and everything looks broken ‚Äî text too small, buttons off-screen. That's what happens when a site isn't responsive.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† How It Works</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Use flexible units like <code>%</code>, <code>em</code>, or <code>vw/vh</code> instead of fixed <code>px</code>.</li>\n        <li>Use <strong>media queries</strong> to change styles at different screen sizes.</li>\n        <li>Hide/show elements or rearrange layout using CSS based on screen width.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Real-World Analogy</h3>\n      <p>Think of responsive design like water in a bottle ‚Äî no matter the shape or size of the bottle (device), water adjusts and fits perfectly inside.</p>\n    `,\n        proTip: 'Start designing for small screens first (mobile-first), then scale up using media queries!',\n        codeSamples: [{\n          language: 'css',\n          code: `\n.container {\n  width: 100%;\n  padding: 1rem;\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 700px;\n    margin: auto;\n  }\n}`\n        }, {\n          language: 'css',\n          code: `\nh1 {\n  font-size: 1.5rem;\n}\n\n@media (min-width: 1024px) {\n  h1 {\n    font-size: 2.5rem;\n  }\n}`\n        }]\n      };\n    case 'css-variables':\n      return {\n        slug: 'css-variables',\n        title: 'CSS Variables',\n        content: `\n      <p>CSS Variables (also called custom properties) let you store reusable values ‚Äî like colors, spacing, or font sizes ‚Äî in one place and use them throughout your styles.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÅ Why Use Them?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Change one variable ‚Äî update your whole theme instantly.</li>\n        <li>Makes your CSS more readable and maintainable.</li>\n        <li>Works great for dark/light mode or custom themes.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîß How to Use</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Define variables inside <code>:root</code> (global) or a selector (scoped).</li>\n        <li>Access them using <code>var(--your-variable)</code>.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\n      <p>Think of a CSS variable like a nickname: Instead of repeating ‚Äú#f97316‚Äù everywhere, you call it <code>--primary-color</code>. If the color ever changes ‚Äî just update the nickname in one place!</p>\n    `,\n        proTip: 'Define theme variables in <code>:root</code> so they‚Äôre accessible everywhere. Keep names readable like <code>--text-color</code>, <code>--btn-radius</code>, etc.',\n        codeSamples: [{\n          language: 'css',\n          code: `\n:root {\n  --primary-color: #f97316;\n  --border-radius: 8px;\n}\n\nbutton {\n  background-color: var(--primary-color);\n  border-radius: var(--border-radius);\n}`\n        }, {\n          language: 'css',\n          code: `\n.dark-mode {\n  --bg-color: #1f2937;\n  --text-color: #f9fafb;\n}\n\n.light-mode {\n  --bg-color: #ffffff;\n  --text-color: #1f2937;\n}\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}`\n        }]\n      };\n    case 'css-best-practices':\n      return {\n        slug: 'css-best-practices',\n        title: 'Best Practices & Real Projects',\n        content: `\n      <p>Now that you‚Äôve learned the CSS fundamentals, let‚Äôs talk about how to actually apply them when building real websites and apps.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üèóÔ∏è Start With a Plan</h3>\n      <p>Don‚Äôt jump straight into writing CSS. Sketch your layout, choose a color palette, pick fonts. This saves time and avoids messy styles later.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Keep It Modular</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Break your CSS into reusable chunks ‚Äî like <code>.btn</code>, <code>.card</code>, <code>.navbar</code>.</li>\n        <li>Use utility-first or component-based styles for better reusability.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßº Clean Code Tips</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Use consistent naming conventions (e.g., <code>kebab-case</code>).</li>\n        <li>Group related styles together.</li>\n        <li>Use variables for colors, spacing, and sizes.</li>\n        <li>Remove unused styles ‚Äî keep it lean!</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üöÄ Real Projects to Build</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Build a portfolio homepage (with responsive navbar).</li>\n        <li>Create a product landing page (cards + CTA buttons).</li>\n        <li>Clone a section from a famous website (Netflix, Apple, etc.).</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Debug Like a Pro</h3>\n      <p>Use browser dev tools (right-click ‚Üí Inspect) to test and tweak styles live. You‚Äôll save a ton of time.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\n      <p>Think of your CSS like a well-organized wardrobe: Each item (class) is in its place, named clearly, and easy to reuse. No clutter!</p>\n    `,\n        proTip: 'Before you add a new class or style, ask: ‚ÄúCan I reuse something I already made?‚Äù ‚Äî That‚Äôs the CSS ninja mindset.',\n        codeSamples: [{\n          language: 'css',\n          code: `\n/* Consistent and reusable button styles */\n.btn {\n  padding: 0.75rem 1.5rem;\n  background-color: var(--primary-color);\n  color: white;\n  border-radius: 6px;\n  font-weight: 600;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #ea580c;\n}`\n        }, {\n          language: 'css',\n          code: `\n/* Clean layout with utility classes */\n.container {\n  max-width: 960px;\n  margin: auto;\n  padding: 1rem;\n}\n\n.card {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  margin-bottom: 1rem;\n}`\n        }]\n      };\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["CssTopics","id","title","slug","CssTopicContent","content","proTip","codeSamples","language","code","undefined"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\data\\css\\topics-data.ts"],"sourcesContent":["import { Topic, TopicContent } from \"../../../../models/topic.model\";\r\n\r\nexport const CssTopics: Topic[] = [\r\n  { id: 'css-introduction', title: 'Introduction to CSS', slug: 'css-introduction' },\r\n  { id: 'css-selectors-properties', title: 'Selectors & Properties', slug: 'css-selectors-properties' },\r\n  { id: 'css-colors-fonts', title: 'Colors & Fonts', slug: 'css-colors-fonts' },\r\n  { id: 'css-box-model', title: 'The Box Model', slug: 'css-box-model' },\r\n  { id: 'css-display-position', title: 'Display & Positioning', slug: 'css-display-position' },\r\n  { id: 'css-flexbox', title: 'Flexbox Layout', slug: 'css-flexbox' },\r\n  { id: 'css-grid', title: 'CSS Grid', slug: 'css-grid' },\r\n  { id: 'css-position-display', title: 'CSS Position & Display Explained Simply', slug: 'css-position-display' },\r\n  { id: 'css-spacing-sizing', title: 'Margin, Padding & Sizing', slug: 'css-spacing-sizing' },\r\n  { id: 'css-background-border', title: 'Backgrounds & Borders', slug: 'css-background-border' },\r\n  { id: 'css-pseudo-classes', title: 'Pseudo-classes & Pseudo-elements', slug: 'css-pseudo-classes' },\r\n  { id: 'css-transitions-animations', title: 'Transitions & Animations', slug: 'css-transitions-animations' },\r\n  { id: 'css-responsive', title: 'Responsive Design & Media Queries', slug: 'css-responsive' },\r\n  { id: 'css-variables', title: 'CSS Variables', slug: 'css-variables' },\r\n  { id: 'css-best-practices', title: 'Best Practices & Real Projects', slug: 'css-best-practices' },\r\n];\r\n\r\n\r\nexport function CssTopicContent(slug: string): TopicContent | undefined {\r\n  switch (slug) {\r\n    case 'css-introduction':\r\n      return {\r\n        slug: 'css-introduction',\r\n        title: 'What is CSS?',\r\n        content: `\r\n          <p>CSS (Cascading Style Sheets) is what makes your website look <strong>awesome</strong>. Without it, everything would be plain, black-and-white text.</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Real-World Analogy</h3>\r\n          <p>Think of HTML as your body ‚Äî the bones and structure. CSS is like your clothes, hairstyle, and the way you present yourself. You still function without them... but you wouldn't look as cool.</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìå What Can CSS Do?</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li>Change colors, fonts, and text size</li>\r\n            <li>Control spacing and layout</li>\r\n            <li>Make things move with animations</li>\r\n            <li>Make your website responsive (look great on all devices)</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Why \"Cascading\"?</h3>\r\n          <p>CSS rules \"cascade\" from top to bottom. If two styles target the same element, the one that's more specific or appears later usually wins. It's like stacking outfits ‚Äî the last shirt you wear covers the earlier one.</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è How Do You Use It?</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Inline:</strong> Directly on the element (not recommended)</li>\r\n            <li><strong>Internal:</strong> Inside a <code>&lt;style&gt;</code> tag in the HTML</li>\r\n            <li><strong>External:</strong> Linked via a separate <code>.css</code> file ‚Äî the best and cleanest way</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Where You'll See CSS</h3>\r\n          <p>Every modern website uses CSS ‚Äî whether it's a blog, an e-commerce site, or even platforms like YouTube and Netflix. It's what turns boring markup into beautiful interfaces.</p>\r\n        `,\r\n        proTip: \"Start small. Style one element at a time and use browser dev tools (Inspect Element) to play around and see what happens!\",\r\n        codeSamples: [\r\n          {\r\n                      language: 'html',\r\n                      code: `\r\n          <!-- HTML + Internal CSS Example -->\r\n          <!DOCTYPE html>\r\n          <html>\r\n          <head>\r\n            <style>\r\n              h1 {\r\n                color: orange;\r\n                text-align: center;\r\n              }\r\n              p {\r\n                font-size: 16px;\r\n                color: #555;\r\n              }\r\n            </style>\r\n          </head>\r\n          <body>\r\n            <h1>Welcome to IgKnight!</h1>\r\n            <p>This page looks better with CSS üòâ</p>\r\n          </body>\r\n          </html>`\r\n          },\r\n          {\r\n            language: 'css',\r\n            code: `\r\n          /* External CSS Example */\r\n          body {\r\n            background-color: #f4f4f4;\r\n            font-family: sans-serif;\r\n          }\r\n\r\n          h1 {\r\n            color: #ef4444;\r\n          }\r\n\r\n          p {\r\n            color: #334155;\r\n            line-height: 1.5;\r\n          }`\r\n          }\r\n        ]\r\n      };\r\n\r\n      case 'css-syntax-selectors':\r\n      return {\r\n        slug: 'css-syntax-selectors',\r\n        title: 'CSS Syntax & Selectors',\r\n        content: `\r\n          <p>CSS works by <strong>selecting elements</strong> on the page and applying styles to them. It‚Äôs like saying, ‚ÄúHey, all the <code>&lt;h1&gt;</code> tags ‚Äî wear orange!‚Äù</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß© Basic CSS Rule Syntax</h3>\r\n          <p>A CSS rule has 2 parts:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Selector:</strong> What you want to style (like <code>h1</code> or <code>.btn</code>)</li>\r\n            <li><strong>Declaration Block:</strong> The styles inside <code>{ }</code></li>\r\n          </ul>\r\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\r\nselector {\r\n  property: value;\r\n}\r\n</code></pre>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Types of Selectors (The Essentials)</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><code>element</code> ‚Äî targets all elements (e.g., <code>p</code>, <code>h1</code>)</li>\r\n            <li><code>.class</code> ‚Äî targets elements with a specific class (e.g., <code>.card</code>)</li>\r\n            <li><code>#id</code> ‚Äî targets an element with a specific ID (e.g., <code>#header</code>)</li>\r\n            <li><code>div p</code> ‚Äî targets <code>p</code> inside <code>div</code> (called descendant selector)</li>\r\n            <li><code>div > p</code> ‚Äî targets direct children only</li>\r\n            <li><code>div + p</code> ‚Äî targets the very next <code>p</code> after a <code>div</code></li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü§ñ Real-World Analogy</h3>\r\n          <p>Imagine you walk into a room and shout instructions:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li>‚ÄúEveryone wearing a <strong>blue shirt</strong> ‚Äî sit down!‚Äù (like a <code>.blue</code> class)</li>\r\n            <li>‚ÄúYou, <strong>John!</strong>‚Äù (that‚Äôs a unique <code>#id</code>)</li>\r\n            <li>‚ÄúAll the <strong>chairs</strong> ‚Äî move left‚Äù (targeting all elements)</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Tip:</h3>\r\n          <p>Use <code>.class</code> for groups of elements, and <code>#id</code> only once per page. Keep your selectors clean and clear.</p>\r\n        `,\r\n        proTip: \"Inspect your elements in the browser and play with styles in real-time ‚Äî it‚Äôs the best way to learn selectors!\",\r\n        codeSamples: [\r\n          {\r\n            language: 'css',\r\n                code: `\r\n        /* Element Selector */\r\n        h1 {\r\n          color: #f97316;\r\n        }\r\n\r\n        /* Class Selector */\r\n        .card {\r\n          background-color: white;\r\n          border-radius: 8px;\r\n          padding: 20px;\r\n        }\r\n\r\n        /* ID Selector */\r\n        #main-title {\r\n          font-size: 2rem;\r\n          text-align: center;\r\n        }`\r\n              },\r\n              {\r\n              language: 'html',\r\n              code: `\r\n              <!-- HTML Elements with classes and IDs -->\r\n              <h1 id=\"main-title\">Welcome!</h1>\r\n              <div class=\"card\">\r\n                <p>This is a card.</p>\r\n              </div>`\r\n          }\r\n        ]\r\n      };\r\n\r\n      case 'css-colors-fonts':\r\n      return {\r\n        slug: 'css-colors-fonts',\r\n        title: 'Colors & Fonts in CSS',\r\n        content: `\r\n          <p>Let‚Äôs add some life to your page! üåà With just a few lines of CSS, you can make text colorful, fun, serious, or fancy ‚Äî it‚Äôs all up to the vibe you want to create.</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Setting Text Colors</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><code>color</code> is for the text color.</li>\r\n            <li>You can use color names (<code>red</code>), hex codes (<code>#f97316</code>), RGB, or HSL.</li>\r\n          </ul>\r\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\r\np {\r\n  color: #10b981; /* emerald green */\r\n}\r\n</code></pre>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üñåÔ∏è Background Colors</h3>\r\n          <p>Use <code>background-color</code> to paint the element‚Äôs background.</p>\r\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\r\n.card {\r\n  background-color: #1f2937; /* dark gray */\r\n  color: white;\r\n}\r\n</code></pre>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úçÔ∏è Font Styling</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><code>font-family</code>: Set the typeface (e.g., Arial, 'Poppins')</li>\r\n            <li><code>font-size</code>: Controls size of the text</li>\r\n            <li><code>font-weight</code>: Makes text bold or thin</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\r\n          <p>Think of your web page like a poster:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Color</strong> grabs attention or sets the mood (like party vs. funeral üéâ‚ö∞Ô∏è)</li>\r\n            <li><strong>Font</strong> shows personality ‚Äî serious, casual, or fun</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Tip:</h3>\r\n          <p>Stick to 2‚Äì3 font families max. Combine a bold heading font with a clean body font.</p>\r\n        `,\r\n        proTip: \"Google Fonts is your best friend for stylish web typography. Just include the link and set it using font-family!\",\r\n        codeSamples: [\r\n          {\r\n            language: 'css',\r\n            code: `\r\n        body {\r\n          font-family: 'Segoe UI', sans-serif;\r\n          color: #1f2937;\r\n          background-color: #f4f4f4;\r\n        }\r\n\r\n        h1 {\r\n          color: #ef4444;\r\n          font-size: 2.5rem;\r\n          font-weight: bold;\r\n        }\r\n\r\n        .card {\r\n          background-color: #ffffff;\r\n          padding: 20px;\r\n          border-radius: 10px;\r\n        }`\r\n                  },\r\n                  {\r\n                    language: 'html',\r\n                    code: `\r\n        <h1>My Stylish Page</h1>\r\n        <div class=\"card\">\r\n          <p>This card has a background color and uses a modern font.</p>\r\n        </div>`\r\n          }\r\n        ]\r\n      };\r\n\r\n      case 'css-box-model':\r\n      return {\r\n        slug: 'css-box-model',\r\n        title: 'Understanding the Box Model',\r\n        content: `\r\n          <p>Every HTML element is like a box ‚Äî whether it‚Äôs text, an image, a button, or a div. CSS lets you control how much space each box takes up and how it behaves with others around it.</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ What‚Äôs Inside a CSS Box?</h3>\r\n          <p>Imagine a cardboard box. It has:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Content</strong> ‚Äî The actual stuff (text, image, etc.)</li>\r\n            <li><strong>Padding</strong> ‚Äî Space between the content and the border (like bubble wrap)</li>\r\n            <li><strong>Border</strong> ‚Äî The actual box edge</li>\r\n            <li><strong>Margin</strong> ‚Äî Space between this box and the next (like space on the shelf)</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-Life Analogy</h3>\r\n          <p>Think of a gift box:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Gift item = Content</strong></li>\r\n            <li><strong>Bubble wrap = Padding</strong></li>\r\n            <li><strong>Box wall = Border</strong></li>\r\n            <li><strong>Space in the gift bag = Margin</strong></li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Visual Representation</h3>\r\n          <p>This is what it looks like:</p>\r\n          <pre class=\"bg-slate-800 text-green-400 p-4 rounded-md overflow-auto\"><code>\r\n+---------------------------+\r\n|        Margin             |\r\n|  +---------------------+  |\r\n|  |     Border           | |\r\n|  |  +---------------+  | |\r\n|  |  |   Padding     |  | |\r\n|  |  | +-----------+ |  | |\r\n|  |  | |  Content  | |  | |\r\n|  |  | +-----------+ |  | |\r\n|  |  +---------------+  | |\r\n|  +---------------------+  |\r\n+---------------------------+\r\n</code></pre>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Common CSS Properties</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><code>padding: 10px;</code> ‚Äî Adds space inside the box</li>\r\n            <li><code>margin: 20px;</code> ‚Äî Adds space outside the box</li>\r\n            <li><code>border: 2px solid #ccc;</code> ‚Äî Adds a border around the element</li>\r\n            <li><code>box-sizing: border-box;</code> ‚Äî Includes padding & border in the element‚Äôs width</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Tip:</h3>\r\n          <p>Always use <code>box-sizing: border-box</code> to avoid layout headaches. It makes sizing predictable!</p>\r\n        `,\r\n        proTip: \"Try inspecting any element in your browser (Right-click ‚Üí Inspect). You‚Äôll see the full box model live!\",\r\n        codeSamples: [\r\n          {\r\n            language: 'css',\r\n                  code: `\r\n      * {\r\n        box-sizing: border-box;\r\n      }\r\n\r\n      .card {\r\n        width: 300px;\r\n        padding: 20px;\r\n        margin: 30px auto;\r\n        border: 2px solid #10b981;\r\n        background-color: #f0fdfa;\r\n      }`\r\n                },\r\n                {\r\n                  language: 'html',\r\n                  code: `\r\n      <div class=\"card\">\r\n        <p>This card has padding, margin, and a border ‚Äî it's all part of the box model!</p>\r\n      </div>`\r\n          }\r\n        ]\r\n      };\r\n\r\n      case 'css-display-position':\r\n      return {\r\n        slug: 'css-display-position',\r\n        title: 'Display & Position Explained',\r\n        content: `\r\n          <p>CSS controls not just how elements look, but also how they <strong>sit and behave</strong> on the page. Think of it like arranging furniture in a room ‚Äî some items go side by side, some stack, and some float in corners!</p>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Display Types</h3>\r\n          <p>By default, elements behave in certain ways:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Block:</strong> Takes up full width (like a sofa). E.g., <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code></li>\r\n            <li><strong>Inline:</strong> Sits beside other items (like books on a shelf). E.g., <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code></li>\r\n            <li><strong>Inline-block:</strong> Like inline, but you can size it. Best of both worlds!</li>\r\n            <li><strong>None:</strong> Makes it vanish from the page layout.</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìç CSS Positioning</h3>\r\n          <p>Positioning lets you decide <strong>where something lives</strong> on the screen ‚Äî fixed, free, or relative to something else.</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Static (default):</strong> Normal flow of the document</li>\r\n            <li><strong>Relative:</strong> Moves from its normal spot (without affecting others)</li>\r\n            <li><strong>Absolute:</strong> Floats freely ‚Äî placed exactly where you say</li>\r\n            <li><strong>Fixed:</strong> Sticks to the screen (e.g., sticky headers)</li>\r\n            <li><strong>Sticky:</strong> Acts like relative but becomes fixed when scrolling</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü™ë Real-Life Analogy</h3>\r\n          <p>Think of a webpage as a room:</p>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><strong>Static:</strong> Furniture arranged normally</li>\r\n            <li><strong>Relative:</strong> You move the table slightly, but everything else stays put</li>\r\n            <li><strong>Absolute:</strong> You place a hanging shelf on the wall wherever you want</li>\r\n            <li><strong>Fixed:</strong> A sticky note stuck to your monitor ‚Äî always in sight!</li>\r\n          </ul>\r\n\r\n          <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí¨ Common Properties</h3>\r\n          <ul class=\"list-disc list-inside text-gray-300\">\r\n            <li><code>display: block | inline | none;</code></li>\r\n            <li><code>position: relative | absolute | fixed;</code></li>\r\n            <li><code>top, left, right, bottom</code> ‚Äî Only work with positioned elements</li>\r\n            <li><code>z-index</code> ‚Äî Controls which item is \"on top\"</li>\r\n          </ul>\r\n        `,\r\n        proTip: 'Use position: sticky for headers or sidebars that scroll with you but stay visible when needed!',\r\n        codeSamples: [\r\n          {\r\n            language: 'css',\r\n                code: `\r\n    .box {\r\n      width: 150px;\r\n      height: 150px;\r\n      background-color: #f59e0b;\r\n      position: absolute;\r\n      top: 50px;\r\n      left: 100px;\r\n    }`\r\n              },\r\n              {\r\n                language: 'html',\r\n                code: `\r\n    <div style=\"position: relative;\">\r\n      <div class=\"box\">I‚Äôm absolutely positioned</div>\r\n    </div>`\r\n          }\r\n        ]\r\n      };\r\n\r\n      case 'css-flexbox':\r\n  return {\r\n    slug: 'css-flexbox',\r\n    title: 'Flexible Layouts with Flexbox',\r\n    content: `\r\n      <p>Flexbox (short for <strong>Flexible Box</strong>) is a powerful CSS layout module designed to distribute space along a single column or row ‚Äî especially helpful when creating responsive designs.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real Life Analogy</h3>\r\n      <p>Think of Flexbox like a row of food containers in a lunchbox. You can decide how big or small each one is, how they align with each other, and whether they wrap or stay in a line ‚Äî all easily!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Basic Flexbox Setup</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\r\n.container {\r\n  display: flex;\r\n}\r\n      </code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚öôÔ∏è Common Flex Properties</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>flex-direction</code>: row | column</li>\r\n        <li><code>justify-content</code>: start | center | space-between | space-around</li>\r\n        <li><code>align-items</code>: stretch | center | flex-start | flex-end</li>\r\n        <li><code>gap</code>: Adds spacing between items</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Wrapping with Flexbox</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\r\n.container {\r\n  flex-wrap: wrap;\r\n}\r\n      </code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Pro Tip</h3>\r\n      <p>Use the browser dev tools to experiment with Flexbox live ‚Äî it's the fastest way to understand how your layout changes in real-time!</p>\r\n    `,\r\n    proTip: 'Flexbox is ideal for one-dimensional layouts ‚Äî use Grid when you need full rows *and* columns.',\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n      <div class=\"container\">\r\n        <div class=\"box\">Box 1</div>\r\n        <div class=\"box\">Box 2</div>\r\n        <div class=\"box\">Box 3</div>\r\n      </div>\r\n              `\r\n            },\r\n            {\r\n              language: 'css',\r\n              code: `\r\n      .container {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        gap: 20px;\r\n      }\r\n\r\n      .box {\r\n        background-color: #4f46e5;\r\n        color: white;\r\n        padding: 20px;\r\n        border-radius: 8px;\r\n      }\r\n              `\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-grid':\r\n  return {\r\n    slug: 'css-grid',\r\n    title: 'Mastering CSS Grid',\r\n    content: `\r\n      <p>CSS Grid is a layout system built for two-dimensional layouts ‚Äî rows and columns. It's like building a spreadsheet-style structure for your webpage!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Real Life Analogy</h3>\r\n      <p>Imagine a chessboard. Each square is a \"grid cell\". You can place elements in those squares, make them span multiple squares, or stack them neatly in rows and columns. That's Grid!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Basic Grid Setup</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 20px;\r\n}\r\n      </code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî¢ Grid Terms Made Simple</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>grid-template-columns</code>: Defines the number and size of columns</li>\r\n        <li><code>grid-template-rows</code>: Defines the number and size of rows</li>\r\n        <li><code>gap</code>: Space between rows and columns</li>\r\n        <li><code>grid-column / grid-row</code>: Control item placement and span</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Placing Items</h3>\r\n      <p>You can tell items where to go like:</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\r\n.item1 {\r\n  grid-column: 1 / span 2;\r\n}\r\n.item2 {\r\n  grid-row: 2;\r\n}\r\n      </code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Pro Tip</h3>\r\n      <p>Grid is best when your layout involves both rows and columns. For one-directional layouts, Flexbox is still simpler.</p>\r\n    `,\r\n    proTip: 'Use tools like <a class=\"underline text-blue-400\" href=\"https://cssgrid-generator.netlify.app/\" target=\"_blank\">CSS Grid Generator</a> to visualize your layout!',\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n<div class=\"container\">\r\n  <div class=\"box\">1</div>\r\n  <div class=\"box\">2</div>\r\n  <div class=\"box\">3</div>\r\n  <div class=\"box\">4</div>\r\n</div>\r\n        `\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n    .container {\r\n      display: grid;\r\n      grid-template-columns: repeat(2, 1fr);\r\n      gap: 16px;\r\n    }\r\n\r\n    .box {\r\n      background-color: #f97316;\r\n      color: white;\r\n      padding: 20px;\r\n      text-align: center;\r\n      border-radius: 8px;\r\n    }\r\n            `\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-position-display':\r\n  return {\r\n    slug: 'css-position-display',\r\n    title: 'CSS Position & Display Explained Simply',\r\n    content: `\r\n      <p>Positioning and display are two of the most misunderstood yet powerful tools in CSS. They control how your elements behave, flow, and sit on the screen.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Real-World Analogy</h3>\r\n      <p>Think of HTML elements like stickers on a whiteboard. <strong>Display</strong> decides how the stickers are arranged (block vs inline), and <strong>Position</strong> decides if you want to stick them at a fixed spot, move them freely, or stack them over others.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßæ Common Display Values</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>block</code> ‚Äì Takes full width, starts on new line (<code>&lt;div&gt;</code>)</li>\r\n        <li><code>inline</code> ‚Äì Takes only as much width as content (<code>&lt;span&gt;</code>)</li>\r\n        <li><code>inline-block</code> ‚Äì Like inline but supports width, height</li>\r\n        <li><code>none</code> ‚Äì Completely hides the element</li>\r\n        <li><code>flex</code>, <code>grid</code> ‚Äì Special layouts</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìç Position Types (With Examples)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>static</code> ‚Äì Default (just flows normally)</li>\r\n        <li><code>relative</code> ‚Äì Can shift around, but original space is preserved</li>\r\n        <li><code>absolute</code> ‚Äì Breaks out of flow, positions inside nearest relative parent</li>\r\n        <li><code>fixed</code> ‚Äì Sticks to viewport (like a navbar or floating button)</li>\r\n        <li><code>sticky</code> ‚Äì Acts like relative until it sticks while scrolling</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚öôÔ∏è Basic Use Case</h3>\r\n      <p>Want a box to float at the top-right?</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\"><code>\r\n.floating-box {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: orange;\r\n  padding: 10px;\r\n  color: white;\r\n}\r\n      </code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Quick Tips</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Use <code>relative</code> on a parent if child uses <code>absolute</code></li>\r\n        <li><code>z-index</code> controls which layer shows on top</li>\r\n        <li>Use <code>display: none</code> to hide, or <code>visibility: hidden</code> to hide but keep space</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Use Chrome DevTools to right-click ‚Üí \"Inspect\" and experiment with different display and position styles live!',\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n<div class=\"banner\">\r\n  <p>Hello! I'm sticky.</p>\r\n</div>\r\n        `\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n    .banner {\r\n      position: sticky;\r\n      top: 0;\r\n      background-color: #f97316;\r\n      padding: 10px;\r\n      color: white;\r\n      font-weight: bold;\r\n    }\r\n            `\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-spacing-sizing':\r\n  return {\r\n    slug: 'css-spacing-sizing',\r\n    title: 'Margin, Padding & Sizing',\r\n    content: `\r\n      <p>Spacing in CSS is all about how elements breathe. Think of your UI like furniture in a room ‚Äî you don‚Äôt want everything crammed into a corner! Margin, padding, and sizing help create a clean, readable layout.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìè Margin vs Padding (Room Analogy)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>Padding:</strong> The cushion inside a box ‚Äî space between the content and the border.</li>\r\n        <li><strong>Margin:</strong> The space outside the box ‚Äî how far it stays from the next box.</li>\r\n        <li><strong>Border:</strong> Think of this as the actual box wall ‚Äî padding is inside, margin is outside.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî¢ How to Use Them</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>margin</code> and <code>padding</code> can accept 1 to 4 values (top, right, bottom, left).</li>\r\n        <li>Use <code>margin: 20px;</code> for all sides, or <code>padding: 10px 20px;</code> for top/bottom & left/right.</li>\r\n        <li>You can target specific sides: <code>margin-top</code>, <code>padding-left</code>, etc.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Sizing Content</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>width</code> & <code>height</code> control the size of the box.</li>\r\n        <li><code>max-width</code> is a life-saver for responsive design ‚Äî it prevents things from growing too wide.</li>\r\n        <li>Use <code>min-height</code> to ensure something doesn‚Äôt collapse.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß™ Pro Tip</h3>\r\n      <p>Use <code>* { box-sizing: border-box }</code> globally to include padding and border in the width/height ‚Äî much easier to manage layouts!</p>\r\n    `,\r\n    proTip: 'Use DevTools (right-click ‚Üí Inspect) to visually test margins and paddings live!',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.box {\r\n  padding: 20px;\r\n  margin: 30px;\r\n  border: 2px solid #ccc;\r\n  width: 300px;\r\n  height: 150px;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n* {\r\n  box-sizing: border-box;\r\n}`  \r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-background-border':\r\n  return {\r\n    slug: 'css-background-border',\r\n    title: 'Backgrounds & Borders',\r\n    content: `\r\n      <p>CSS lets you dress up your elements like you‚Äôre decorating a gift box ‚Äî background is the wrapping paper, and borders are the ribbon around it.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé® Background Basics</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>background-color</code>: Fills the element with color.</li>\r\n        <li><code>background-image</code>: Adds an image as the background.</li>\r\n        <li><code>background-repeat</code>, <code>background-size</code>, <code>background-position</code>: Control how the image behaves.</li>\r\n        <li>Tip: Use <code>background-size: cover;</code> to fill the box with the image nicely.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üñåÔ∏è Border Basics</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>border</code>: Controls the line around your element. You can style it with color, thickness, and shape.</li>\r\n        <li>Shorthand: <code>border: 2px solid orange;</code></li>\r\n        <li>Fancy styles: <code>dashed</code>, <code>dotted</code>, <code>double</code>, etc.</li>\r\n        <li><code>border-radius</code>: Rounds the corners like softening a sharp box ‚Äî <code>border-radius: 8px;</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Vibes</h3>\r\n      <p>If a <code>&lt;div&gt;</code> is a gift box:  \r\n        <br/>üéÅ Background is the wrapping paper  \r\n        <br/>üéÄ Border is the ribbon wrapped around it  \r\n        <br/>‚ú® Border-radius makes it a soft pillow instead of a hard box!\r\n      </p>\r\n    `,\r\n    proTip: 'You can combine multiple background layers by comma-separating them ‚Äî like adding patterns over gradients!',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.card {\r\n  background-color: #f97316;\r\n  border: 3px solid #1f2937;\r\n  color: white;\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.hero-banner {\r\n  background-image: url('banner.jpg');\r\n  background-size: cover;\r\n  background-position: center;\r\n  height: 300px;\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-pseudo-classes':\r\n  return {\r\n    slug: 'css-pseudo-classes',\r\n    title: 'Pseudo-classes & Pseudo-elements',\r\n    content: `\r\n      <p>Pseudo-classes and pseudo-elements in CSS are like magical helpers. They let you style elements based on their state or even add parts that don‚Äôt exist in your HTML.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üïπÔ∏è Pseudo-Classes (State-Based Styling)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Use pseudo-classes to style elements *when something happens* ‚Äî like hovering or focusing.</li>\r\n        <li><code>:hover</code> ‚Äî When you hover over something.</li>\r\n        <li><code>:focus</code> ‚Äî When an input gets focused.</li>\r\n        <li><code>:nth-child()</code> ‚Äî Style specific items in a list or grid.</li>\r\n        <li><code>:checked</code> ‚Äî Target selected radio buttons or checkboxes.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé≠ Pseudo-Elements (Add Content)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>::before</code> and <code>::after</code> ‚Äî Add decorative content before or after real content.</li>\r\n        <li><code>::first-letter</code> ‚Äî Style the first letter of a paragraph, like a storybook drop cap.</li>\r\n        <li><code>::placeholder</code> ‚Äî Style the gray text inside an input box.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">ü™Ñ Real-World Example</h3>\r\n      <p>Think of <strong>:hover</strong> like changing a button‚Äôs color when someone touches it.  \r\n         And <strong>::after</strong> is like placing a sticker on top of a box ‚Äî it‚Äôs not inside the box but still shows up visually!</p>\r\n    `,\r\n    proTip: 'Use pseudo-elements to add icons, highlights, or effects without touching your HTML ‚Äî super handy for clean code!',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.button:hover {\r\n  background-color: #f97316;\r\n  color: white;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.card::after {\r\n  content: 'üî•';\r\n  display: inline-block;\r\n  margin-left: 8px;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\ninput::placeholder {\r\n  color: #999;\r\n  font-style: italic;\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-transitions-animations':\r\n  return {\r\n    slug: 'css-transitions-animations',\r\n    title: 'Transitions & Animations',\r\n    content: `\r\n      <p>CSS can make your website feel alive! Transitions and animations let you add smooth movements and fun effects ‚Äî like buttons fading, cards sliding in, or icons bouncing.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßä CSS Transitions (Smooth Changes)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>transition</code> is used when an element changes its state ‚Äî like color on hover.</li>\r\n        <li>You define what to animate, how long it takes, and the timing style.</li>\r\n        <li>Example: <code>transition: background-color 0.3s ease;</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéûÔ∏è CSS Animations (Looped or Keyframed)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Use <code>@keyframes</code> to describe step-by-step animations.</li>\r\n        <li><code>animation-name</code>, <code>duration</code>, <code>iteration-count</code>, etc., control how it behaves.</li>\r\n        <li>You can create loaders, sliders, pop-ins, and much more!</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üé¢ Real-World Analogy</h3>\r\n      <p>üéØ <strong>Transition</strong> is like a light switch dimming instead of flipping suddenly.  \r\n         üé¨ <strong>Animation</strong> is like a full movie scene ‚Äî you plan the motion frame by frame!</p>\r\n    `,\r\n    proTip: 'Always add <code>transition</code> to the element‚Äôs default state ‚Äî not inside <code>:hover</code>!',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.card {\r\n  background-color: #1f2937;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  background-color: #f97316;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n@keyframes bounce {\r\n  0%, 100% { transform: translateY(0); }\r\n  50% { transform: translateY(-10px); }\r\n}\r\n\r\n.icon {\r\n  animation: bounce 1s infinite;\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-responsive':\r\n  return {\r\n    slug: 'css-responsive',\r\n    title: 'Responsive Design & Media Queries',\r\n    content: `\r\n      <p>Responsive design makes your website look great on all screen sizes ‚Äî from tiny mobile phones to giant desktop monitors.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì± Why Responsiveness Matters</h3>\r\n      <p>Imagine opening a website on your phone and everything looks broken ‚Äî text too small, buttons off-screen. That's what happens when a site isn't responsive.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† How It Works</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Use flexible units like <code>%</code>, <code>em</code>, or <code>vw/vh</code> instead of fixed <code>px</code>.</li>\r\n        <li>Use <strong>media queries</strong> to change styles at different screen sizes.</li>\r\n        <li>Hide/show elements or rearrange layout using CSS based on screen width.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìê Real-World Analogy</h3>\r\n      <p>Think of responsive design like water in a bottle ‚Äî no matter the shape or size of the bottle (device), water adjusts and fits perfectly inside.</p>\r\n    `,\r\n    proTip: 'Start designing for small screens first (mobile-first), then scale up using media queries!',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.container {\r\n  width: 100%;\r\n  padding: 1rem;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .container {\r\n    max-width: 700px;\r\n    margin: auto;\r\n  }\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\nh1 {\r\n  font-size: 1.5rem;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  h1 {\r\n    font-size: 2.5rem;\r\n  }\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-variables':\r\n  return {\r\n    slug: 'css-variables',\r\n    title: 'CSS Variables',\r\n    content: `\r\n      <p>CSS Variables (also called custom properties) let you store reusable values ‚Äî like colors, spacing, or font sizes ‚Äî in one place and use them throughout your styles.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÅ Why Use Them?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Change one variable ‚Äî update your whole theme instantly.</li>\r\n        <li>Makes your CSS more readable and maintainable.</li>\r\n        <li>Works great for dark/light mode or custom themes.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîß How to Use</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Define variables inside <code>:root</code> (global) or a selector (scoped).</li>\r\n        <li>Access them using <code>var(--your-variable)</code>.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\r\n      <p>Think of a CSS variable like a nickname: Instead of repeating ‚Äú#f97316‚Äù everywhere, you call it <code>--primary-color</code>. If the color ever changes ‚Äî just update the nickname in one place!</p>\r\n    `,\r\n    proTip: 'Define theme variables in <code>:root</code> so they‚Äôre accessible everywhere. Keep names readable like <code>--text-color</code>, <code>--btn-radius</code>, etc.',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n:root {\r\n  --primary-color: #f97316;\r\n  --border-radius: 8px;\r\n}\r\n\r\nbutton {\r\n  background-color: var(--primary-color);\r\n  border-radius: var(--border-radius);\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n.dark-mode {\r\n  --bg-color: #1f2937;\r\n  --text-color: #f9fafb;\r\n}\r\n\r\n.light-mode {\r\n  --bg-color: #ffffff;\r\n  --text-color: #1f2937;\r\n}\r\n\r\nbody {\r\n  background-color: var(--bg-color);\r\n  color: var(--text-color);\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'css-best-practices':\r\n  return {\r\n    slug: 'css-best-practices',\r\n    title: 'Best Practices & Real Projects',\r\n    content: `\r\n      <p>Now that you‚Äôve learned the CSS fundamentals, let‚Äôs talk about how to actually apply them when building real websites and apps.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üèóÔ∏è Start With a Plan</h3>\r\n      <p>Don‚Äôt jump straight into writing CSS. Sketch your layout, choose a color palette, pick fonts. This saves time and avoids messy styles later.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Keep It Modular</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Break your CSS into reusable chunks ‚Äî like <code>.btn</code>, <code>.card</code>, <code>.navbar</code>.</li>\r\n        <li>Use utility-first or component-based styles for better reusability.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßº Clean Code Tips</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Use consistent naming conventions (e.g., <code>kebab-case</code>).</li>\r\n        <li>Group related styles together.</li>\r\n        <li>Use variables for colors, spacing, and sizes.</li>\r\n        <li>Remove unused styles ‚Äî keep it lean!</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üöÄ Real Projects to Build</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Build a portfolio homepage (with responsive navbar).</li>\r\n        <li>Create a product landing page (cards + CTA buttons).</li>\r\n        <li>Clone a section from a famous website (Netflix, Apple, etc.).</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Debug Like a Pro</h3>\r\n      <p>Use browser dev tools (right-click ‚Üí Inspect) to test and tweak styles live. You‚Äôll save a ton of time.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-World Analogy</h3>\r\n      <p>Think of your CSS like a well-organized wardrobe: Each item (class) is in its place, named clearly, and easy to reuse. No clutter!</p>\r\n    `,\r\n    proTip: 'Before you add a new class or style, ask: ‚ÄúCan I reuse something I already made?‚Äù ‚Äî That‚Äôs the CSS ninja mindset.',\r\n    codeSamples: [\r\n      {\r\n        language: 'css',\r\n        code: `\r\n/* Consistent and reusable button styles */\r\n.btn {\r\n  padding: 0.75rem 1.5rem;\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border-radius: 6px;\r\n  font-weight: 600;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn:hover {\r\n  background-color: #ea580c;\r\n}`\r\n      },\r\n      {\r\n        language: 'css',\r\n        code: `\r\n/* Clean layout with utility classes */\r\n.container {\r\n  max-width: 960px;\r\n  margin: auto;\r\n  padding: 1rem;\r\n}\r\n\r\n.card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  padding: 1.5rem;\r\n  margin-bottom: 1rem;\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n\r\n      default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAEA,OAAO,MAAMA,SAAS,GAAY,CAChC;EAAEC,EAAE,EAAE,kBAAkB;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,IAAI,EAAE;AAAkB,CAAE,EAClF;EAAEF,EAAE,EAAE,0BAA0B;EAAEC,KAAK,EAAE,wBAAwB;EAAEC,IAAI,EAAE;AAA0B,CAAE,EACrG;EAAEF,EAAE,EAAE,kBAAkB;EAAEC,KAAK,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAkB,CAAE,EAC7E;EAAEF,EAAE,EAAE,eAAe;EAAEC,KAAK,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAe,CAAE,EACtE;EAAEF,EAAE,EAAE,sBAAsB;EAAEC,KAAK,EAAE,uBAAuB;EAAEC,IAAI,EAAE;AAAsB,CAAE,EAC5F;EAAEF,EAAE,EAAE,aAAa;EAAEC,KAAK,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAa,CAAE,EACnE;EAAEF,EAAE,EAAE,UAAU;EAAEC,KAAK,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAU,CAAE,EACvD;EAAEF,EAAE,EAAE,sBAAsB;EAAEC,KAAK,EAAE,yCAAyC;EAAEC,IAAI,EAAE;AAAsB,CAAE,EAC9G;EAAEF,EAAE,EAAE,oBAAoB;EAAEC,KAAK,EAAE,0BAA0B;EAAEC,IAAI,EAAE;AAAoB,CAAE,EAC3F;EAAEF,EAAE,EAAE,uBAAuB;EAAEC,KAAK,EAAE,uBAAuB;EAAEC,IAAI,EAAE;AAAuB,CAAE,EAC9F;EAAEF,EAAE,EAAE,oBAAoB;EAAEC,KAAK,EAAE,kCAAkC;EAAEC,IAAI,EAAE;AAAoB,CAAE,EACnG;EAAEF,EAAE,EAAE,4BAA4B;EAAEC,KAAK,EAAE,0BAA0B;EAAEC,IAAI,EAAE;AAA4B,CAAE,EAC3G;EAAEF,EAAE,EAAE,gBAAgB;EAAEC,KAAK,EAAE,mCAAmC;EAAEC,IAAI,EAAE;AAAgB,CAAE,EAC5F;EAAEF,EAAE,EAAE,eAAe;EAAEC,KAAK,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAe,CAAE,EACtE;EAAEF,EAAE,EAAE,oBAAoB;EAAEC,KAAK,EAAE,gCAAgC;EAAEC,IAAI,EAAE;AAAoB,CAAE,CAClG;AAGD,OAAM,SAAUC,eAAeA,CAACD,IAAY;EAC1C,QAAQA,IAAI;IACV,KAAK,kBAAkB;MACrB,OAAO;QACLA,IAAI,EAAE,kBAAkB;QACxBD,KAAK,EAAE,cAAc;QACrBG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BR;QACDC,MAAM,EAAE,2HAA2H;QACnIC,WAAW,EAAE,CACX;UACYC,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;SAqBjB,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;SAeP;OAEJ;IAED,KAAK,sBAAsB;MAC3B,OAAO;QACLN,IAAI,EAAE,sBAAsB;QAC5BD,KAAK,EAAE,wBAAwB;QAC/BG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAmCR;QACDC,MAAM,EAAE,gHAAgH;QACxHC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACXC,IAAI,EAAE;;;;;;;;;;;;;;;;;;SAkBP,EACD;UACAD,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;;SAMT;OAEJ;IAED,KAAK,kBAAkB;MACvB,OAAO;QACLN,IAAI,EAAE,kBAAkB;QACxBD,KAAK,EAAE,uBAAuB;QAC9BG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAuCR;QACDC,MAAM,EAAE,kHAAkH;QAC1HC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;;;;SAkBC,EACD;UACED,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;SAKf;OAEJ;IAED,KAAK,eAAe;MACpB,OAAO;QACLN,IAAI,EAAE,eAAe;QACrBD,KAAK,EAAE,6BAA6B;QACpCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAgDR;QACDC,MAAM,EAAE,yGAAyG;QACjHC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACTC,IAAI,EAAE;;;;;;;;;;;;SAYP,EACD;UACED,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;SAIb;OAEJ;IAED,KAAK,sBAAsB;MAC3B,OAAO;QACLN,IAAI,EAAE,sBAAsB;QAC5BD,KAAK,EAAE,8BAA8B;QACrCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAsCR;QACDC,MAAM,EAAE,iGAAiG;QACzGC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACXC,IAAI,EAAE;;;;;;;;;SASP,EACD;UACED,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;SAIX;OAEJ;IAED,KAAK,aAAa;MACtB,OAAO;QACLN,IAAI,EAAE,aAAa;QACnBD,KAAK,EAAE,+BAA+B;QACtCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BR;QACDC,MAAM,EAAE,gGAAgG;QACxGC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;;;SAOD,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;SAeb;OAEJ;IAED,KAAK,UAAU;MACf,OAAO;QACLN,IAAI,EAAE,UAAU;QAChBD,KAAK,EAAE,oBAAoB;QAC3BG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAoCR;QACDC,MAAM,EAAE,kKAAkK;QAC1KC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;;;;SAQP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;SAeP;OAEJ;IAED,KAAK,sBAAsB;MAC3B,OAAO;QACLN,IAAI,EAAE,sBAAsB;QAC5BD,KAAK,EAAE,yCAAyC;QAChDG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2CR;QACDC,MAAM,EAAE,gHAAgH;QACxHC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,MAAM;UAChBC,IAAI,EAAE;;;;;SAKP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;SAUP;OAEJ;IAED,KAAK,oBAAoB;MACzB,OAAO;QACLN,IAAI,EAAE,oBAAoB;QAC1BD,KAAK,EAAE,0BAA0B;QACjCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;KA0BR;QACDC,MAAM,EAAE,kFAAkF;QAC1FC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;SAQP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;SAIP;OAEJ;IAED,KAAK,uBAAuB;MAC5B,OAAO;QACLN,IAAI,EAAE,uBAAuB;QAC7BD,KAAK,EAAE,uBAAuB;QAC9BG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;KAyBR;QACDC,MAAM,EAAE,4GAA4G;QACpHC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;SAQP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;SAOP;OAEJ;IAED,KAAK,oBAAoB;MACzB,OAAO;QACLN,IAAI,EAAE,oBAAoB;QAC1BD,KAAK,EAAE,kCAAkC;QACzCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;KAsBR;QACDC,MAAM,EAAE,mHAAmH;QAC3HC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;SAKP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;SAMP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;SAKP;OAEJ;IAED,KAAK,4BAA4B;MACjC,OAAO;QACLN,IAAI,EAAE,4BAA4B;QAClCD,KAAK,EAAE,0BAA0B;QACjCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;KAoBR;QACDC,MAAM,EAAE,qGAAqG;QAC7GC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;SASP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;SASP;OAEJ;IAED,KAAK,gBAAgB;MACrB,OAAO;QACLN,IAAI,EAAE,gBAAgB;QACtBD,KAAK,EAAE,mCAAmC;QAC1CG,OAAO,EAAE;;;;;;;;;;;;;;;KAeR;QACDC,MAAM,EAAE,4FAA4F;QACpGC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;SAYP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;SAUP;OAEJ;IAED,KAAK,eAAe;MACpB,OAAO;QACLN,IAAI,EAAE,eAAe;QACrBD,KAAK,EAAE,eAAe;QACtBG,OAAO,EAAE;;;;;;;;;;;;;;;;;;KAkBR;QACDC,MAAM,EAAE,oKAAoK;QAC5KC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;SAUP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;SAeP;OAEJ;IAED,KAAK,oBAAoB;MACzB,OAAO;QACLN,IAAI,EAAE,oBAAoB;QAC1BD,KAAK,EAAE,gCAAgC;QACvCG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCR;QACDC,MAAM,EAAE,mHAAmH;QAC3HC,WAAW,EAAE,CACX;UACEC,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;;SAgBP,EACD;UACED,QAAQ,EAAE,KAAK;UACfC,IAAI,EAAE;;;;;;;;;;;;;;;SAeP;OAEJ;IAGG;MACA,OAAOC,SAAS;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}