{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isChrome, isEdge, isFirefox, isLinux, isMacintosh, isSafari, isWeb, isWindows } from '../../../base/common/platform.js';\nimport { isFalsyOrWhitespace } from '../../../base/common/strings.js';\nimport { Scanner } from './scanner.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { localize } from '../../../nls.js';\nconst CONSTANT_VALUES = new Map();\nCONSTANT_VALUES.set('false', false);\nCONSTANT_VALUES.set('true', true);\nCONSTANT_VALUES.set('isMac', isMacintosh);\nCONSTANT_VALUES.set('isLinux', isLinux);\nCONSTANT_VALUES.set('isWindows', isWindows);\nCONSTANT_VALUES.set('isWeb', isWeb);\nCONSTANT_VALUES.set('isMacNative', isMacintosh && !isWeb);\nCONSTANT_VALUES.set('isEdge', isEdge);\nCONSTANT_VALUES.set('isFirefox', isFirefox);\nCONSTANT_VALUES.set('isChrome', isChrome);\nCONSTANT_VALUES.set('isSafari', isSafari);\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst defaultConfig = {\n  regexParsingWithErrorRecovery: true\n};\nconst errorEmptyString = localize('contextkey.parser.error.emptyString', \"Empty context key expression\");\nconst hintEmptyString = localize('contextkey.parser.error.emptyString.hint', \"Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively.\");\nconst errorNoInAfterNot = localize('contextkey.parser.error.noInAfterNot', \"'in' after 'not'.\");\nconst errorClosingParenthesis = localize('contextkey.parser.error.closingParenthesis', \"closing parenthesis ')'\");\nconst errorUnexpectedToken = localize('contextkey.parser.error.unexpectedToken', \"Unexpected token\");\nconst hintUnexpectedToken = localize('contextkey.parser.error.unexpectedToken.hint', \"Did you forget to put && or || before the token?\");\nconst errorUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF', \"Unexpected end of expression\");\nconst hintUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF.hint', \"Did you forget to put a context key?\");\n/**\n * A parser for context key expressions.\n *\n * Example:\n * ```ts\n * const parser = new Parser();\n * const expr = parser.parse('foo == \"bar\" && baz == true');\n *\n * if (expr === undefined) {\n * \t// there were lexing or parsing errors\n * \t// process lexing errors with `parser.lexingErrors`\n *  // process parsing errors with `parser.parsingErrors`\n * } else {\n * \t// expr is a valid expression\n * }\n * ```\n */\nexport class Parser {\n  // Note: this doesn't produce an exact syntax tree but a normalized one\n  // ContextKeyExpression's that we use as AST nodes do not expose constructors that do not normalize\n  static #_ = this._parseError = new Error();\n  constructor(_config = defaultConfig) {\n    this._config = _config;\n    // lifetime note: `_scanner` lives as long as the parser does, i.e., is not reset between calls to `parse`\n    this._scanner = new Scanner();\n    // lifetime note: `_tokens`, `_current`, and `_parsingErrors` must be reset between calls to `parse`\n    this._tokens = [];\n    this._current = 0; // invariant: 0 <= this._current < this._tokens.length ; any incrementation of this value must first call `_isAtEnd`\n    this._parsingErrors = [];\n    this._flagsGYRe = /g|y/g;\n  }\n  /**\n   * Parse a context key expression.\n   *\n   * @param input the expression to parse\n   * @returns the parsed expression or `undefined` if there's an error - call `lexingErrors` and `parsingErrors` to see the errors\n   */\n  parse(input) {\n    if (input === '') {\n      this._parsingErrors.push({\n        message: errorEmptyString,\n        offset: 0,\n        lexeme: '',\n        additionalInfo: hintEmptyString\n      });\n      return undefined;\n    }\n    this._tokens = this._scanner.reset(input).scan();\n    // @ulugbekna: we do not stop parsing if there are lexing errors to be able to reconstruct regexes with unescaped slashes; TODO@ulugbekna: make this respect config option for recovery\n    this._current = 0;\n    this._parsingErrors = [];\n    try {\n      const expr = this._expr();\n      if (!this._isAtEnd()) {\n        const peek = this._peek();\n        const additionalInfo = peek.type === 17 /* TokenType.Str */ ? hintUnexpectedToken : undefined;\n        this._parsingErrors.push({\n          message: errorUnexpectedToken,\n          offset: peek.offset,\n          lexeme: Scanner.getLexeme(peek),\n          additionalInfo\n        });\n        throw Parser._parseError;\n      }\n      return expr;\n    } catch (e) {\n      if (!(e === Parser._parseError)) {\n        throw e;\n      }\n      return undefined;\n    }\n  }\n  _expr() {\n    return this._or();\n  }\n  _or() {\n    const expr = [this._and()];\n    while (this._matchOne(16 /* TokenType.Or */)) {\n      const right = this._and();\n      expr.push(right);\n    }\n    return expr.length === 1 ? expr[0] : ContextKeyExpr.or(...expr);\n  }\n  _and() {\n    const expr = [this._term()];\n    while (this._matchOne(15 /* TokenType.And */)) {\n      const right = this._term();\n      expr.push(right);\n    }\n    return expr.length === 1 ? expr[0] : ContextKeyExpr.and(...expr);\n  }\n  _term() {\n    if (this._matchOne(2 /* TokenType.Neg */)) {\n      const peek = this._peek();\n      switch (peek.type) {\n        case 11 /* TokenType.True */:\n          this._advance();\n          return ContextKeyFalseExpr.INSTANCE;\n        case 12 /* TokenType.False */:\n          this._advance();\n          return ContextKeyTrueExpr.INSTANCE;\n        case 0 /* TokenType.LParen */:\n          {\n            this._advance();\n            const expr = this._expr();\n            this._consume(1 /* TokenType.RParen */, errorClosingParenthesis);\n            return expr?.negate();\n          }\n        case 17 /* TokenType.Str */:\n          this._advance();\n          return ContextKeyNotExpr.create(peek.lexeme);\n        default:\n          throw this._errExpectedButGot(`KEY | true | false | '(' expression ')'`, peek);\n      }\n    }\n    return this._primary();\n  }\n  _primary() {\n    const peek = this._peek();\n    switch (peek.type) {\n      case 11 /* TokenType.True */:\n        this._advance();\n        return ContextKeyExpr.true();\n      case 12 /* TokenType.False */:\n        this._advance();\n        return ContextKeyExpr.false();\n      case 0 /* TokenType.LParen */:\n        {\n          this._advance();\n          const expr = this._expr();\n          this._consume(1 /* TokenType.RParen */, errorClosingParenthesis);\n          return expr;\n        }\n      case 17 /* TokenType.Str */:\n        {\n          // KEY\n          const key = peek.lexeme;\n          this._advance();\n          // =~ regex\n          if (this._matchOne(9 /* TokenType.RegexOp */)) {\n            // @ulugbekna: we need to reconstruct the regex from the tokens because some extensions use unescaped slashes in regexes\n            const expr = this._peek();\n            if (!this._config.regexParsingWithErrorRecovery) {\n              this._advance();\n              if (expr.type !== 10 /* TokenType.RegexStr */) {\n                throw this._errExpectedButGot(`REGEX`, expr);\n              }\n              const regexLexeme = expr.lexeme;\n              const closingSlashIndex = regexLexeme.lastIndexOf('/');\n              const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));\n              let regexp;\n              try {\n                regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);\n              } catch (e) {\n                throw this._errExpectedButGot(`REGEX`, expr);\n              }\n              return ContextKeyRegexExpr.create(key, regexp);\n            }\n            switch (expr.type) {\n              case 10 /* TokenType.RegexStr */:\n              case 19 /* TokenType.Error */:\n                {\n                  // also handle an ErrorToken in case of smth such as /(/file)/\n                  const lexemeReconstruction = [expr.lexeme]; // /REGEX/ or /REGEX/FLAGS\n                  this._advance();\n                  let followingToken = this._peek();\n                  let parenBalance = 0;\n                  for (let i = 0; i < expr.lexeme.length; i++) {\n                    if (expr.lexeme.charCodeAt(i) === 40 /* CharCode.OpenParen */) {\n                      parenBalance++;\n                    } else if (expr.lexeme.charCodeAt(i) === 41 /* CharCode.CloseParen */) {\n                      parenBalance--;\n                    }\n                  }\n                  while (!this._isAtEnd() && followingToken.type !== 15 /* TokenType.And */ && followingToken.type !== 16 /* TokenType.Or */) {\n                    switch (followingToken.type) {\n                      case 0 /* TokenType.LParen */:\n                        parenBalance++;\n                        break;\n                      case 1 /* TokenType.RParen */:\n                        parenBalance--;\n                        break;\n                      case 10 /* TokenType.RegexStr */:\n                      case 18 /* TokenType.QuotedStr */:\n                        for (let i = 0; i < followingToken.lexeme.length; i++) {\n                          if (followingToken.lexeme.charCodeAt(i) === 40 /* CharCode.OpenParen */) {\n                            parenBalance++;\n                          } else if (expr.lexeme.charCodeAt(i) === 41 /* CharCode.CloseParen */) {\n                            parenBalance--;\n                          }\n                        }\n                    }\n                    if (parenBalance < 0) {\n                      break;\n                    }\n                    lexemeReconstruction.push(Scanner.getLexeme(followingToken));\n                    this._advance();\n                    followingToken = this._peek();\n                  }\n                  const regexLexeme = lexemeReconstruction.join('');\n                  const closingSlashIndex = regexLexeme.lastIndexOf('/');\n                  const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));\n                  let regexp;\n                  try {\n                    regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);\n                  } catch (e) {\n                    throw this._errExpectedButGot(`REGEX`, expr);\n                  }\n                  return ContextKeyExpr.regex(key, regexp);\n                }\n              case 18 /* TokenType.QuotedStr */:\n                {\n                  const serializedValue = expr.lexeme;\n                  this._advance();\n                  // replicate old regex parsing behavior\n                  let regex = null;\n                  if (!isFalsyOrWhitespace(serializedValue)) {\n                    const start = serializedValue.indexOf('/');\n                    const end = serializedValue.lastIndexOf('/');\n                    if (start !== end && start >= 0) {\n                      const value = serializedValue.slice(start + 1, end);\n                      const caseIgnoreFlag = serializedValue[end + 1] === 'i' ? 'i' : '';\n                      try {\n                        regex = new RegExp(value, caseIgnoreFlag);\n                      } catch (_e) {\n                        throw this._errExpectedButGot(`REGEX`, expr);\n                      }\n                    }\n                  }\n                  if (regex === null) {\n                    throw this._errExpectedButGot('REGEX', expr);\n                  }\n                  return ContextKeyRegexExpr.create(key, regex);\n                }\n              default:\n                throw this._errExpectedButGot('REGEX', this._peek());\n            }\n          }\n          // [ 'not' 'in' value ]\n          if (this._matchOne(14 /* TokenType.Not */)) {\n            this._consume(13 /* TokenType.In */, errorNoInAfterNot);\n            const right = this._value();\n            return ContextKeyExpr.notIn(key, right);\n          }\n          // [ ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in') value ]\n          const maybeOp = this._peek().type;\n          switch (maybeOp) {\n            case 3 /* TokenType.Eq */:\n              {\n                this._advance();\n                const right = this._value();\n                if (this._previous().type === 18 /* TokenType.QuotedStr */) {\n                  // to preserve old parser behavior: \"foo == 'true'\" is preserved as \"foo == 'true'\", but \"foo == true\" is optimized as \"foo\"\n                  return ContextKeyExpr.equals(key, right);\n                }\n                switch (right) {\n                  case 'true':\n                    return ContextKeyExpr.has(key);\n                  case 'false':\n                    return ContextKeyExpr.not(key);\n                  default:\n                    return ContextKeyExpr.equals(key, right);\n                }\n              }\n            case 4 /* TokenType.NotEq */:\n              {\n                this._advance();\n                const right = this._value();\n                if (this._previous().type === 18 /* TokenType.QuotedStr */) {\n                  // same as above with \"foo != 'true'\"\n                  return ContextKeyExpr.notEquals(key, right);\n                }\n                switch (right) {\n                  case 'true':\n                    return ContextKeyExpr.not(key);\n                  case 'false':\n                    return ContextKeyExpr.has(key);\n                  default:\n                    return ContextKeyExpr.notEquals(key, right);\n                }\n              }\n            // TODO: ContextKeyExpr.smaller(key, right) accepts only `number` as `right` AND during eval of this node, we just eval to `false` if `right` is not a number\n            // consequently, package.json linter should _warn_ the user if they're passing undesired things to ops\n            case 5 /* TokenType.Lt */:\n              this._advance();\n              return ContextKeySmallerExpr.create(key, this._value());\n            case 6 /* TokenType.LtEq */:\n              this._advance();\n              return ContextKeySmallerEqualsExpr.create(key, this._value());\n            case 7 /* TokenType.Gt */:\n              this._advance();\n              return ContextKeyGreaterExpr.create(key, this._value());\n            case 8 /* TokenType.GtEq */:\n              this._advance();\n              return ContextKeyGreaterEqualsExpr.create(key, this._value());\n            case 13 /* TokenType.In */:\n              this._advance();\n              return ContextKeyExpr.in(key, this._value());\n            default:\n              return ContextKeyExpr.has(key);\n          }\n        }\n      case 20 /* TokenType.EOF */:\n        this._parsingErrors.push({\n          message: errorUnexpectedEOF,\n          offset: peek.offset,\n          lexeme: '',\n          additionalInfo: hintUnexpectedEOF\n        });\n        throw Parser._parseError;\n      default:\n        throw this._errExpectedButGot(`true | false | KEY \\n\\t| KEY '=~' REGEX \\n\\t| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());\n    }\n  }\n  _value() {\n    const token = this._peek();\n    switch (token.type) {\n      case 17 /* TokenType.Str */:\n      case 18 /* TokenType.QuotedStr */:\n        this._advance();\n        return token.lexeme;\n      case 11 /* TokenType.True */:\n        this._advance();\n        return 'true';\n      case 12 /* TokenType.False */:\n        this._advance();\n        return 'false';\n      case 13 /* TokenType.In */:\n        // we support `in` as a value, e.g., \"when\": \"languageId == in\" - exists in existing extensions\n        this._advance();\n        return 'in';\n      default:\n        // this allows \"when\": \"foo == \" which's used by existing extensions\n        // we do not call `_advance` on purpose - we don't want to eat unintended tokens\n        return '';\n    }\n  }\n  _removeFlagsGY(flags) {\n    return flags.replaceAll(this._flagsGYRe, '');\n  }\n  // careful: this can throw if current token is the initial one (ie index = 0)\n  _previous() {\n    return this._tokens[this._current - 1];\n  }\n  _matchOne(token) {\n    if (this._check(token)) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n  _advance() {\n    if (!this._isAtEnd()) {\n      this._current++;\n    }\n    return this._previous();\n  }\n  _consume(type, message) {\n    if (this._check(type)) {\n      return this._advance();\n    }\n    throw this._errExpectedButGot(message, this._peek());\n  }\n  _errExpectedButGot(expected, got, additionalInfo) {\n    const message = localize('contextkey.parser.error.expectedButGot', \"Expected: {0}\\nReceived: '{1}'.\", expected, Scanner.getLexeme(got));\n    const offset = got.offset;\n    const lexeme = Scanner.getLexeme(got);\n    this._parsingErrors.push({\n      message,\n      offset,\n      lexeme,\n      additionalInfo\n    });\n    return Parser._parseError;\n  }\n  _check(type) {\n    return this._peek().type === type;\n  }\n  _peek() {\n    return this._tokens[this._current];\n  }\n  _isAtEnd() {\n    return this._peek().type === 20 /* TokenType.EOF */;\n  }\n}\nexport class ContextKeyExpr {\n  static false() {\n    return ContextKeyFalseExpr.INSTANCE;\n  }\n  static true() {\n    return ContextKeyTrueExpr.INSTANCE;\n  }\n  static has(key) {\n    return ContextKeyDefinedExpr.create(key);\n  }\n  static equals(key, value) {\n    return ContextKeyEqualsExpr.create(key, value);\n  }\n  static notEquals(key, value) {\n    return ContextKeyNotEqualsExpr.create(key, value);\n  }\n  static regex(key, value) {\n    return ContextKeyRegexExpr.create(key, value);\n  }\n  static in(key, value) {\n    return ContextKeyInExpr.create(key, value);\n  }\n  static notIn(key, value) {\n    return ContextKeyNotInExpr.create(key, value);\n  }\n  static not(key) {\n    return ContextKeyNotExpr.create(key);\n  }\n  static and(...expr) {\n    return ContextKeyAndExpr.create(expr, null, true);\n  }\n  static or(...expr) {\n    return ContextKeyOrExpr.create(expr, null, true);\n  }\n  static #_ = this._parser = new Parser({\n    regexParsingWithErrorRecovery: false\n  });\n  static deserialize(serialized) {\n    if (serialized === undefined || serialized === null) {\n      // an empty string needs to be handled by the parser to get a corresponding parsing error reported\n      return undefined;\n    }\n    const expr = this._parser.parse(serialized);\n    return expr;\n  }\n}\nexport function expressionsAreEqualWithConstantSubstitution(a, b) {\n  const aExpr = a ? a.substituteConstants() : undefined;\n  const bExpr = b ? b.substituteConstants() : undefined;\n  if (!aExpr && !bExpr) {\n    return true;\n  }\n  if (!aExpr || !bExpr) {\n    return false;\n  }\n  return aExpr.equals(bExpr);\n}\nfunction cmp(a, b) {\n  return a.cmp(b);\n}\nexport class ContextKeyFalseExpr {\n  static #_ = this.INSTANCE = new ContextKeyFalseExpr();\n  constructor() {\n    this.type = 0 /* ContextKeyExprType.False */;\n  }\n  cmp(other) {\n    return this.type - other.type;\n  }\n  equals(other) {\n    return other.type === this.type;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    return false;\n  }\n  serialize() {\n    return 'false';\n  }\n  keys() {\n    return [];\n  }\n  negate() {\n    return ContextKeyTrueExpr.INSTANCE;\n  }\n}\nexport class ContextKeyTrueExpr {\n  static #_ = this.INSTANCE = new ContextKeyTrueExpr();\n  constructor() {\n    this.type = 1 /* ContextKeyExprType.True */;\n  }\n  cmp(other) {\n    return this.type - other.type;\n  }\n  equals(other) {\n    return other.type === this.type;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    return true;\n  }\n  serialize() {\n    return 'true';\n  }\n  keys() {\n    return [];\n  }\n  negate() {\n    return ContextKeyFalseExpr.INSTANCE;\n  }\n}\nexport class ContextKeyDefinedExpr {\n  static create(key, negated = null) {\n    const constantValue = CONSTANT_VALUES.get(key);\n    if (typeof constantValue === 'boolean') {\n      return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n    }\n    return new ContextKeyDefinedExpr(key, negated);\n  }\n  constructor(key, negated) {\n    this.key = key;\n    this.negated = negated;\n    this.type = 2 /* ContextKeyExprType.Defined */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp1(this.key, other.key);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const constantValue = CONSTANT_VALUES.get(this.key);\n    if (typeof constantValue === 'boolean') {\n      return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n    }\n    return this;\n  }\n  evaluate(context) {\n    return !!context.getValue(this.key);\n  }\n  serialize() {\n    return this.key;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyNotExpr.create(this.key, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyEqualsExpr {\n  static create(key, value, negated = null) {\n    if (typeof value === 'boolean') {\n      return value ? ContextKeyDefinedExpr.create(key, negated) : ContextKeyNotExpr.create(key, negated);\n    }\n    const constantValue = CONSTANT_VALUES.get(key);\n    if (typeof constantValue === 'boolean') {\n      const trueValue = constantValue ? 'true' : 'false';\n      return value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n    }\n    return new ContextKeyEqualsExpr(key, value, negated);\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 4 /* ContextKeyExprType.Equals */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const constantValue = CONSTANT_VALUES.get(this.key);\n    if (typeof constantValue === 'boolean') {\n      const trueValue = constantValue ? 'true' : 'false';\n      return this.value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n    }\n    return this;\n  }\n  evaluate(context) {\n    // Intentional ==\n    // eslint-disable-next-line eqeqeq\n    return context.getValue(this.key) == this.value;\n  }\n  serialize() {\n    return `${this.key} == '${this.value}'`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyNotEqualsExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyInExpr {\n  static create(key, valueKey) {\n    return new ContextKeyInExpr(key, valueKey);\n  }\n  constructor(key, valueKey) {\n    this.key = key;\n    this.valueKey = valueKey;\n    this.type = 10 /* ContextKeyExprType.In */;\n    this.negated = null;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.valueKey, other.key, other.valueKey);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.valueKey === other.valueKey;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    const source = context.getValue(this.valueKey);\n    const item = context.getValue(this.key);\n    if (Array.isArray(source)) {\n      return source.includes(item);\n    }\n    if (typeof item === 'string' && typeof source === 'object' && source !== null) {\n      return hasOwnProperty.call(source, item);\n    }\n    return false;\n  }\n  serialize() {\n    return `${this.key} in '${this.valueKey}'`;\n  }\n  keys() {\n    return [this.key, this.valueKey];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyNotInExpr.create(this.key, this.valueKey);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyNotInExpr {\n  static create(key, valueKey) {\n    return new ContextKeyNotInExpr(key, valueKey);\n  }\n  constructor(key, valueKey) {\n    this.key = key;\n    this.valueKey = valueKey;\n    this.type = 11 /* ContextKeyExprType.NotIn */;\n    this._negated = ContextKeyInExpr.create(key, valueKey);\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return this._negated.cmp(other._negated);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this._negated.equals(other._negated);\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    return !this._negated.evaluate(context);\n  }\n  serialize() {\n    return `${this.key} not in '${this.valueKey}'`;\n  }\n  keys() {\n    return this._negated.keys();\n  }\n  negate() {\n    return this._negated;\n  }\n}\nexport class ContextKeyNotEqualsExpr {\n  static create(key, value, negated = null) {\n    if (typeof value === 'boolean') {\n      if (value) {\n        return ContextKeyNotExpr.create(key, negated);\n      }\n      return ContextKeyDefinedExpr.create(key, negated);\n    }\n    const constantValue = CONSTANT_VALUES.get(key);\n    if (typeof constantValue === 'boolean') {\n      const falseValue = constantValue ? 'true' : 'false';\n      return value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE;\n    }\n    return new ContextKeyNotEqualsExpr(key, value, negated);\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 5 /* ContextKeyExprType.NotEquals */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const constantValue = CONSTANT_VALUES.get(this.key);\n    if (typeof constantValue === 'boolean') {\n      const falseValue = constantValue ? 'true' : 'false';\n      return this.value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE;\n    }\n    return this;\n  }\n  evaluate(context) {\n    // Intentional !=\n    // eslint-disable-next-line eqeqeq\n    return context.getValue(this.key) != this.value;\n  }\n  serialize() {\n    return `${this.key} != '${this.value}'`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyEqualsExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyNotExpr {\n  static create(key, negated = null) {\n    const constantValue = CONSTANT_VALUES.get(key);\n    if (typeof constantValue === 'boolean') {\n      return constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE;\n    }\n    return new ContextKeyNotExpr(key, negated);\n  }\n  constructor(key, negated) {\n    this.key = key;\n    this.negated = negated;\n    this.type = 3 /* ContextKeyExprType.Not */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp1(this.key, other.key);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const constantValue = CONSTANT_VALUES.get(this.key);\n    if (typeof constantValue === 'boolean') {\n      return constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE;\n    }\n    return this;\n  }\n  evaluate(context) {\n    return !context.getValue(this.key);\n  }\n  serialize() {\n    return `!${this.key}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyDefinedExpr.create(this.key, this);\n    }\n    return this.negated;\n  }\n}\nfunction withFloatOrStr(value, callback) {\n  if (typeof value === 'string') {\n    const n = parseFloat(value);\n    if (!isNaN(n)) {\n      value = n;\n    }\n  }\n  if (typeof value === 'string' || typeof value === 'number') {\n    return callback(value);\n  }\n  return ContextKeyFalseExpr.INSTANCE;\n}\nexport class ContextKeyGreaterExpr {\n  static create(key, _value, negated = null) {\n    return withFloatOrStr(_value, value => new ContextKeyGreaterExpr(key, value, negated));\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 12 /* ContextKeyExprType.Greater */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    if (typeof this.value === 'string') {\n      return false;\n    }\n    return parseFloat(context.getValue(this.key)) > this.value;\n  }\n  serialize() {\n    return `${this.key} > ${this.value}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeySmallerEqualsExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyGreaterEqualsExpr {\n  static create(key, _value, negated = null) {\n    return withFloatOrStr(_value, value => new ContextKeyGreaterEqualsExpr(key, value, negated));\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 13 /* ContextKeyExprType.GreaterEquals */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    if (typeof this.value === 'string') {\n      return false;\n    }\n    return parseFloat(context.getValue(this.key)) >= this.value;\n  }\n  serialize() {\n    return `${this.key} >= ${this.value}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeySmallerExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeySmallerExpr {\n  static create(key, _value, negated = null) {\n    return withFloatOrStr(_value, value => new ContextKeySmallerExpr(key, value, negated));\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 14 /* ContextKeyExprType.Smaller */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    if (typeof this.value === 'string') {\n      return false;\n    }\n    return parseFloat(context.getValue(this.key)) < this.value;\n  }\n  serialize() {\n    return `${this.key} < ${this.value}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyGreaterEqualsExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeySmallerEqualsExpr {\n  static create(key, _value, negated = null) {\n    return withFloatOrStr(_value, value => new ContextKeySmallerEqualsExpr(key, value, negated));\n  }\n  constructor(key, value, negated) {\n    this.key = key;\n    this.value = value;\n    this.negated = negated;\n    this.type = 15 /* ContextKeyExprType.SmallerEquals */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return cmp2(this.key, this.value, other.key, other.value);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this.key === other.key && this.value === other.value;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    if (typeof this.value === 'string') {\n      return false;\n    }\n    return parseFloat(context.getValue(this.key)) <= this.value;\n  }\n  serialize() {\n    return `${this.key} <= ${this.value}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyGreaterExpr.create(this.key, this.value, this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyRegexExpr {\n  static create(key, regexp) {\n    return new ContextKeyRegexExpr(key, regexp);\n  }\n  constructor(key, regexp) {\n    this.key = key;\n    this.regexp = regexp;\n    this.type = 7 /* ContextKeyExprType.Regex */;\n    this.negated = null;\n    //\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    if (this.key < other.key) {\n      return -1;\n    }\n    if (this.key > other.key) {\n      return 1;\n    }\n    const thisSource = this.regexp ? this.regexp.source : '';\n    const otherSource = other.regexp ? other.regexp.source : '';\n    if (thisSource < otherSource) {\n      return -1;\n    }\n    if (thisSource > otherSource) {\n      return 1;\n    }\n    return 0;\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      const thisSource = this.regexp ? this.regexp.source : '';\n      const otherSource = other.regexp ? other.regexp.source : '';\n      return this.key === other.key && thisSource === otherSource;\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    const value = context.getValue(this.key);\n    return this.regexp ? this.regexp.test(value) : false;\n  }\n  serialize() {\n    const value = this.regexp ? `/${this.regexp.source}/${this.regexp.flags}` : '/invalid/';\n    return `${this.key} =~ ${value}`;\n  }\n  keys() {\n    return [this.key];\n  }\n  negate() {\n    if (!this.negated) {\n      this.negated = ContextKeyNotRegexExpr.create(this);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyNotRegexExpr {\n  static create(actual) {\n    return new ContextKeyNotRegexExpr(actual);\n  }\n  constructor(_actual) {\n    this._actual = _actual;\n    this.type = 8 /* ContextKeyExprType.NotRegex */;\n    //\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    return this._actual.cmp(other._actual);\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      return this._actual.equals(other._actual);\n    }\n    return false;\n  }\n  substituteConstants() {\n    return this;\n  }\n  evaluate(context) {\n    return !this._actual.evaluate(context);\n  }\n  serialize() {\n    return `!(${this._actual.serialize()})`;\n  }\n  keys() {\n    return this._actual.keys();\n  }\n  negate() {\n    return this._actual;\n  }\n}\n/**\n * @returns the same instance if nothing changed.\n */\nfunction eliminateConstantsInArray(arr) {\n  // Allocate array only if there is a difference\n  let newArr = null;\n  for (let i = 0, len = arr.length; i < len; i++) {\n    const newExpr = arr[i].substituteConstants();\n    if (arr[i] !== newExpr) {\n      // something has changed!\n      // allocate array on first difference\n      if (newArr === null) {\n        newArr = [];\n        for (let j = 0; j < i; j++) {\n          newArr[j] = arr[j];\n        }\n      }\n    }\n    if (newArr !== null) {\n      newArr[i] = newExpr;\n    }\n  }\n  if (newArr === null) {\n    return arr;\n  }\n  return newArr;\n}\nexport class ContextKeyAndExpr {\n  static create(_expr, negated, extraRedundantCheck) {\n    return ContextKeyAndExpr._normalizeArr(_expr, negated, extraRedundantCheck);\n  }\n  constructor(expr, negated) {\n    this.expr = expr;\n    this.negated = negated;\n    this.type = 6 /* ContextKeyExprType.And */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    if (this.expr.length < other.expr.length) {\n      return -1;\n    }\n    if (this.expr.length > other.expr.length) {\n      return 1;\n    }\n    for (let i = 0, len = this.expr.length; i < len; i++) {\n      const r = cmp(this.expr[i], other.expr[i]);\n      if (r !== 0) {\n        return r;\n      }\n    }\n    return 0;\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      if (this.expr.length !== other.expr.length) {\n        return false;\n      }\n      for (let i = 0, len = this.expr.length; i < len; i++) {\n        if (!this.expr[i].equals(other.expr[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const exprArr = eliminateConstantsInArray(this.expr);\n    if (exprArr === this.expr) {\n      // no change\n      return this;\n    }\n    return ContextKeyAndExpr.create(exprArr, this.negated, false);\n  }\n  evaluate(context) {\n    for (let i = 0, len = this.expr.length; i < len; i++) {\n      if (!this.expr[i].evaluate(context)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  static _normalizeArr(arr, negated, extraRedundantCheck) {\n    const expr = [];\n    let hasTrue = false;\n    for (const e of arr) {\n      if (!e) {\n        continue;\n      }\n      if (e.type === 1 /* ContextKeyExprType.True */) {\n        // anything && true ==> anything\n        hasTrue = true;\n        continue;\n      }\n      if (e.type === 0 /* ContextKeyExprType.False */) {\n        // anything && false ==> false\n        return ContextKeyFalseExpr.INSTANCE;\n      }\n      if (e.type === 6 /* ContextKeyExprType.And */) {\n        expr.push(...e.expr);\n        continue;\n      }\n      expr.push(e);\n    }\n    if (expr.length === 0 && hasTrue) {\n      return ContextKeyTrueExpr.INSTANCE;\n    }\n    if (expr.length === 0) {\n      return undefined;\n    }\n    if (expr.length === 1) {\n      return expr[0];\n    }\n    expr.sort(cmp);\n    // eliminate duplicate terms\n    for (let i = 1; i < expr.length; i++) {\n      if (expr[i - 1].equals(expr[i])) {\n        expr.splice(i, 1);\n        i--;\n      }\n    }\n    if (expr.length === 1) {\n      return expr[0];\n    }\n    // We must distribute any OR expression because we don't support parens\n    // OR extensions will be at the end (due to sorting rules)\n    while (expr.length > 1) {\n      const lastElement = expr[expr.length - 1];\n      if (lastElement.type !== 9 /* ContextKeyExprType.Or */) {\n        break;\n      }\n      // pop the last element\n      expr.pop();\n      // pop the second to last element\n      const secondToLastElement = expr.pop();\n      const isFinished = expr.length === 0;\n      // distribute `lastElement` over `secondToLastElement`\n      const resultElement = ContextKeyOrExpr.create(lastElement.expr.map(el => ContextKeyAndExpr.create([el, secondToLastElement], null, extraRedundantCheck)), null, isFinished);\n      if (resultElement) {\n        expr.push(resultElement);\n        expr.sort(cmp);\n      }\n    }\n    if (expr.length === 1) {\n      return expr[0];\n    }\n    // resolve false AND expressions\n    if (extraRedundantCheck) {\n      for (let i = 0; i < expr.length; i++) {\n        for (let j = i + 1; j < expr.length; j++) {\n          if (expr[i].negate().equals(expr[j])) {\n            // A && !A case\n            return ContextKeyFalseExpr.INSTANCE;\n          }\n        }\n      }\n      if (expr.length === 1) {\n        return expr[0];\n      }\n    }\n    return new ContextKeyAndExpr(expr, negated);\n  }\n  serialize() {\n    return this.expr.map(e => e.serialize()).join(' && ');\n  }\n  keys() {\n    const result = [];\n    for (const expr of this.expr) {\n      result.push(...expr.keys());\n    }\n    return result;\n  }\n  negate() {\n    if (!this.negated) {\n      const result = [];\n      for (const expr of this.expr) {\n        result.push(expr.negate());\n      }\n      this.negated = ContextKeyOrExpr.create(result, this, true);\n    }\n    return this.negated;\n  }\n}\nexport class ContextKeyOrExpr {\n  static create(_expr, negated, extraRedundantCheck) {\n    return ContextKeyOrExpr._normalizeArr(_expr, negated, extraRedundantCheck);\n  }\n  constructor(expr, negated) {\n    this.expr = expr;\n    this.negated = negated;\n    this.type = 9 /* ContextKeyExprType.Or */;\n  }\n  cmp(other) {\n    if (other.type !== this.type) {\n      return this.type - other.type;\n    }\n    if (this.expr.length < other.expr.length) {\n      return -1;\n    }\n    if (this.expr.length > other.expr.length) {\n      return 1;\n    }\n    for (let i = 0, len = this.expr.length; i < len; i++) {\n      const r = cmp(this.expr[i], other.expr[i]);\n      if (r !== 0) {\n        return r;\n      }\n    }\n    return 0;\n  }\n  equals(other) {\n    if (other.type === this.type) {\n      if (this.expr.length !== other.expr.length) {\n        return false;\n      }\n      for (let i = 0, len = this.expr.length; i < len; i++) {\n        if (!this.expr[i].equals(other.expr[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  substituteConstants() {\n    const exprArr = eliminateConstantsInArray(this.expr);\n    if (exprArr === this.expr) {\n      // no change\n      return this;\n    }\n    return ContextKeyOrExpr.create(exprArr, this.negated, false);\n  }\n  evaluate(context) {\n    for (let i = 0, len = this.expr.length; i < len; i++) {\n      if (this.expr[i].evaluate(context)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static _normalizeArr(arr, negated, extraRedundantCheck) {\n    let expr = [];\n    let hasFalse = false;\n    if (arr) {\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const e = arr[i];\n        if (!e) {\n          continue;\n        }\n        if (e.type === 0 /* ContextKeyExprType.False */) {\n          // anything || false ==> anything\n          hasFalse = true;\n          continue;\n        }\n        if (e.type === 1 /* ContextKeyExprType.True */) {\n          // anything || true ==> true\n          return ContextKeyTrueExpr.INSTANCE;\n        }\n        if (e.type === 9 /* ContextKeyExprType.Or */) {\n          expr = expr.concat(e.expr);\n          continue;\n        }\n        expr.push(e);\n      }\n      if (expr.length === 0 && hasFalse) {\n        return ContextKeyFalseExpr.INSTANCE;\n      }\n      expr.sort(cmp);\n    }\n    if (expr.length === 0) {\n      return undefined;\n    }\n    if (expr.length === 1) {\n      return expr[0];\n    }\n    // eliminate duplicate terms\n    for (let i = 1; i < expr.length; i++) {\n      if (expr[i - 1].equals(expr[i])) {\n        expr.splice(i, 1);\n        i--;\n      }\n    }\n    if (expr.length === 1) {\n      return expr[0];\n    }\n    // resolve true OR expressions\n    if (extraRedundantCheck) {\n      for (let i = 0; i < expr.length; i++) {\n        for (let j = i + 1; j < expr.length; j++) {\n          if (expr[i].negate().equals(expr[j])) {\n            // A || !A case\n            return ContextKeyTrueExpr.INSTANCE;\n          }\n        }\n      }\n      if (expr.length === 1) {\n        return expr[0];\n      }\n    }\n    return new ContextKeyOrExpr(expr, negated);\n  }\n  serialize() {\n    return this.expr.map(e => e.serialize()).join(' || ');\n  }\n  keys() {\n    const result = [];\n    for (const expr of this.expr) {\n      result.push(...expr.keys());\n    }\n    return result;\n  }\n  negate() {\n    if (!this.negated) {\n      const result = [];\n      for (const expr of this.expr) {\n        result.push(expr.negate());\n      }\n      // We don't support parens, so here we distribute the AND over the OR terminals\n      // We always take the first 2 AND pairs and distribute them\n      while (result.length > 1) {\n        const LEFT = result.shift();\n        const RIGHT = result.shift();\n        const all = [];\n        for (const left of getTerminals(LEFT)) {\n          for (const right of getTerminals(RIGHT)) {\n            all.push(ContextKeyAndExpr.create([left, right], null, false));\n          }\n        }\n        result.unshift(ContextKeyOrExpr.create(all, null, false));\n      }\n      this.negated = ContextKeyOrExpr.create(result, this, true);\n    }\n    return this.negated;\n  }\n}\nexport let RawContextKey = /*#__PURE__*/(() => {\n  class RawContextKey extends ContextKeyDefinedExpr {\n    static #_ = this._info = [];\n    static all() {\n      return RawContextKey._info.values();\n    }\n    constructor(key, defaultValue, metaOrHide) {\n      super(key, null);\n      this._defaultValue = defaultValue;\n      // collect all context keys into a central place\n      if (typeof metaOrHide === 'object') {\n        RawContextKey._info.push({\n          ...metaOrHide,\n          key\n        });\n      } else if (metaOrHide !== true) {\n        RawContextKey._info.push({\n          key,\n          description: metaOrHide,\n          type: defaultValue !== null && defaultValue !== undefined ? typeof defaultValue : undefined\n        });\n      }\n    }\n    bindTo(target) {\n      return target.createKey(this.key, this._defaultValue);\n    }\n    getValue(target) {\n      return target.getContextKeyValue(this.key);\n    }\n    toNegated() {\n      return this.negate();\n    }\n    isEqualTo(value) {\n      return ContextKeyEqualsExpr.create(this.key, value);\n    }\n  }\n  return RawContextKey;\n})();\nexport const IContextKeyService = createDecorator('contextKeyService');\nfunction cmp1(key1, key2) {\n  if (key1 < key2) {\n    return -1;\n  }\n  if (key1 > key2) {\n    return 1;\n  }\n  return 0;\n}\nfunction cmp2(key1, value1, key2, value2) {\n  if (key1 < key2) {\n    return -1;\n  }\n  if (key1 > key2) {\n    return 1;\n  }\n  if (value1 < value2) {\n    return -1;\n  }\n  if (value1 > value2) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Returns true if it is provable `p` implies `q`.\n */\nexport function implies(p, q) {\n  if (p.type === 0 /* ContextKeyExprType.False */ || q.type === 1 /* ContextKeyExprType.True */) {\n    // false implies anything\n    // anything implies true\n    return true;\n  }\n  if (p.type === 9 /* ContextKeyExprType.Or */) {\n    if (q.type === 9 /* ContextKeyExprType.Or */) {\n      // `a || b || c` can only imply something like `a || b || c || d`\n      return allElementsIncluded(p.expr, q.expr);\n    }\n    return false;\n  }\n  if (q.type === 9 /* ContextKeyExprType.Or */) {\n    for (const element of q.expr) {\n      if (implies(p, element)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  if (p.type === 6 /* ContextKeyExprType.And */) {\n    if (q.type === 6 /* ContextKeyExprType.And */) {\n      // `a && b && c` implies `a && c`\n      return allElementsIncluded(q.expr, p.expr);\n    }\n    for (const element of p.expr) {\n      if (implies(element, q)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return p.equals(q);\n}\n/**\n * Returns true if all elements in `p` are also present in `q`.\n * The two arrays are assumed to be sorted\n */\nfunction allElementsIncluded(p, q) {\n  let pIndex = 0;\n  let qIndex = 0;\n  while (pIndex < p.length && qIndex < q.length) {\n    const cmp = p[pIndex].cmp(q[qIndex]);\n    if (cmp < 0) {\n      // an element from `p` is missing from `q`\n      return false;\n    } else if (cmp === 0) {\n      pIndex++;\n      qIndex++;\n    } else {\n      qIndex++;\n    }\n  }\n  return pIndex === p.length;\n}\nfunction getTerminals(node) {\n  if (node.type === 9 /* ContextKeyExprType.Or */) {\n    return node.expr;\n  }\n  return [node];\n}","map":{"version":3,"names":["isChrome","isEdge","isFirefox","isLinux","isMacintosh","isSafari","isWeb","isWindows","isFalsyOrWhitespace","Scanner","createDecorator","localize","CONSTANT_VALUES","Map","set","hasOwnProperty","Object","prototype","defaultConfig","regexParsingWithErrorRecovery","errorEmptyString","hintEmptyString","errorNoInAfterNot","errorClosingParenthesis","errorUnexpectedToken","hintUnexpectedToken","errorUnexpectedEOF","hintUnexpectedEOF","Parser","_","_parseError","Error","constructor","_config","_scanner","_tokens","_current","_parsingErrors","_flagsGYRe","parse","input","push","message","offset","lexeme","additionalInfo","undefined","reset","scan","expr","_expr","_isAtEnd","peek","_peek","type","getLexeme","e","_or","_and","_matchOne","right","length","ContextKeyExpr","or","_term","and","_advance","ContextKeyFalseExpr","INSTANCE","ContextKeyTrueExpr","_consume","negate","ContextKeyNotExpr","create","_errExpectedButGot","_primary","true","false","key","regexLexeme","closingSlashIndex","lastIndexOf","flags","_removeFlagsGY","substring","regexp","RegExp","ContextKeyRegexExpr","lexemeReconstruction","followingToken","parenBalance","i","charCodeAt","join","regex","serializedValue","start","indexOf","end","value","slice","caseIgnoreFlag","_e","_value","notIn","maybeOp","_previous","equals","has","not","notEquals","ContextKeySmallerExpr","ContextKeySmallerEqualsExpr","ContextKeyGreaterExpr","ContextKeyGreaterEqualsExpr","in","token","replaceAll","_check","expected","got","ContextKeyDefinedExpr","ContextKeyEqualsExpr","ContextKeyNotEqualsExpr","ContextKeyInExpr","ContextKeyNotInExpr","ContextKeyAndExpr","ContextKeyOrExpr","_parser","deserialize","serialized","expressionsAreEqualWithConstantSubstitution","a","b","aExpr","substituteConstants","bExpr","cmp","other","evaluate","context","serialize","keys","negated","constantValue","get","cmp1","getValue","trueValue","cmp2","valueKey","source","item","Array","isArray","includes","call","_negated","falseValue","withFloatOrStr","callback","n","parseFloat","isNaN","thisSource","otherSource","test","ContextKeyNotRegexExpr","actual","_actual","eliminateConstantsInArray","arr","newArr","len","newExpr","j","extraRedundantCheck","_normalizeArr","r","exprArr","hasTrue","sort","splice","lastElement","pop","secondToLastElement","isFinished","resultElement","map","el","result","hasFalse","concat","LEFT","shift","RIGHT","all","left","getTerminals","unshift","RawContextKey","_info","values","defaultValue","metaOrHide","_defaultValue","description","bindTo","target","createKey","getContextKeyValue","toNegated","isEqualTo","IContextKeyService","key1","key2","value1","value2","implies","p","q","allElementsIncluded","element","pIndex","qIndex","node"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isChrome, isEdge, isFirefox, isLinux, isMacintosh, isSafari, isWeb, isWindows } from '../../../base/common/platform.js';\nimport { isFalsyOrWhitespace } from '../../../base/common/strings.js';\nimport { Scanner } from './scanner.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { localize } from '../../../nls.js';\nconst CONSTANT_VALUES = new Map();\nCONSTANT_VALUES.set('false', false);\nCONSTANT_VALUES.set('true', true);\nCONSTANT_VALUES.set('isMac', isMacintosh);\nCONSTANT_VALUES.set('isLinux', isLinux);\nCONSTANT_VALUES.set('isWindows', isWindows);\nCONSTANT_VALUES.set('isWeb', isWeb);\nCONSTANT_VALUES.set('isMacNative', isMacintosh && !isWeb);\nCONSTANT_VALUES.set('isEdge', isEdge);\nCONSTANT_VALUES.set('isFirefox', isFirefox);\nCONSTANT_VALUES.set('isChrome', isChrome);\nCONSTANT_VALUES.set('isSafari', isSafari);\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst defaultConfig = {\n    regexParsingWithErrorRecovery: true\n};\nconst errorEmptyString = localize('contextkey.parser.error.emptyString', \"Empty context key expression\");\nconst hintEmptyString = localize('contextkey.parser.error.emptyString.hint', \"Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively.\");\nconst errorNoInAfterNot = localize('contextkey.parser.error.noInAfterNot', \"'in' after 'not'.\");\nconst errorClosingParenthesis = localize('contextkey.parser.error.closingParenthesis', \"closing parenthesis ')'\");\nconst errorUnexpectedToken = localize('contextkey.parser.error.unexpectedToken', \"Unexpected token\");\nconst hintUnexpectedToken = localize('contextkey.parser.error.unexpectedToken.hint', \"Did you forget to put && or || before the token?\");\nconst errorUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF', \"Unexpected end of expression\");\nconst hintUnexpectedEOF = localize('contextkey.parser.error.unexpectedEOF.hint', \"Did you forget to put a context key?\");\n/**\n * A parser for context key expressions.\n *\n * Example:\n * ```ts\n * const parser = new Parser();\n * const expr = parser.parse('foo == \"bar\" && baz == true');\n *\n * if (expr === undefined) {\n * \t// there were lexing or parsing errors\n * \t// process lexing errors with `parser.lexingErrors`\n *  // process parsing errors with `parser.parsingErrors`\n * } else {\n * \t// expr is a valid expression\n * }\n * ```\n */\nexport class Parser {\n    // Note: this doesn't produce an exact syntax tree but a normalized one\n    // ContextKeyExpression's that we use as AST nodes do not expose constructors that do not normalize\n    static { this._parseError = new Error(); }\n    constructor(_config = defaultConfig) {\n        this._config = _config;\n        // lifetime note: `_scanner` lives as long as the parser does, i.e., is not reset between calls to `parse`\n        this._scanner = new Scanner();\n        // lifetime note: `_tokens`, `_current`, and `_parsingErrors` must be reset between calls to `parse`\n        this._tokens = [];\n        this._current = 0; // invariant: 0 <= this._current < this._tokens.length ; any incrementation of this value must first call `_isAtEnd`\n        this._parsingErrors = [];\n        this._flagsGYRe = /g|y/g;\n    }\n    /**\n     * Parse a context key expression.\n     *\n     * @param input the expression to parse\n     * @returns the parsed expression or `undefined` if there's an error - call `lexingErrors` and `parsingErrors` to see the errors\n     */\n    parse(input) {\n        if (input === '') {\n            this._parsingErrors.push({ message: errorEmptyString, offset: 0, lexeme: '', additionalInfo: hintEmptyString });\n            return undefined;\n        }\n        this._tokens = this._scanner.reset(input).scan();\n        // @ulugbekna: we do not stop parsing if there are lexing errors to be able to reconstruct regexes with unescaped slashes; TODO@ulugbekna: make this respect config option for recovery\n        this._current = 0;\n        this._parsingErrors = [];\n        try {\n            const expr = this._expr();\n            if (!this._isAtEnd()) {\n                const peek = this._peek();\n                const additionalInfo = peek.type === 17 /* TokenType.Str */ ? hintUnexpectedToken : undefined;\n                this._parsingErrors.push({ message: errorUnexpectedToken, offset: peek.offset, lexeme: Scanner.getLexeme(peek), additionalInfo });\n                throw Parser._parseError;\n            }\n            return expr;\n        }\n        catch (e) {\n            if (!(e === Parser._parseError)) {\n                throw e;\n            }\n            return undefined;\n        }\n    }\n    _expr() {\n        return this._or();\n    }\n    _or() {\n        const expr = [this._and()];\n        while (this._matchOne(16 /* TokenType.Or */)) {\n            const right = this._and();\n            expr.push(right);\n        }\n        return expr.length === 1 ? expr[0] : ContextKeyExpr.or(...expr);\n    }\n    _and() {\n        const expr = [this._term()];\n        while (this._matchOne(15 /* TokenType.And */)) {\n            const right = this._term();\n            expr.push(right);\n        }\n        return expr.length === 1 ? expr[0] : ContextKeyExpr.and(...expr);\n    }\n    _term() {\n        if (this._matchOne(2 /* TokenType.Neg */)) {\n            const peek = this._peek();\n            switch (peek.type) {\n                case 11 /* TokenType.True */:\n                    this._advance();\n                    return ContextKeyFalseExpr.INSTANCE;\n                case 12 /* TokenType.False */:\n                    this._advance();\n                    return ContextKeyTrueExpr.INSTANCE;\n                case 0 /* TokenType.LParen */: {\n                    this._advance();\n                    const expr = this._expr();\n                    this._consume(1 /* TokenType.RParen */, errorClosingParenthesis);\n                    return expr?.negate();\n                }\n                case 17 /* TokenType.Str */:\n                    this._advance();\n                    return ContextKeyNotExpr.create(peek.lexeme);\n                default:\n                    throw this._errExpectedButGot(`KEY | true | false | '(' expression ')'`, peek);\n            }\n        }\n        return this._primary();\n    }\n    _primary() {\n        const peek = this._peek();\n        switch (peek.type) {\n            case 11 /* TokenType.True */:\n                this._advance();\n                return ContextKeyExpr.true();\n            case 12 /* TokenType.False */:\n                this._advance();\n                return ContextKeyExpr.false();\n            case 0 /* TokenType.LParen */: {\n                this._advance();\n                const expr = this._expr();\n                this._consume(1 /* TokenType.RParen */, errorClosingParenthesis);\n                return expr;\n            }\n            case 17 /* TokenType.Str */: {\n                // KEY\n                const key = peek.lexeme;\n                this._advance();\n                // =~ regex\n                if (this._matchOne(9 /* TokenType.RegexOp */)) {\n                    // @ulugbekna: we need to reconstruct the regex from the tokens because some extensions use unescaped slashes in regexes\n                    const expr = this._peek();\n                    if (!this._config.regexParsingWithErrorRecovery) {\n                        this._advance();\n                        if (expr.type !== 10 /* TokenType.RegexStr */) {\n                            throw this._errExpectedButGot(`REGEX`, expr);\n                        }\n                        const regexLexeme = expr.lexeme;\n                        const closingSlashIndex = regexLexeme.lastIndexOf('/');\n                        const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));\n                        let regexp;\n                        try {\n                            regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);\n                        }\n                        catch (e) {\n                            throw this._errExpectedButGot(`REGEX`, expr);\n                        }\n                        return ContextKeyRegexExpr.create(key, regexp);\n                    }\n                    switch (expr.type) {\n                        case 10 /* TokenType.RegexStr */:\n                        case 19 /* TokenType.Error */: { // also handle an ErrorToken in case of smth such as /(/file)/\n                            const lexemeReconstruction = [expr.lexeme]; // /REGEX/ or /REGEX/FLAGS\n                            this._advance();\n                            let followingToken = this._peek();\n                            let parenBalance = 0;\n                            for (let i = 0; i < expr.lexeme.length; i++) {\n                                if (expr.lexeme.charCodeAt(i) === 40 /* CharCode.OpenParen */) {\n                                    parenBalance++;\n                                }\n                                else if (expr.lexeme.charCodeAt(i) === 41 /* CharCode.CloseParen */) {\n                                    parenBalance--;\n                                }\n                            }\n                            while (!this._isAtEnd() && followingToken.type !== 15 /* TokenType.And */ && followingToken.type !== 16 /* TokenType.Or */) {\n                                switch (followingToken.type) {\n                                    case 0 /* TokenType.LParen */:\n                                        parenBalance++;\n                                        break;\n                                    case 1 /* TokenType.RParen */:\n                                        parenBalance--;\n                                        break;\n                                    case 10 /* TokenType.RegexStr */:\n                                    case 18 /* TokenType.QuotedStr */:\n                                        for (let i = 0; i < followingToken.lexeme.length; i++) {\n                                            if (followingToken.lexeme.charCodeAt(i) === 40 /* CharCode.OpenParen */) {\n                                                parenBalance++;\n                                            }\n                                            else if (expr.lexeme.charCodeAt(i) === 41 /* CharCode.CloseParen */) {\n                                                parenBalance--;\n                                            }\n                                        }\n                                }\n                                if (parenBalance < 0) {\n                                    break;\n                                }\n                                lexemeReconstruction.push(Scanner.getLexeme(followingToken));\n                                this._advance();\n                                followingToken = this._peek();\n                            }\n                            const regexLexeme = lexemeReconstruction.join('');\n                            const closingSlashIndex = regexLexeme.lastIndexOf('/');\n                            const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));\n                            let regexp;\n                            try {\n                                regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);\n                            }\n                            catch (e) {\n                                throw this._errExpectedButGot(`REGEX`, expr);\n                            }\n                            return ContextKeyExpr.regex(key, regexp);\n                        }\n                        case 18 /* TokenType.QuotedStr */: {\n                            const serializedValue = expr.lexeme;\n                            this._advance();\n                            // replicate old regex parsing behavior\n                            let regex = null;\n                            if (!isFalsyOrWhitespace(serializedValue)) {\n                                const start = serializedValue.indexOf('/');\n                                const end = serializedValue.lastIndexOf('/');\n                                if (start !== end && start >= 0) {\n                                    const value = serializedValue.slice(start + 1, end);\n                                    const caseIgnoreFlag = serializedValue[end + 1] === 'i' ? 'i' : '';\n                                    try {\n                                        regex = new RegExp(value, caseIgnoreFlag);\n                                    }\n                                    catch (_e) {\n                                        throw this._errExpectedButGot(`REGEX`, expr);\n                                    }\n                                }\n                            }\n                            if (regex === null) {\n                                throw this._errExpectedButGot('REGEX', expr);\n                            }\n                            return ContextKeyRegexExpr.create(key, regex);\n                        }\n                        default:\n                            throw this._errExpectedButGot('REGEX', this._peek());\n                    }\n                }\n                // [ 'not' 'in' value ]\n                if (this._matchOne(14 /* TokenType.Not */)) {\n                    this._consume(13 /* TokenType.In */, errorNoInAfterNot);\n                    const right = this._value();\n                    return ContextKeyExpr.notIn(key, right);\n                }\n                // [ ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in') value ]\n                const maybeOp = this._peek().type;\n                switch (maybeOp) {\n                    case 3 /* TokenType.Eq */: {\n                        this._advance();\n                        const right = this._value();\n                        if (this._previous().type === 18 /* TokenType.QuotedStr */) { // to preserve old parser behavior: \"foo == 'true'\" is preserved as \"foo == 'true'\", but \"foo == true\" is optimized as \"foo\"\n                            return ContextKeyExpr.equals(key, right);\n                        }\n                        switch (right) {\n                            case 'true':\n                                return ContextKeyExpr.has(key);\n                            case 'false':\n                                return ContextKeyExpr.not(key);\n                            default:\n                                return ContextKeyExpr.equals(key, right);\n                        }\n                    }\n                    case 4 /* TokenType.NotEq */: {\n                        this._advance();\n                        const right = this._value();\n                        if (this._previous().type === 18 /* TokenType.QuotedStr */) { // same as above with \"foo != 'true'\"\n                            return ContextKeyExpr.notEquals(key, right);\n                        }\n                        switch (right) {\n                            case 'true':\n                                return ContextKeyExpr.not(key);\n                            case 'false':\n                                return ContextKeyExpr.has(key);\n                            default:\n                                return ContextKeyExpr.notEquals(key, right);\n                        }\n                    }\n                    // TODO: ContextKeyExpr.smaller(key, right) accepts only `number` as `right` AND during eval of this node, we just eval to `false` if `right` is not a number\n                    // consequently, package.json linter should _warn_ the user if they're passing undesired things to ops\n                    case 5 /* TokenType.Lt */:\n                        this._advance();\n                        return ContextKeySmallerExpr.create(key, this._value());\n                    case 6 /* TokenType.LtEq */:\n                        this._advance();\n                        return ContextKeySmallerEqualsExpr.create(key, this._value());\n                    case 7 /* TokenType.Gt */:\n                        this._advance();\n                        return ContextKeyGreaterExpr.create(key, this._value());\n                    case 8 /* TokenType.GtEq */:\n                        this._advance();\n                        return ContextKeyGreaterEqualsExpr.create(key, this._value());\n                    case 13 /* TokenType.In */:\n                        this._advance();\n                        return ContextKeyExpr.in(key, this._value());\n                    default:\n                        return ContextKeyExpr.has(key);\n                }\n            }\n            case 20 /* TokenType.EOF */:\n                this._parsingErrors.push({ message: errorUnexpectedEOF, offset: peek.offset, lexeme: '', additionalInfo: hintUnexpectedEOF });\n                throw Parser._parseError;\n            default:\n                throw this._errExpectedButGot(`true | false | KEY \\n\\t| KEY '=~' REGEX \\n\\t| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());\n        }\n    }\n    _value() {\n        const token = this._peek();\n        switch (token.type) {\n            case 17 /* TokenType.Str */:\n            case 18 /* TokenType.QuotedStr */:\n                this._advance();\n                return token.lexeme;\n            case 11 /* TokenType.True */:\n                this._advance();\n                return 'true';\n            case 12 /* TokenType.False */:\n                this._advance();\n                return 'false';\n            case 13 /* TokenType.In */: // we support `in` as a value, e.g., \"when\": \"languageId == in\" - exists in existing extensions\n                this._advance();\n                return 'in';\n            default:\n                // this allows \"when\": \"foo == \" which's used by existing extensions\n                // we do not call `_advance` on purpose - we don't want to eat unintended tokens\n                return '';\n        }\n    }\n    _removeFlagsGY(flags) {\n        return flags.replaceAll(this._flagsGYRe, '');\n    }\n    // careful: this can throw if current token is the initial one (ie index = 0)\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _matchOne(token) {\n        if (this._check(token)) {\n            this._advance();\n            return true;\n        }\n        return false;\n    }\n    _advance() {\n        if (!this._isAtEnd()) {\n            this._current++;\n        }\n        return this._previous();\n    }\n    _consume(type, message) {\n        if (this._check(type)) {\n            return this._advance();\n        }\n        throw this._errExpectedButGot(message, this._peek());\n    }\n    _errExpectedButGot(expected, got, additionalInfo) {\n        const message = localize('contextkey.parser.error.expectedButGot', \"Expected: {0}\\nReceived: '{1}'.\", expected, Scanner.getLexeme(got));\n        const offset = got.offset;\n        const lexeme = Scanner.getLexeme(got);\n        this._parsingErrors.push({ message, offset, lexeme, additionalInfo });\n        return Parser._parseError;\n    }\n    _check(type) {\n        return this._peek().type === type;\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _isAtEnd() {\n        return this._peek().type === 20 /* TokenType.EOF */;\n    }\n}\nexport class ContextKeyExpr {\n    static false() {\n        return ContextKeyFalseExpr.INSTANCE;\n    }\n    static true() {\n        return ContextKeyTrueExpr.INSTANCE;\n    }\n    static has(key) {\n        return ContextKeyDefinedExpr.create(key);\n    }\n    static equals(key, value) {\n        return ContextKeyEqualsExpr.create(key, value);\n    }\n    static notEquals(key, value) {\n        return ContextKeyNotEqualsExpr.create(key, value);\n    }\n    static regex(key, value) {\n        return ContextKeyRegexExpr.create(key, value);\n    }\n    static in(key, value) {\n        return ContextKeyInExpr.create(key, value);\n    }\n    static notIn(key, value) {\n        return ContextKeyNotInExpr.create(key, value);\n    }\n    static not(key) {\n        return ContextKeyNotExpr.create(key);\n    }\n    static and(...expr) {\n        return ContextKeyAndExpr.create(expr, null, true);\n    }\n    static or(...expr) {\n        return ContextKeyOrExpr.create(expr, null, true);\n    }\n    static { this._parser = new Parser({ regexParsingWithErrorRecovery: false }); }\n    static deserialize(serialized) {\n        if (serialized === undefined || serialized === null) { // an empty string needs to be handled by the parser to get a corresponding parsing error reported\n            return undefined;\n        }\n        const expr = this._parser.parse(serialized);\n        return expr;\n    }\n}\nexport function expressionsAreEqualWithConstantSubstitution(a, b) {\n    const aExpr = a ? a.substituteConstants() : undefined;\n    const bExpr = b ? b.substituteConstants() : undefined;\n    if (!aExpr && !bExpr) {\n        return true;\n    }\n    if (!aExpr || !bExpr) {\n        return false;\n    }\n    return aExpr.equals(bExpr);\n}\nfunction cmp(a, b) {\n    return a.cmp(b);\n}\nexport class ContextKeyFalseExpr {\n    static { this.INSTANCE = new ContextKeyFalseExpr(); }\n    constructor() {\n        this.type = 0 /* ContextKeyExprType.False */;\n    }\n    cmp(other) {\n        return this.type - other.type;\n    }\n    equals(other) {\n        return (other.type === this.type);\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        return false;\n    }\n    serialize() {\n        return 'false';\n    }\n    keys() {\n        return [];\n    }\n    negate() {\n        return ContextKeyTrueExpr.INSTANCE;\n    }\n}\nexport class ContextKeyTrueExpr {\n    static { this.INSTANCE = new ContextKeyTrueExpr(); }\n    constructor() {\n        this.type = 1 /* ContextKeyExprType.True */;\n    }\n    cmp(other) {\n        return this.type - other.type;\n    }\n    equals(other) {\n        return (other.type === this.type);\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        return true;\n    }\n    serialize() {\n        return 'true';\n    }\n    keys() {\n        return [];\n    }\n    negate() {\n        return ContextKeyFalseExpr.INSTANCE;\n    }\n}\nexport class ContextKeyDefinedExpr {\n    static create(key, negated = null) {\n        const constantValue = CONSTANT_VALUES.get(key);\n        if (typeof constantValue === 'boolean') {\n            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n        }\n        return new ContextKeyDefinedExpr(key, negated);\n    }\n    constructor(key, negated) {\n        this.key = key;\n        this.negated = negated;\n        this.type = 2 /* ContextKeyExprType.Defined */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp1(this.key, other.key);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key);\n        }\n        return false;\n    }\n    substituteConstants() {\n        const constantValue = CONSTANT_VALUES.get(this.key);\n        if (typeof constantValue === 'boolean') {\n            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n        }\n        return this;\n    }\n    evaluate(context) {\n        return (!!context.getValue(this.key));\n    }\n    serialize() {\n        return this.key;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyNotExpr.create(this.key, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyEqualsExpr {\n    static create(key, value, negated = null) {\n        if (typeof value === 'boolean') {\n            return (value ? ContextKeyDefinedExpr.create(key, negated) : ContextKeyNotExpr.create(key, negated));\n        }\n        const constantValue = CONSTANT_VALUES.get(key);\n        if (typeof constantValue === 'boolean') {\n            const trueValue = constantValue ? 'true' : 'false';\n            return (value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);\n        }\n        return new ContextKeyEqualsExpr(key, value, negated);\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 4 /* ContextKeyExprType.Equals */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        const constantValue = CONSTANT_VALUES.get(this.key);\n        if (typeof constantValue === 'boolean') {\n            const trueValue = constantValue ? 'true' : 'false';\n            return (this.value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);\n        }\n        return this;\n    }\n    evaluate(context) {\n        // Intentional ==\n        // eslint-disable-next-line eqeqeq\n        return (context.getValue(this.key) == this.value);\n    }\n    serialize() {\n        return `${this.key} == '${this.value}'`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyNotEqualsExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyInExpr {\n    static create(key, valueKey) {\n        return new ContextKeyInExpr(key, valueKey);\n    }\n    constructor(key, valueKey) {\n        this.key = key;\n        this.valueKey = valueKey;\n        this.type = 10 /* ContextKeyExprType.In */;\n        this.negated = null;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.valueKey, other.key, other.valueKey);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.valueKey === other.valueKey);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        const source = context.getValue(this.valueKey);\n        const item = context.getValue(this.key);\n        if (Array.isArray(source)) {\n            return source.includes(item);\n        }\n        if (typeof item === 'string' && typeof source === 'object' && source !== null) {\n            return hasOwnProperty.call(source, item);\n        }\n        return false;\n    }\n    serialize() {\n        return `${this.key} in '${this.valueKey}'`;\n    }\n    keys() {\n        return [this.key, this.valueKey];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyNotInExpr.create(this.key, this.valueKey);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyNotInExpr {\n    static create(key, valueKey) {\n        return new ContextKeyNotInExpr(key, valueKey);\n    }\n    constructor(key, valueKey) {\n        this.key = key;\n        this.valueKey = valueKey;\n        this.type = 11 /* ContextKeyExprType.NotIn */;\n        this._negated = ContextKeyInExpr.create(key, valueKey);\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return this._negated.cmp(other._negated);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return this._negated.equals(other._negated);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        return !this._negated.evaluate(context);\n    }\n    serialize() {\n        return `${this.key} not in '${this.valueKey}'`;\n    }\n    keys() {\n        return this._negated.keys();\n    }\n    negate() {\n        return this._negated;\n    }\n}\nexport class ContextKeyNotEqualsExpr {\n    static create(key, value, negated = null) {\n        if (typeof value === 'boolean') {\n            if (value) {\n                return ContextKeyNotExpr.create(key, negated);\n            }\n            return ContextKeyDefinedExpr.create(key, negated);\n        }\n        const constantValue = CONSTANT_VALUES.get(key);\n        if (typeof constantValue === 'boolean') {\n            const falseValue = constantValue ? 'true' : 'false';\n            return (value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n        }\n        return new ContextKeyNotEqualsExpr(key, value, negated);\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 5 /* ContextKeyExprType.NotEquals */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        const constantValue = CONSTANT_VALUES.get(this.key);\n        if (typeof constantValue === 'boolean') {\n            const falseValue = constantValue ? 'true' : 'false';\n            return (this.value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n        }\n        return this;\n    }\n    evaluate(context) {\n        // Intentional !=\n        // eslint-disable-next-line eqeqeq\n        return (context.getValue(this.key) != this.value);\n    }\n    serialize() {\n        return `${this.key} != '${this.value}'`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyEqualsExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyNotExpr {\n    static create(key, negated = null) {\n        const constantValue = CONSTANT_VALUES.get(key);\n        if (typeof constantValue === 'boolean') {\n            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n        }\n        return new ContextKeyNotExpr(key, negated);\n    }\n    constructor(key, negated) {\n        this.key = key;\n        this.negated = negated;\n        this.type = 3 /* ContextKeyExprType.Not */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp1(this.key, other.key);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key);\n        }\n        return false;\n    }\n    substituteConstants() {\n        const constantValue = CONSTANT_VALUES.get(this.key);\n        if (typeof constantValue === 'boolean') {\n            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n        }\n        return this;\n    }\n    evaluate(context) {\n        return (!context.getValue(this.key));\n    }\n    serialize() {\n        return `!${this.key}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyDefinedExpr.create(this.key, this);\n        }\n        return this.negated;\n    }\n}\nfunction withFloatOrStr(value, callback) {\n    if (typeof value === 'string') {\n        const n = parseFloat(value);\n        if (!isNaN(n)) {\n            value = n;\n        }\n    }\n    if (typeof value === 'string' || typeof value === 'number') {\n        return callback(value);\n    }\n    return ContextKeyFalseExpr.INSTANCE;\n}\nexport class ContextKeyGreaterExpr {\n    static create(key, _value, negated = null) {\n        return withFloatOrStr(_value, (value) => new ContextKeyGreaterExpr(key, value, negated));\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 12 /* ContextKeyExprType.Greater */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        if (typeof this.value === 'string') {\n            return false;\n        }\n        return (parseFloat(context.getValue(this.key)) > this.value);\n    }\n    serialize() {\n        return `${this.key} > ${this.value}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeySmallerEqualsExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyGreaterEqualsExpr {\n    static create(key, _value, negated = null) {\n        return withFloatOrStr(_value, (value) => new ContextKeyGreaterEqualsExpr(key, value, negated));\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 13 /* ContextKeyExprType.GreaterEquals */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        if (typeof this.value === 'string') {\n            return false;\n        }\n        return (parseFloat(context.getValue(this.key)) >= this.value);\n    }\n    serialize() {\n        return `${this.key} >= ${this.value}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeySmallerExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeySmallerExpr {\n    static create(key, _value, negated = null) {\n        return withFloatOrStr(_value, (value) => new ContextKeySmallerExpr(key, value, negated));\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 14 /* ContextKeyExprType.Smaller */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        if (typeof this.value === 'string') {\n            return false;\n        }\n        return (parseFloat(context.getValue(this.key)) < this.value);\n    }\n    serialize() {\n        return `${this.key} < ${this.value}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyGreaterEqualsExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeySmallerEqualsExpr {\n    static create(key, _value, negated = null) {\n        return withFloatOrStr(_value, (value) => new ContextKeySmallerEqualsExpr(key, value, negated));\n    }\n    constructor(key, value, negated) {\n        this.key = key;\n        this.value = value;\n        this.negated = negated;\n        this.type = 15 /* ContextKeyExprType.SmallerEquals */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return cmp2(this.key, this.value, other.key, other.value);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return (this.key === other.key && this.value === other.value);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        if (typeof this.value === 'string') {\n            return false;\n        }\n        return (parseFloat(context.getValue(this.key)) <= this.value);\n    }\n    serialize() {\n        return `${this.key} <= ${this.value}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyGreaterExpr.create(this.key, this.value, this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyRegexExpr {\n    static create(key, regexp) {\n        return new ContextKeyRegexExpr(key, regexp);\n    }\n    constructor(key, regexp) {\n        this.key = key;\n        this.regexp = regexp;\n        this.type = 7 /* ContextKeyExprType.Regex */;\n        this.negated = null;\n        //\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        if (this.key < other.key) {\n            return -1;\n        }\n        if (this.key > other.key) {\n            return 1;\n        }\n        const thisSource = this.regexp ? this.regexp.source : '';\n        const otherSource = other.regexp ? other.regexp.source : '';\n        if (thisSource < otherSource) {\n            return -1;\n        }\n        if (thisSource > otherSource) {\n            return 1;\n        }\n        return 0;\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            const thisSource = this.regexp ? this.regexp.source : '';\n            const otherSource = other.regexp ? other.regexp.source : '';\n            return (this.key === other.key && thisSource === otherSource);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        const value = context.getValue(this.key);\n        return this.regexp ? this.regexp.test(value) : false;\n    }\n    serialize() {\n        const value = this.regexp\n            ? `/${this.regexp.source}/${this.regexp.flags}`\n            : '/invalid/';\n        return `${this.key} =~ ${value}`;\n    }\n    keys() {\n        return [this.key];\n    }\n    negate() {\n        if (!this.negated) {\n            this.negated = ContextKeyNotRegexExpr.create(this);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyNotRegexExpr {\n    static create(actual) {\n        return new ContextKeyNotRegexExpr(actual);\n    }\n    constructor(_actual) {\n        this._actual = _actual;\n        this.type = 8 /* ContextKeyExprType.NotRegex */;\n        //\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        return this._actual.cmp(other._actual);\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            return this._actual.equals(other._actual);\n        }\n        return false;\n    }\n    substituteConstants() {\n        return this;\n    }\n    evaluate(context) {\n        return !this._actual.evaluate(context);\n    }\n    serialize() {\n        return `!(${this._actual.serialize()})`;\n    }\n    keys() {\n        return this._actual.keys();\n    }\n    negate() {\n        return this._actual;\n    }\n}\n/**\n * @returns the same instance if nothing changed.\n */\nfunction eliminateConstantsInArray(arr) {\n    // Allocate array only if there is a difference\n    let newArr = null;\n    for (let i = 0, len = arr.length; i < len; i++) {\n        const newExpr = arr[i].substituteConstants();\n        if (arr[i] !== newExpr) {\n            // something has changed!\n            // allocate array on first difference\n            if (newArr === null) {\n                newArr = [];\n                for (let j = 0; j < i; j++) {\n                    newArr[j] = arr[j];\n                }\n            }\n        }\n        if (newArr !== null) {\n            newArr[i] = newExpr;\n        }\n    }\n    if (newArr === null) {\n        return arr;\n    }\n    return newArr;\n}\nexport class ContextKeyAndExpr {\n    static create(_expr, negated, extraRedundantCheck) {\n        return ContextKeyAndExpr._normalizeArr(_expr, negated, extraRedundantCheck);\n    }\n    constructor(expr, negated) {\n        this.expr = expr;\n        this.negated = negated;\n        this.type = 6 /* ContextKeyExprType.And */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        if (this.expr.length < other.expr.length) {\n            return -1;\n        }\n        if (this.expr.length > other.expr.length) {\n            return 1;\n        }\n        for (let i = 0, len = this.expr.length; i < len; i++) {\n            const r = cmp(this.expr[i], other.expr[i]);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return 0;\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            if (this.expr.length !== other.expr.length) {\n                return false;\n            }\n            for (let i = 0, len = this.expr.length; i < len; i++) {\n                if (!this.expr[i].equals(other.expr[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    substituteConstants() {\n        const exprArr = eliminateConstantsInArray(this.expr);\n        if (exprArr === this.expr) {\n            // no change\n            return this;\n        }\n        return ContextKeyAndExpr.create(exprArr, this.negated, false);\n    }\n    evaluate(context) {\n        for (let i = 0, len = this.expr.length; i < len; i++) {\n            if (!this.expr[i].evaluate(context)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _normalizeArr(arr, negated, extraRedundantCheck) {\n        const expr = [];\n        let hasTrue = false;\n        for (const e of arr) {\n            if (!e) {\n                continue;\n            }\n            if (e.type === 1 /* ContextKeyExprType.True */) {\n                // anything && true ==> anything\n                hasTrue = true;\n                continue;\n            }\n            if (e.type === 0 /* ContextKeyExprType.False */) {\n                // anything && false ==> false\n                return ContextKeyFalseExpr.INSTANCE;\n            }\n            if (e.type === 6 /* ContextKeyExprType.And */) {\n                expr.push(...e.expr);\n                continue;\n            }\n            expr.push(e);\n        }\n        if (expr.length === 0 && hasTrue) {\n            return ContextKeyTrueExpr.INSTANCE;\n        }\n        if (expr.length === 0) {\n            return undefined;\n        }\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        expr.sort(cmp);\n        // eliminate duplicate terms\n        for (let i = 1; i < expr.length; i++) {\n            if (expr[i - 1].equals(expr[i])) {\n                expr.splice(i, 1);\n                i--;\n            }\n        }\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        // We must distribute any OR expression because we don't support parens\n        // OR extensions will be at the end (due to sorting rules)\n        while (expr.length > 1) {\n            const lastElement = expr[expr.length - 1];\n            if (lastElement.type !== 9 /* ContextKeyExprType.Or */) {\n                break;\n            }\n            // pop the last element\n            expr.pop();\n            // pop the second to last element\n            const secondToLastElement = expr.pop();\n            const isFinished = (expr.length === 0);\n            // distribute `lastElement` over `secondToLastElement`\n            const resultElement = ContextKeyOrExpr.create(lastElement.expr.map(el => ContextKeyAndExpr.create([el, secondToLastElement], null, extraRedundantCheck)), null, isFinished);\n            if (resultElement) {\n                expr.push(resultElement);\n                expr.sort(cmp);\n            }\n        }\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        // resolve false AND expressions\n        if (extraRedundantCheck) {\n            for (let i = 0; i < expr.length; i++) {\n                for (let j = i + 1; j < expr.length; j++) {\n                    if (expr[i].negate().equals(expr[j])) {\n                        // A && !A case\n                        return ContextKeyFalseExpr.INSTANCE;\n                    }\n                }\n            }\n            if (expr.length === 1) {\n                return expr[0];\n            }\n        }\n        return new ContextKeyAndExpr(expr, negated);\n    }\n    serialize() {\n        return this.expr.map(e => e.serialize()).join(' && ');\n    }\n    keys() {\n        const result = [];\n        for (const expr of this.expr) {\n            result.push(...expr.keys());\n        }\n        return result;\n    }\n    negate() {\n        if (!this.negated) {\n            const result = [];\n            for (const expr of this.expr) {\n                result.push(expr.negate());\n            }\n            this.negated = ContextKeyOrExpr.create(result, this, true);\n        }\n        return this.negated;\n    }\n}\nexport class ContextKeyOrExpr {\n    static create(_expr, negated, extraRedundantCheck) {\n        return ContextKeyOrExpr._normalizeArr(_expr, negated, extraRedundantCheck);\n    }\n    constructor(expr, negated) {\n        this.expr = expr;\n        this.negated = negated;\n        this.type = 9 /* ContextKeyExprType.Or */;\n    }\n    cmp(other) {\n        if (other.type !== this.type) {\n            return this.type - other.type;\n        }\n        if (this.expr.length < other.expr.length) {\n            return -1;\n        }\n        if (this.expr.length > other.expr.length) {\n            return 1;\n        }\n        for (let i = 0, len = this.expr.length; i < len; i++) {\n            const r = cmp(this.expr[i], other.expr[i]);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return 0;\n    }\n    equals(other) {\n        if (other.type === this.type) {\n            if (this.expr.length !== other.expr.length) {\n                return false;\n            }\n            for (let i = 0, len = this.expr.length; i < len; i++) {\n                if (!this.expr[i].equals(other.expr[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    substituteConstants() {\n        const exprArr = eliminateConstantsInArray(this.expr);\n        if (exprArr === this.expr) {\n            // no change\n            return this;\n        }\n        return ContextKeyOrExpr.create(exprArr, this.negated, false);\n    }\n    evaluate(context) {\n        for (let i = 0, len = this.expr.length; i < len; i++) {\n            if (this.expr[i].evaluate(context)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static _normalizeArr(arr, negated, extraRedundantCheck) {\n        let expr = [];\n        let hasFalse = false;\n        if (arr) {\n            for (let i = 0, len = arr.length; i < len; i++) {\n                const e = arr[i];\n                if (!e) {\n                    continue;\n                }\n                if (e.type === 0 /* ContextKeyExprType.False */) {\n                    // anything || false ==> anything\n                    hasFalse = true;\n                    continue;\n                }\n                if (e.type === 1 /* ContextKeyExprType.True */) {\n                    // anything || true ==> true\n                    return ContextKeyTrueExpr.INSTANCE;\n                }\n                if (e.type === 9 /* ContextKeyExprType.Or */) {\n                    expr = expr.concat(e.expr);\n                    continue;\n                }\n                expr.push(e);\n            }\n            if (expr.length === 0 && hasFalse) {\n                return ContextKeyFalseExpr.INSTANCE;\n            }\n            expr.sort(cmp);\n        }\n        if (expr.length === 0) {\n            return undefined;\n        }\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        // eliminate duplicate terms\n        for (let i = 1; i < expr.length; i++) {\n            if (expr[i - 1].equals(expr[i])) {\n                expr.splice(i, 1);\n                i--;\n            }\n        }\n        if (expr.length === 1) {\n            return expr[0];\n        }\n        // resolve true OR expressions\n        if (extraRedundantCheck) {\n            for (let i = 0; i < expr.length; i++) {\n                for (let j = i + 1; j < expr.length; j++) {\n                    if (expr[i].negate().equals(expr[j])) {\n                        // A || !A case\n                        return ContextKeyTrueExpr.INSTANCE;\n                    }\n                }\n            }\n            if (expr.length === 1) {\n                return expr[0];\n            }\n        }\n        return new ContextKeyOrExpr(expr, negated);\n    }\n    serialize() {\n        return this.expr.map(e => e.serialize()).join(' || ');\n    }\n    keys() {\n        const result = [];\n        for (const expr of this.expr) {\n            result.push(...expr.keys());\n        }\n        return result;\n    }\n    negate() {\n        if (!this.negated) {\n            const result = [];\n            for (const expr of this.expr) {\n                result.push(expr.negate());\n            }\n            // We don't support parens, so here we distribute the AND over the OR terminals\n            // We always take the first 2 AND pairs and distribute them\n            while (result.length > 1) {\n                const LEFT = result.shift();\n                const RIGHT = result.shift();\n                const all = [];\n                for (const left of getTerminals(LEFT)) {\n                    for (const right of getTerminals(RIGHT)) {\n                        all.push(ContextKeyAndExpr.create([left, right], null, false));\n                    }\n                }\n                result.unshift(ContextKeyOrExpr.create(all, null, false));\n            }\n            this.negated = ContextKeyOrExpr.create(result, this, true);\n        }\n        return this.negated;\n    }\n}\nexport class RawContextKey extends ContextKeyDefinedExpr {\n    static { this._info = []; }\n    static all() {\n        return RawContextKey._info.values();\n    }\n    constructor(key, defaultValue, metaOrHide) {\n        super(key, null);\n        this._defaultValue = defaultValue;\n        // collect all context keys into a central place\n        if (typeof metaOrHide === 'object') {\n            RawContextKey._info.push({ ...metaOrHide, key });\n        }\n        else if (metaOrHide !== true) {\n            RawContextKey._info.push({ key, description: metaOrHide, type: defaultValue !== null && defaultValue !== undefined ? typeof defaultValue : undefined });\n        }\n    }\n    bindTo(target) {\n        return target.createKey(this.key, this._defaultValue);\n    }\n    getValue(target) {\n        return target.getContextKeyValue(this.key);\n    }\n    toNegated() {\n        return this.negate();\n    }\n    isEqualTo(value) {\n        return ContextKeyEqualsExpr.create(this.key, value);\n    }\n}\nexport const IContextKeyService = createDecorator('contextKeyService');\nfunction cmp1(key1, key2) {\n    if (key1 < key2) {\n        return -1;\n    }\n    if (key1 > key2) {\n        return 1;\n    }\n    return 0;\n}\nfunction cmp2(key1, value1, key2, value2) {\n    if (key1 < key2) {\n        return -1;\n    }\n    if (key1 > key2) {\n        return 1;\n    }\n    if (value1 < value2) {\n        return -1;\n    }\n    if (value1 > value2) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * Returns true if it is provable `p` implies `q`.\n */\nexport function implies(p, q) {\n    if (p.type === 0 /* ContextKeyExprType.False */ || q.type === 1 /* ContextKeyExprType.True */) {\n        // false implies anything\n        // anything implies true\n        return true;\n    }\n    if (p.type === 9 /* ContextKeyExprType.Or */) {\n        if (q.type === 9 /* ContextKeyExprType.Or */) {\n            // `a || b || c` can only imply something like `a || b || c || d`\n            return allElementsIncluded(p.expr, q.expr);\n        }\n        return false;\n    }\n    if (q.type === 9 /* ContextKeyExprType.Or */) {\n        for (const element of q.expr) {\n            if (implies(p, element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (p.type === 6 /* ContextKeyExprType.And */) {\n        if (q.type === 6 /* ContextKeyExprType.And */) {\n            // `a && b && c` implies `a && c`\n            return allElementsIncluded(q.expr, p.expr);\n        }\n        for (const element of p.expr) {\n            if (implies(element, q)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return p.equals(q);\n}\n/**\n * Returns true if all elements in `p` are also present in `q`.\n * The two arrays are assumed to be sorted\n */\nfunction allElementsIncluded(p, q) {\n    let pIndex = 0;\n    let qIndex = 0;\n    while (pIndex < p.length && qIndex < q.length) {\n        const cmp = p[pIndex].cmp(q[qIndex]);\n        if (cmp < 0) {\n            // an element from `p` is missing from `q`\n            return false;\n        }\n        else if (cmp === 0) {\n            pIndex++;\n            qIndex++;\n        }\n        else {\n            qIndex++;\n        }\n    }\n    return (pIndex === p.length);\n}\nfunction getTerminals(node) {\n    if (node.type === 9 /* ContextKeyExprType.Or */) {\n        return node.expr;\n    }\n    return [node];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}