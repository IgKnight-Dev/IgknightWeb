{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport './dnd.css';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { DragAndDropCommand } from './dragAndDropCommand.js';\nfunction hasTriggerModifier(e) {\n  if (isMacintosh) {\n    return e.altKey;\n  } else {\n    return e.ctrlKey;\n  }\n}\nexport class DragAndDropController extends Disposable {\n  static #_ = this.ID = 'editor.contrib.dragAndDrop';\n  static #_2 = this.TRIGGER_KEY_VALUE = isMacintosh ? 6 /* KeyCode.Alt */ : 5 /* KeyCode.Ctrl */;\n  constructor(editor) {\n    super();\n    this._editor = editor;\n    this._dndDecorationIds = this._editor.createDecorationsCollection();\n    this._register(this._editor.onMouseDown(e => this._onEditorMouseDown(e)));\n    this._register(this._editor.onMouseUp(e => this._onEditorMouseUp(e)));\n    this._register(this._editor.onMouseDrag(e => this._onEditorMouseDrag(e)));\n    this._register(this._editor.onMouseDrop(e => this._onEditorMouseDrop(e)));\n    this._register(this._editor.onMouseDropCanceled(() => this._onEditorMouseDropCanceled()));\n    this._register(this._editor.onKeyDown(e => this.onEditorKeyDown(e)));\n    this._register(this._editor.onKeyUp(e => this.onEditorKeyUp(e)));\n    this._register(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n    this._register(this._editor.onDidBlurEditorText(() => this.onEditorBlur()));\n    this._mouseDown = false;\n    this._modifierPressed = false;\n    this._dragSelection = null;\n  }\n  onEditorBlur() {\n    this._removeDecoration();\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n  }\n  onEditorKeyDown(e) {\n    if (!this._editor.getOption(35 /* EditorOption.dragAndDrop */) || this._editor.getOption(22 /* EditorOption.columnSelection */)) {\n      return;\n    }\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = true;\n    }\n    if (this._mouseDown && hasTriggerModifier(e)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    }\n  }\n  onEditorKeyUp(e) {\n    if (!this._editor.getOption(35 /* EditorOption.dragAndDrop */) || this._editor.getOption(22 /* EditorOption.columnSelection */)) {\n      return;\n    }\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = false;\n    }\n    if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n  }\n  _onEditorMouseDown(mouseEvent) {\n    this._mouseDown = true;\n  }\n  _onEditorMouseUp(mouseEvent) {\n    this._mouseDown = false;\n    // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n  }\n  _onEditorMouseDrag(mouseEvent) {\n    const target = mouseEvent.target;\n    if (this._dragSelection === null) {\n      const selections = this._editor.getSelections() || [];\n      const possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n      if (possibleSelections.length === 1) {\n        this._dragSelection = possibleSelections[0];\n      } else {\n        return;\n      }\n    }\n    if (hasTriggerModifier(mouseEvent.event)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    } else {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n    if (target.position) {\n      if (this._dragSelection.containsPosition(target.position)) {\n        this._removeDecoration();\n      } else {\n        this.showAt(target.position);\n      }\n    }\n  }\n  _onEditorMouseDropCanceled() {\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n    this._removeDecoration();\n    this._dragSelection = null;\n    this._mouseDown = false;\n  }\n  _onEditorMouseDrop(mouseEvent) {\n    if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n      const newCursorPosition = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n      if (this._dragSelection === null) {\n        let newSelections = null;\n        if (mouseEvent.event.shiftKey) {\n          const primarySelection = this._editor.getSelection();\n          if (primarySelection) {\n            const {\n              selectionStartLineNumber,\n              selectionStartColumn\n            } = primarySelection;\n            newSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n          }\n        } else {\n          newSelections = (this._editor.getSelections() || []).map(selection => {\n            if (selection.containsPosition(newCursorPosition)) {\n              return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n            } else {\n              return selection;\n            }\n          });\n        }\n        // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).\n        this._editor.setSelections(newSelections || [], 'mouse', 3 /* CursorChangeReason.Explicit */);\n      } else if (!this._dragSelection.containsPosition(newCursorPosition) || (hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)) // we allow users to paste content beside the selection\n      ) {\n        this._editor.pushUndoStop();\n        this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n        this._editor.pushUndoStop();\n      }\n    }\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n    this._removeDecoration();\n    this._dragSelection = null;\n    this._mouseDown = false;\n  }\n  static #_3 = this._DECORATION_OPTIONS = ModelDecorationOptions.register({\n    description: 'dnd-target',\n    className: 'dnd-target'\n  });\n  showAt(position) {\n    this._dndDecorationIds.set([{\n      range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n      options: DragAndDropController._DECORATION_OPTIONS\n    }]);\n    this._editor.revealPosition(position, 1 /* ScrollType.Immediate */);\n  }\n  _removeDecoration() {\n    this._dndDecorationIds.clear();\n  }\n  _hitContent(target) {\n    return target.type === 6 /* MouseTargetType.CONTENT_TEXT */ || target.type === 7 /* MouseTargetType.CONTENT_EMPTY */;\n  }\n  _hitMargin(target) {\n    return target.type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */ || target.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */ || target.type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */;\n  }\n  dispose() {\n    this._removeDecoration();\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n    super.dispose();\n  }\n}\nregisterEditorContribution(DragAndDropController.ID, DragAndDropController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);","map":{"version":3,"names":["Disposable","isMacintosh","registerEditorContribution","Position","Range","Selection","ModelDecorationOptions","DragAndDropCommand","hasTriggerModifier","e","altKey","ctrlKey","DragAndDropController","_","ID","_2","TRIGGER_KEY_VALUE","constructor","editor","_editor","_dndDecorationIds","createDecorationsCollection","_register","onMouseDown","_onEditorMouseDown","onMouseUp","_onEditorMouseUp","onMouseDrag","_onEditorMouseDrag","onMouseDrop","_onEditorMouseDrop","onMouseDropCanceled","_onEditorMouseDropCanceled","onKeyDown","onEditorKeyDown","onKeyUp","onEditorKeyUp","onDidBlurEditorWidget","onEditorBlur","onDidBlurEditorText","_mouseDown","_modifierPressed","_dragSelection","_removeDecoration","getOption","updateOptions","mouseStyle","keyCode","mouseEvent","target","selections","getSelections","possibleSelections","filter","selection","position","containsPosition","length","event","showAt","_hitContent","_hitMargin","newCursorPosition","lineNumber","column","newSelections","shiftKey","primarySelection","getSelection","selectionStartLineNumber","selectionStartColumn","map","setSelections","getEndPosition","equals","getStartPosition","pushUndoStop","executeCommand","_3","_DECORATION_OPTIONS","register","description","className","set","range","options","revealPosition","clear","type","dispose"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/dnd/browser/dnd.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport './dnd.css';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { DragAndDropCommand } from './dragAndDropCommand.js';\nfunction hasTriggerModifier(e) {\n    if (isMacintosh) {\n        return e.altKey;\n    }\n    else {\n        return e.ctrlKey;\n    }\n}\nexport class DragAndDropController extends Disposable {\n    static { this.ID = 'editor.contrib.dragAndDrop'; }\n    static { this.TRIGGER_KEY_VALUE = isMacintosh ? 6 /* KeyCode.Alt */ : 5 /* KeyCode.Ctrl */; }\n    constructor(editor) {\n        super();\n        this._editor = editor;\n        this._dndDecorationIds = this._editor.createDecorationsCollection();\n        this._register(this._editor.onMouseDown((e) => this._onEditorMouseDown(e)));\n        this._register(this._editor.onMouseUp((e) => this._onEditorMouseUp(e)));\n        this._register(this._editor.onMouseDrag((e) => this._onEditorMouseDrag(e)));\n        this._register(this._editor.onMouseDrop((e) => this._onEditorMouseDrop(e)));\n        this._register(this._editor.onMouseDropCanceled(() => this._onEditorMouseDropCanceled()));\n        this._register(this._editor.onKeyDown((e) => this.onEditorKeyDown(e)));\n        this._register(this._editor.onKeyUp((e) => this.onEditorKeyUp(e)));\n        this._register(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n        this._register(this._editor.onDidBlurEditorText(() => this.onEditorBlur()));\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        this._dragSelection = null;\n    }\n    onEditorBlur() {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n    }\n    onEditorKeyDown(e) {\n        if (!this._editor.getOption(35 /* EditorOption.dragAndDrop */) || this._editor.getOption(22 /* EditorOption.columnSelection */)) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = true;\n        }\n        if (this._mouseDown && hasTriggerModifier(e)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n    }\n    onEditorKeyUp(e) {\n        if (!this._editor.getOption(35 /* EditorOption.dragAndDrop */) || this._editor.getOption(22 /* EditorOption.columnSelection */)) {\n            return;\n        }\n        if (hasTriggerModifier(e)) {\n            this._modifierPressed = false;\n        }\n        if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n    }\n    _onEditorMouseDown(mouseEvent) {\n        this._mouseDown = true;\n    }\n    _onEditorMouseUp(mouseEvent) {\n        this._mouseDown = false;\n        // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n    }\n    _onEditorMouseDrag(mouseEvent) {\n        const target = mouseEvent.target;\n        if (this._dragSelection === null) {\n            const selections = this._editor.getSelections() || [];\n            const possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n            if (possibleSelections.length === 1) {\n                this._dragSelection = possibleSelections[0];\n            }\n            else {\n                return;\n            }\n        }\n        if (hasTriggerModifier(mouseEvent.event)) {\n            this._editor.updateOptions({\n                mouseStyle: 'copy'\n            });\n        }\n        else {\n            this._editor.updateOptions({\n                mouseStyle: 'default'\n            });\n        }\n        if (target.position) {\n            if (this._dragSelection.containsPosition(target.position)) {\n                this._removeDecoration();\n            }\n            else {\n                this.showAt(target.position);\n            }\n        }\n    }\n    _onEditorMouseDropCanceled() {\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n    }\n    _onEditorMouseDrop(mouseEvent) {\n        if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n            const newCursorPosition = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n            if (this._dragSelection === null) {\n                let newSelections = null;\n                if (mouseEvent.event.shiftKey) {\n                    const primarySelection = this._editor.getSelection();\n                    if (primarySelection) {\n                        const { selectionStartLineNumber, selectionStartColumn } = primarySelection;\n                        newSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n                    }\n                }\n                else {\n                    newSelections = (this._editor.getSelections() || []).map(selection => {\n                        if (selection.containsPosition(newCursorPosition)) {\n                            return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n                        }\n                        else {\n                            return selection;\n                        }\n                    });\n                }\n                // Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).\n                this._editor.setSelections(newSelections || [], 'mouse', 3 /* CursorChangeReason.Explicit */);\n            }\n            else if (!this._dragSelection.containsPosition(newCursorPosition) ||\n                ((hasTriggerModifier(mouseEvent.event) ||\n                    this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)) // we allow users to paste content beside the selection\n                )) {\n                this._editor.pushUndoStop();\n                this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n                this._editor.pushUndoStop();\n            }\n        }\n        this._editor.updateOptions({\n            mouseStyle: 'text'\n        });\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n    }\n    static { this._DECORATION_OPTIONS = ModelDecorationOptions.register({\n        description: 'dnd-target',\n        className: 'dnd-target'\n    }); }\n    showAt(position) {\n        this._dndDecorationIds.set([{\n                range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n                options: DragAndDropController._DECORATION_OPTIONS\n            }]);\n        this._editor.revealPosition(position, 1 /* ScrollType.Immediate */);\n    }\n    _removeDecoration() {\n        this._dndDecorationIds.clear();\n    }\n    _hitContent(target) {\n        return target.type === 6 /* MouseTargetType.CONTENT_TEXT */ ||\n            target.type === 7 /* MouseTargetType.CONTENT_EMPTY */;\n    }\n    _hitMargin(target) {\n        return target.type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */ ||\n            target.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */ ||\n            target.type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */;\n    }\n    dispose() {\n        this._removeDecoration();\n        this._dragSelection = null;\n        this._mouseDown = false;\n        this._modifierPressed = false;\n        super.dispose();\n    }\n}\nregisterEditorContribution(DragAndDropController.ID, DragAndDropController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}