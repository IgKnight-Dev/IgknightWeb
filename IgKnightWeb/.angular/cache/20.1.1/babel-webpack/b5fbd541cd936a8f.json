{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, switchMap, filter, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/token.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nexport let RefreshTokenInterceptor = /*#__PURE__*/(() => {\n  class RefreshTokenInterceptor {\n    tokenService;\n    http;\n    router;\n    isRefreshing = false;\n    refreshSubject = new BehaviorSubject(null);\n    constructor(tokenService, http, router) {\n      this.tokenService = tokenService;\n      this.http = http;\n      this.router = router;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        // Ignore refresh calls to avoid infinite loop\n        if (error.status === 401 && !req.url.includes('/login/auth/refresh-token')) {\n          return this.handle401Error(req, next);\n        }\n        return throwError(() => error);\n      }));\n    }\n    handle401Error(req, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshSubject.next(null);\n        const refreshToken = this.tokenService.getRefreshToken();\n        if (!refreshToken) {\n          this.tokenService.clearTokens();\n          this.router.navigate(['/auth/login']);\n          return throwError(() => new Error('No refresh token'));\n        }\n        return this.http.post('/api/login/auth/refresh-token', {\n          refreshToken\n        }).pipe(switchMap(response => {\n          this.isRefreshing = false;\n          this.tokenService.setTokens(response.accessToken, response.refreshToken);\n          this.refreshSubject.next(response.accessToken);\n          const clonedRequest = req.clone({\n            setHeaders: {\n              Authorization: `Bearer ${response.accessToken}`\n            }\n          });\n          return next.handle(clonedRequest);\n        }), catchError(err => {\n          this.isRefreshing = false;\n          this.tokenService.clearTokens();\n          this.router.navigate(['/auth/login']);\n          return throwError(() => err);\n        }));\n      } else {\n        return this.refreshSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n          const clonedRequest = req.clone({\n            setHeaders: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          return next.handle(clonedRequest);\n        }));\n      }\n    }\n    static ɵfac = function RefreshTokenInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RefreshTokenInterceptor)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RefreshTokenInterceptor,\n      factory: RefreshTokenInterceptor.ɵfac\n    });\n  }\n  return RefreshTokenInterceptor;\n})();","map":{"version":3,"names":["BehaviorSubject","throwError","catchError","switchMap","filter","take","RefreshTokenInterceptor","tokenService","http","router","isRefreshing","refreshSubject","constructor","intercept","req","next","handle","pipe","error","status","url","includes","handle401Error","refreshToken","getRefreshToken","clearTokens","navigate","Error","post","response","setTokens","accessToken","clonedRequest","clone","setHeaders","Authorization","err","token","i0","ɵɵinject","i1","TokenService","i2","HttpClient","i3","Router","factory","ɵfac"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\core\\interceptors\\refresh.interceptor.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpErrorResponse,\r\n  HttpClient,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  switchMap,\r\n  filter,\r\n  take,\r\n} from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { TokenService } from '../services/token.service';\r\n\r\n@Injectable()\r\nexport class RefreshTokenInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshSubject = new BehaviorSubject<string | null>(null);\r\n\r\n  constructor(\r\n    private tokenService: TokenService,\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        // Ignore refresh calls to avoid infinite loop\r\n        if (error.status === 401 && !req.url.includes('/login/auth/refresh-token')) {\r\n          return this.handle401Error(req, next);\r\n        }\r\n\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handle401Error(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshSubject.next(null);\r\n\r\n      const refreshToken = this.tokenService.getRefreshToken();\r\n      if (!refreshToken) {\r\n        this.tokenService.clearTokens();\r\n        this.router.navigate(['/auth/login']);\r\n        return throwError(() => new Error('No refresh token'));\r\n      }\r\n\r\n      return this.http.post<any>('/api/login/auth/refresh-token', { refreshToken }).pipe(\r\n        switchMap((response) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.setTokens(response.accessToken, response.refreshToken);\r\n          this.refreshSubject.next(response.accessToken);\r\n\r\n          const clonedRequest = req.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${response.accessToken}`,\r\n            },\r\n          });\r\n\r\n          return next.handle(clonedRequest);\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.clearTokens();\r\n          this.router.navigate(['/auth/login']);\r\n          return throwError(() => err);\r\n        })\r\n      );\r\n    } else {\r\n      return this.refreshSubject.pipe(\r\n        filter((token) => token != null),\r\n        take(1),\r\n        switchMap((token) => {\r\n          const clonedRequest = req.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n          return next.handle(clonedRequest);\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}