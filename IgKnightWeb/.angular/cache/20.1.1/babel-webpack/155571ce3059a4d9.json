{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar SelectionHighlighter_1;\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../../common/cursor/cursorMoveCommands.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CommonFindController } from '../../find/browser/findController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { getSelectionHighlightDecorationOptions } from '../../wordHighlighter/browser/highlightDecorations.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nfunction announceCursorChange(previousCursorState, cursorState) {\n  const cursorDiff = cursorState.filter(cs => !previousCursorState.find(pcs => pcs.equals(cs)));\n  if (cursorDiff.length >= 1) {\n    const cursorPositions = cursorDiff.map(cs => `line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(', ');\n    const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', \"Cursor added: {0}\", cursorPositions) : nls.localize('cursorsAdded', \"Cursors added: {0}\", cursorPositions);\n    status(msg);\n  }\n}\nexport class InsertCursorAbove extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAbove',\n      label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n      alias: 'Add Cursor Above',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n        linux: {\n          primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n          secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */]\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAbove',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Add Cursor Above\"),\n        order: 2\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    let useLogicalLine = true;\n    if (args && args.logicalLine === false) {\n      useLogicalLine = false;\n    }\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.model.pushStackElement();\n    const previousCursorState = viewModel.getCursorStates();\n    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.addCursorUp(viewModel, previousCursorState, useLogicalLine));\n    viewModel.revealTopMostCursor(args.source);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nexport class InsertCursorBelow extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorBelow',\n      label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n      alias: 'Add Cursor Below',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n        linux: {\n          primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n          secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */]\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorBelow',\n          comment: ['&& denotes a mnemonic']\n        }, \"A&&dd Cursor Below\"),\n        order: 3\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    let useLogicalLine = true;\n    if (args && args.logicalLine === false) {\n      useLogicalLine = false;\n    }\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.model.pushStackElement();\n    const previousCursorState = viewModel.getCursorStates();\n    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.addCursorDown(viewModel, previousCursorState, useLogicalLine));\n    viewModel.revealBottomMostCursor(args.source);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n      label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n      alias: 'Add Cursors to Line Ends',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 39 /* KeyCode.KeyI */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAtEndOfEachLineSelected',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add C&&ursors to Line Ends\"),\n        order: 4\n      }\n    });\n  }\n  getCursorsForSelection(selection, model, result) {\n    if (selection.isEmpty()) {\n      return;\n    }\n    for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n      const currentLineMaxColumn = model.getLineMaxColumn(i);\n      result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n    }\n    if (selection.endColumn > 1) {\n      result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n    }\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const viewModel = editor._getViewModel();\n    const previousCursorState = viewModel.getCursorStates();\n    const newSelections = [];\n    selections.forEach(sel => this.getCursorsForSelection(sel, model, newSelections));\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToBottom',\n      label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n      alias: 'Add Cursors To Bottom',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections();\n    const lineCount = editor.getModel().getLineCount();\n    const newSelections = [];\n    for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n    const viewModel = editor._getViewModel();\n    const previousCursorState = viewModel.getCursorStates();\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToTop',\n      label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n      alias: 'Add Cursors To Top',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections();\n    const newSelections = [];\n    for (let i = selections[0].startLineNumber; i >= 1; i--) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n    const viewModel = editor._getViewModel();\n    const previousCursorState = viewModel.getCursorStates();\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nexport class MultiCursorSessionResult {\n  constructor(selections, revealRange, revealScrollType) {\n    this.selections = selections;\n    this.revealRange = revealRange;\n    this.revealScrollType = revealScrollType;\n  }\n}\nexport class MultiCursorSession {\n  static create(editor, findController) {\n    if (!editor.hasModel()) {\n      return null;\n    }\n    const findState = findController.getState();\n    // Find widget owns entirely what we search for if:\n    //  - focus is not in the editor (i.e. it is in the find widget)\n    //  - and the search widget is visible\n    //  - and the search string is non-empty\n    if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n      // Find widget owns what is searched for\n      return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n    }\n    // Otherwise, the selection gives the search text, and the find widget gives the search settings\n    // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n    let isDisconnectedFromFindController = false;\n    let wholeWord;\n    let matchCase;\n    const selections = editor.getSelections();\n    if (selections.length === 1 && selections[0].isEmpty()) {\n      isDisconnectedFromFindController = true;\n      wholeWord = true;\n      matchCase = true;\n    } else {\n      wholeWord = findState.wholeWord;\n      matchCase = findState.matchCase;\n    }\n    // Selection owns what is searched for\n    const s = editor.getSelection();\n    let searchText;\n    let currentMatch = null;\n    if (s.isEmpty()) {\n      // selection is empty => expand to current word\n      const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\n      if (!word) {\n        return null;\n      }\n      searchText = word.word;\n      currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n    } else {\n      searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n    }\n    return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n  }\n  constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n    this._editor = _editor;\n    this.findController = findController;\n    this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n    this.searchText = searchText;\n    this.wholeWord = wholeWord;\n    this.matchCase = matchCase;\n    this.currentMatch = currentMatch;\n  }\n  addSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const nextMatch = this._getNextMatch();\n    if (!nextMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* ScrollType.Smooth */);\n  }\n  moveSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const nextMatch = this._getNextMatch();\n    if (!nextMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* ScrollType.Smooth */);\n  }\n  _getNextMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n    this.findController.highlightFindOptions();\n    const allSelections = this._editor.getSelections();\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n    const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false);\n    if (!nextMatch) {\n      return null;\n    }\n    return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n  }\n  addSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const previousMatch = this._getPreviousMatch();\n    if (!previousMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* ScrollType.Smooth */);\n  }\n  moveSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const previousMatch = this._getPreviousMatch();\n    if (!previousMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* ScrollType.Smooth */);\n  }\n  _getPreviousMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n    this.findController.highlightFindOptions();\n    const allSelections = this._editor.getSelections();\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n    const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false);\n    if (!previousMatch) {\n      return null;\n    }\n    return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n  }\n  selectAll(searchScope) {\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n    this.findController.highlightFindOptions();\n    const editorModel = this._editor.getModel();\n    if (searchScope) {\n      return editorModel.findMatches(this.searchText, searchScope, false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n    }\n    return editorModel.findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n  }\n}\nexport let MultiCursorSelectionController = /*#__PURE__*/(() => {\n  class MultiCursorSelectionController extends Disposable {\n    static #_ = this.ID = 'editor.contrib.multiCursorController';\n    static get(editor) {\n      return editor.getContribution(MultiCursorSelectionController.ID);\n    }\n    constructor(editor) {\n      super();\n      this._sessionDispose = this._register(new DisposableStore());\n      this._editor = editor;\n      this._ignoreSelectionChange = false;\n      this._session = null;\n    }\n    dispose() {\n      this._endSession();\n      super.dispose();\n    }\n    _beginSessionIfNeeded(findController) {\n      if (!this._session) {\n        // Create a new session\n        const session = MultiCursorSession.create(this._editor, findController);\n        if (!session) {\n          return;\n        }\n        this._session = session;\n        const newState = {\n          searchString: this._session.searchText\n        };\n        if (this._session.isDisconnectedFromFindController) {\n          newState.wholeWordOverride = 1 /* FindOptionOverride.True */;\n          newState.matchCaseOverride = 1 /* FindOptionOverride.True */;\n          newState.isRegexOverride = 2 /* FindOptionOverride.False */;\n        }\n        findController.getState().change(newState, false);\n        this._sessionDispose.add(this._editor.onDidChangeCursorSelection(e => {\n          if (this._ignoreSelectionChange) {\n            return;\n          }\n          this._endSession();\n        }));\n        this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\n          this._endSession();\n        }));\n        this._sessionDispose.add(findController.getState().onFindReplaceStateChange(e => {\n          if (e.matchCase || e.wholeWord) {\n            this._endSession();\n          }\n        }));\n      }\n    }\n    _endSession() {\n      this._sessionDispose.clear();\n      if (this._session && this._session.isDisconnectedFromFindController) {\n        const newState = {\n          wholeWordOverride: 0 /* FindOptionOverride.NotSet */,\n          matchCaseOverride: 0 /* FindOptionOverride.NotSet */,\n          isRegexOverride: 0 /* FindOptionOverride.NotSet */\n        };\n        this._session.findController.getState().change(newState, false);\n      }\n      this._session = null;\n    }\n    _setSelections(selections) {\n      this._ignoreSelectionChange = true;\n      this._editor.setSelections(selections);\n      this._ignoreSelectionChange = false;\n    }\n    _expandEmptyToWord(model, selection) {\n      if (!selection.isEmpty()) {\n        return selection;\n      }\n      const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\n      if (!word) {\n        return selection;\n      }\n      return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n    _applySessionResult(result) {\n      if (!result) {\n        return;\n      }\n      this._setSelections(result.selections);\n      if (result.revealRange) {\n        this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n      }\n    }\n    getSession(findController) {\n      return this._session;\n    }\n    addSelectionToNextFindMatch(findController) {\n      if (!this._editor.hasModel()) {\n        return;\n      }\n      if (!this._session) {\n        // If there are multiple cursors, handle the case where they do not all select the same text.\n        const allSelections = this._editor.getSelections();\n        if (allSelections.length > 1) {\n          const findState = findController.getState();\n          const matchCase = findState.matchCase;\n          const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n          if (!selectionsContainSameText) {\n            const model = this._editor.getModel();\n            const resultingSelections = [];\n            for (let i = 0, len = allSelections.length; i < len; i++) {\n              resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n            }\n            this._editor.setSelections(resultingSelections);\n            return;\n          }\n        }\n      }\n      this._beginSessionIfNeeded(findController);\n      if (this._session) {\n        this._applySessionResult(this._session.addSelectionToNextFindMatch());\n      }\n    }\n    addSelectionToPreviousFindMatch(findController) {\n      this._beginSessionIfNeeded(findController);\n      if (this._session) {\n        this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n      }\n    }\n    moveSelectionToNextFindMatch(findController) {\n      this._beginSessionIfNeeded(findController);\n      if (this._session) {\n        this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n      }\n    }\n    moveSelectionToPreviousFindMatch(findController) {\n      this._beginSessionIfNeeded(findController);\n      if (this._session) {\n        this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n      }\n    }\n    selectAll(findController) {\n      if (!this._editor.hasModel()) {\n        return;\n      }\n      let matches = null;\n      const findState = findController.getState();\n      // Special case: find widget owns entirely what we search for if:\n      // - focus is not in the editor (i.e. it is in the find widget)\n      // - and the search widget is visible\n      // - and the search string is non-empty\n      // - and we're searching for a regex\n      if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n        const editorModel = this._editor.getModel();\n        if (findState.searchScope) {\n          matches = editorModel.findMatches(findState.searchString, findState.searchScope, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        } else {\n          matches = editorModel.findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        }\n      } else {\n        this._beginSessionIfNeeded(findController);\n        if (!this._session) {\n          return;\n        }\n        matches = this._session.selectAll(findState.searchScope);\n      }\n      if (matches.length > 0) {\n        const editorSelection = this._editor.getSelection();\n        // Have the primary cursor remain the one where the action was invoked\n        for (let i = 0, len = matches.length; i < len; i++) {\n          const match = matches[i];\n          const intersection = match.range.intersectRanges(editorSelection);\n          if (intersection) {\n            // bingo!\n            matches[i] = matches[0];\n            matches[0] = match;\n            break;\n          }\n        }\n        this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n      }\n    }\n  }\n  return MultiCursorSelectionController;\n})();\nexport class MultiCursorSelectionControllerAction extends EditorAction {\n  run(accessor, editor) {\n    const multiCursorController = MultiCursorSelectionController.get(editor);\n    if (!multiCursorController) {\n      return;\n    }\n    const viewModel = editor._getViewModel();\n    if (viewModel) {\n      const previousCursorState = viewModel.getCursorStates();\n      const findController = CommonFindController.get(editor);\n      if (findController) {\n        this._run(multiCursorController, findController);\n      } else {\n        const newFindController = accessor.get(IInstantiationService).createInstance(CommonFindController, editor);\n        this._run(multiCursorController, newFindController);\n        newFindController.dispose();\n      }\n      announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n  }\n}\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToNextFindMatch',\n      label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n      alias: 'Add Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 34 /* KeyCode.KeyD */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToNextFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add &&Next Occurrence\"),\n        order: 5\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToNextFindMatch(findController);\n  }\n}\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToPreviousFindMatch',\n      label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n      alias: 'Add Selection To Previous Find Match',\n      precondition: undefined,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToPreviousFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add P&&revious Occurrence\"),\n        order: 6\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToPreviousFindMatch(findController);\n  }\n}\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToNextFindMatch',\n      label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n      alias: 'Move Last Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 34 /* KeyCode.KeyD */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToNextFindMatch(findController);\n  }\n}\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToPreviousFindMatch',\n      label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n      alias: 'Move Last Selection To Previous Find Match',\n      precondition: undefined\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToPreviousFindMatch(findController);\n  }\n}\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.selectHighlights',\n      label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n      alias: 'Select All Occurrences of Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miSelectHighlights',\n          comment: ['&& denotes a mnemonic']\n        }, \"Select All &&Occurrences\"),\n        order: 7\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n}\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.changeAll',\n      label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n      alias: 'Change All Occurrences',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 60 /* KeyCode.F2 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.2\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n}\nclass SelectionHighlighterState {\n  constructor(_model, _searchText, _matchCase, _wordSeparators, prevState) {\n    this._model = _model;\n    this._searchText = _searchText;\n    this._matchCase = _matchCase;\n    this._wordSeparators = _wordSeparators;\n    this._modelVersionId = this._model.getVersionId();\n    this._cachedFindMatches = null;\n    if (prevState && this._model === prevState._model && this._searchText === prevState._searchText && this._matchCase === prevState._matchCase && this._wordSeparators === prevState._wordSeparators && this._modelVersionId === prevState._modelVersionId) {\n      this._cachedFindMatches = prevState._cachedFindMatches;\n    }\n  }\n  findMatches() {\n    if (this._cachedFindMatches === null) {\n      this._cachedFindMatches = this._model.findMatches(this._searchText, true, false, this._matchCase, this._wordSeparators, false).map(m => m.range);\n      this._cachedFindMatches.sort(Range.compareRangesUsingStarts);\n    }\n    return this._cachedFindMatches;\n  }\n}\nlet SelectionHighlighter = /*#__PURE__*/(() => {\n  let SelectionHighlighter = class SelectionHighlighter extends Disposable {\n    static #_ = SelectionHighlighter_1 = this;\n    static #_2 = this.ID = 'editor.contrib.selectionHighlighter';\n    constructor(editor, _languageFeaturesService) {\n      super();\n      this._languageFeaturesService = _languageFeaturesService;\n      this.editor = editor;\n      this._isEnabled = editor.getOption(109 /* EditorOption.selectionHighlight */);\n      this._decorations = editor.createDecorationsCollection();\n      this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n      this.state = null;\n      this._register(editor.onDidChangeConfiguration(e => {\n        this._isEnabled = editor.getOption(109 /* EditorOption.selectionHighlight */);\n      }));\n      this._register(editor.onDidChangeCursorSelection(e => {\n        if (!this._isEnabled) {\n          // Early exit if nothing needs to be done!\n          // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n          return;\n        }\n        if (e.selection.isEmpty()) {\n          if (e.reason === 3 /* CursorChangeReason.Explicit */) {\n            if (this.state) {\n              // no longer valid\n              this._setState(null);\n            }\n            this.updateSoon.schedule();\n          } else {\n            this._setState(null);\n          }\n        } else {\n          this._update();\n        }\n      }));\n      this._register(editor.onDidChangeModel(e => {\n        this._setState(null);\n      }));\n      this._register(editor.onDidChangeModelContent(e => {\n        if (this._isEnabled) {\n          this.updateSoon.schedule();\n        }\n      }));\n      const findController = CommonFindController.get(editor);\n      if (findController) {\n        this._register(findController.getState().onFindReplaceStateChange(e => {\n          this._update();\n        }));\n      }\n      this.updateSoon.schedule();\n    }\n    _update() {\n      this._setState(SelectionHighlighter_1._createState(this.state, this._isEnabled, this.editor));\n    }\n    static _createState(oldState, isEnabled, editor) {\n      if (!isEnabled) {\n        return null;\n      }\n      if (!editor.hasModel()) {\n        return null;\n      }\n      const s = editor.getSelection();\n      if (s.startLineNumber !== s.endLineNumber) {\n        // multiline forbidden for perf reasons\n        return null;\n      }\n      const multiCursorController = MultiCursorSelectionController.get(editor);\n      if (!multiCursorController) {\n        return null;\n      }\n      const findController = CommonFindController.get(editor);\n      if (!findController) {\n        return null;\n      }\n      let r = multiCursorController.getSession(findController);\n      if (!r) {\n        const allSelections = editor.getSelections();\n        if (allSelections.length > 1) {\n          const findState = findController.getState();\n          const matchCase = findState.matchCase;\n          const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n          if (!selectionsContainSameText) {\n            return null;\n          }\n        }\n        r = MultiCursorSession.create(editor, findController);\n      }\n      if (!r) {\n        return null;\n      }\n      if (r.currentMatch) {\n        // This is an empty selection\n        // Do not interfere with semantic word highlighting in the no selection case\n        return null;\n      }\n      if (/^[ \\t]+$/.test(r.searchText)) {\n        // whitespace only selection\n        return null;\n      }\n      if (r.searchText.length > 200) {\n        // very long selection\n        return null;\n      }\n      // TODO: better handling of this case\n      const findState = findController.getState();\n      const caseSensitive = findState.matchCase;\n      // Return early if the find widget shows the exact same matches\n      if (findState.isRevealed) {\n        let findStateSearchString = findState.searchString;\n        if (!caseSensitive) {\n          findStateSearchString = findStateSearchString.toLowerCase();\n        }\n        let mySearchString = r.searchText;\n        if (!caseSensitive) {\n          mySearchString = mySearchString.toLowerCase();\n        }\n        if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n          return null;\n        }\n      }\n      return new SelectionHighlighterState(editor.getModel(), r.searchText, r.matchCase, r.wholeWord ? editor.getOption(132 /* EditorOption.wordSeparators */) : null, oldState);\n    }\n    _setState(newState) {\n      this.state = newState;\n      if (!this.state) {\n        this._decorations.clear();\n        return;\n      }\n      if (!this.editor.hasModel()) {\n        return;\n      }\n      const model = this.editor.getModel();\n      if (model.isTooLargeForTokenization()) {\n        // the file is too large, so searching word under cursor in the whole document would be blocking the UI.\n        return;\n      }\n      const allMatches = this.state.findMatches();\n      const selections = this.editor.getSelections();\n      selections.sort(Range.compareRangesUsingStarts);\n      // do not overlap with selection (issue #64 and #512)\n      const matches = [];\n      for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n        const match = allMatches[i];\n        if (j >= lenJ) {\n          // finished all editor selections\n          matches.push(match);\n          i++;\n        } else {\n          const cmp = Range.compareRangesUsingStarts(match, selections[j]);\n          if (cmp < 0) {\n            // match is before sel\n            if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n              matches.push(match);\n            }\n            i++;\n          } else if (cmp > 0) {\n            // sel is before match\n            j++;\n          } else {\n            // sel is equal to match\n            i++;\n            j++;\n          }\n        }\n      }\n      const occurrenceHighlighting = this.editor.getOption(81 /* EditorOption.occurrencesHighlight */) !== 'off';\n      const hasSemanticHighlights = this._languageFeaturesService.documentHighlightProvider.has(model) && occurrenceHighlighting;\n      const decorations = matches.map(r => {\n        return {\n          range: r,\n          options: getSelectionHighlightDecorationOptions(hasSemanticHighlights)\n        };\n      });\n      this._decorations.set(decorations);\n    }\n    dispose() {\n      this._setState(null);\n      super.dispose();\n    }\n  };\n  return SelectionHighlighter;\n})();\nSelectionHighlighter = SelectionHighlighter_1 = __decorate([__param(1, ILanguageFeaturesService)], SelectionHighlighter);\nexport { SelectionHighlighter };\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n  const selectedText = getValueInRange(model, ranges[0], !matchCase);\n  for (let i = 1, len = ranges.length; i < len; i++) {\n    const range = ranges[i];\n    if (range.isEmpty()) {\n      return false;\n    }\n    const thisSelectedText = getValueInRange(model, range, !matchCase);\n    if (selectedText !== thisSelectedText) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getValueInRange(model, range, toLowerCase) {\n  const text = model.getValueInRange(range);\n  return toLowerCase ? text.toLowerCase() : text;\n}\nexport class FocusNextCursor extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.focusNextCursor',\n      label: nls.localize('mutlicursor.focusNextCursor', \"Focus Next Cursor\"),\n      metadata: {\n        description: nls.localize('mutlicursor.focusNextCursor.description', \"Focuses the next cursor\"),\n        args: []\n      },\n      alias: 'Focus Next Cursor',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.model.pushStackElement();\n    const previousCursorState = Array.from(viewModel.getCursorStates());\n    const firstCursor = previousCursorState.shift();\n    if (!firstCursor) {\n      return;\n    }\n    previousCursorState.push(firstCursor);\n    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, previousCursorState);\n    viewModel.revealPrimaryCursor(args.source, true);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nexport class FocusPreviousCursor extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.focusPreviousCursor',\n      label: nls.localize('mutlicursor.focusPreviousCursor', \"Focus Previous Cursor\"),\n      metadata: {\n        description: nls.localize('mutlicursor.focusPreviousCursor.description', \"Focuses the previous cursor\"),\n        args: []\n      },\n      alias: 'Focus Previous Cursor',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.model.pushStackElement();\n    const previousCursorState = Array.from(viewModel.getCursorStates());\n    const firstCursor = previousCursorState.pop();\n    if (!firstCursor) {\n      return;\n    }\n    previousCursorState.unshift(firstCursor);\n    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, previousCursorState);\n    viewModel.revealPrimaryCursor(args.source, true);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n}\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController, 4 /* EditorContributionInstantiation.Lazy */);\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);\nregisterEditorAction(FocusNextCursor);\nregisterEditorAction(FocusPreviousCursor);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","SelectionHighlighter_1","status","RunOnceScheduler","KeyChord","Disposable","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","CursorMoveCommands","Range","Selection","EditorContextKeys","CommonFindController","nls","MenuId","ContextKeyExpr","ILanguageFeaturesService","getSelectionHighlightDecorationOptions","IInstantiationService","announceCursorChange","previousCursorState","cursorState","cursorDiff","filter","cs","find","pcs","equals","cursorPositions","map","viewState","position","lineNumber","column","join","msg","localize","InsertCursorAbove","constructor","id","label","alias","precondition","undefined","kbOpts","kbExpr","editorTextFocus","primary","linux","secondary","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","comment","order","run","accessor","editor","args","hasModel","useLogicalLine","logicalLine","viewModel","_getViewModel","cursorConfig","readOnly","model","pushStackElement","getCursorStates","setCursorStates","source","addCursorUp","revealTopMostCursor","InsertCursorBelow","addCursorDown","revealBottomMostCursor","InsertCursorAtEndOfEachLineSelected","getCursorsForSelection","selection","result","isEmpty","startLineNumber","endLineNumber","currentLineMaxColumn","getLineMaxColumn","push","endColumn","getModel","selections","getSelections","newSelections","forEach","sel","setSelections","InsertCursorAtEndOfLineSelected","lineCount","getLineCount","startColumn","InsertCursorAtTopOfLineSelected","MultiCursorSessionResult","revealRange","revealScrollType","MultiCursorSession","create","findController","findState","getState","hasTextFocus","isRevealed","searchString","wholeWord","matchCase","isDisconnectedFromFindController","s","getSelection","searchText","currentMatch","word","getConfiguredWordAtPosition","getStartPosition","getValueInRange","replace","_editor","addSelectionToNextFindMatch","nextMatch","_getNextMatch","allSelections","concat","moveSelectionToNextFindMatch","slice","highlightFindOptions","lastAddedSelection","findNextMatch","getEndPosition","getOption","range","addSelectionToPreviousFindMatch","previousMatch","_getPreviousMatch","moveSelectionToPreviousFindMatch","findPreviousMatch","selectAll","searchScope","editorModel","findMatches","MultiCursorSelectionController","_","ID","get","getContribution","_sessionDispose","_register","_ignoreSelectionChange","_session","dispose","_endSession","_beginSessionIfNeeded","session","newState","wholeWordOverride","matchCaseOverride","isRegexOverride","change","add","onDidChangeCursorSelection","e","onDidBlurEditorText","onFindReplaceStateChange","clear","_setSelections","_expandEmptyToWord","_applySessionResult","revealRangeInCenterIfOutsideViewport","getSession","selectionsContainSameText","modelRangesContainSameText","resultingSelections","len","matches","isRegex","editorSelection","match","intersection","intersectRanges","m","MultiCursorSelectionControllerAction","multiCursorController","_run","newFindController","createInstance","AddSelectionToNextFindMatchAction","focus","AddSelectionToPreviousFindMatchAction","MoveSelectionToNextFindMatchAction","MoveSelectionToPreviousFindMatchAction","SelectHighlightsAction","CompatChangeAll","and","writable","contextMenuOpts","SelectionHighlighterState","_model","_searchText","_matchCase","_wordSeparators","prevState","_modelVersionId","getVersionId","_cachedFindMatches","sort","compareRangesUsingStarts","SelectionHighlighter","_2","_languageFeaturesService","_isEnabled","_decorations","createDecorationsCollection","updateSoon","_update","state","onDidChangeConfiguration","reason","_setState","schedule","onDidChangeModel","onDidChangeModelContent","_createState","oldState","isEnabled","test","caseSensitive","findStateSearchString","toLowerCase","mySearchString","isTooLargeForTokenization","allMatches","j","lenJ","cmp","areIntersecting","occurrenceHighlighting","hasSemanticHighlights","documentHighlightProvider","has","decorations","options","set","ranges","selectedText","thisSelectedText","text","FocusNextCursor","metadata","description","Array","from","firstCursor","shift","revealPrimaryCursor","FocusPreviousCursor","pop","unshift"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/multicursor/browser/multicursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar SelectionHighlighter_1;\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../../common/cursor/cursorMoveCommands.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CommonFindController } from '../../find/browser/findController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { getSelectionHighlightDecorationOptions } from '../../wordHighlighter/browser/highlightDecorations.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nfunction announceCursorChange(previousCursorState, cursorState) {\n    const cursorDiff = cursorState.filter(cs => !previousCursorState.find(pcs => pcs.equals(cs)));\n    if (cursorDiff.length >= 1) {\n        const cursorPositions = cursorDiff.map(cs => `line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(', ');\n        const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', \"Cursor added: {0}\", cursorPositions) : nls.localize('cursorsAdded', \"Cursors added: {0}\", cursorPositions);\n        status(msg);\n    }\n}\nexport class InsertCursorAbove extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorAbove',\n            label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n            alias: 'Add Cursor Above',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                linux: {\n                    primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                    secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */]\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, \"&&Add Cursor Above\"),\n                order: 2\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let useLogicalLine = true;\n        if (args && args.logicalLine === false) {\n            useLogicalLine = false;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.model.pushStackElement();\n        const previousCursorState = viewModel.getCursorStates();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.addCursorUp(viewModel, previousCursorState, useLogicalLine));\n        viewModel.revealTopMostCursor(args.source);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nexport class InsertCursorBelow extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorBelow',\n            label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n            alias: 'Add Cursor Below',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                linux: {\n                    primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                    secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */]\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, \"A&&dd Cursor Below\"),\n                order: 3\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let useLogicalLine = true;\n        if (args && args.logicalLine === false) {\n            useLogicalLine = false;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.model.pushStackElement();\n        const previousCursorState = viewModel.getCursorStates();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.addCursorDown(viewModel, previousCursorState, useLogicalLine));\n        viewModel.revealBottomMostCursor(args.source);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n            alias: 'Add Cursors to Line Ends',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 39 /* KeyCode.KeyI */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, \"Add C&&ursors to Line Ends\"),\n                order: 4\n            }\n        });\n    }\n    getCursorsForSelection(selection, model, result) {\n        if (selection.isEmpty()) {\n            return;\n        }\n        for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n            const currentLineMaxColumn = model.getLineMaxColumn(i);\n            result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n        }\n        if (selection.endColumn > 1) {\n            result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n        }\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        const newSelections = [];\n        selections.forEach((sel) => this.getCursorsForSelection(sel, model, newSelections));\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.addCursorsToBottom',\n            label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n            alias: 'Add Cursors To Bottom',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections();\n        const lineCount = editor.getModel().getLineCount();\n        const newSelections = [];\n        for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.addCursorsToTop',\n            label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n            alias: 'Add Cursors To Top',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections();\n        const newSelections = [];\n        for (let i = selections[0].startLineNumber; i >= 1; i--) {\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nexport class MultiCursorSessionResult {\n    constructor(selections, revealRange, revealScrollType) {\n        this.selections = selections;\n        this.revealRange = revealRange;\n        this.revealScrollType = revealScrollType;\n    }\n}\nexport class MultiCursorSession {\n    static create(editor, findController) {\n        if (!editor.hasModel()) {\n            return null;\n        }\n        const findState = findController.getState();\n        // Find widget owns entirely what we search for if:\n        //  - focus is not in the editor (i.e. it is in the find widget)\n        //  - and the search widget is visible\n        //  - and the search string is non-empty\n        if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n            // Find widget owns what is searched for\n            return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n        }\n        // Otherwise, the selection gives the search text, and the find widget gives the search settings\n        // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n        let isDisconnectedFromFindController = false;\n        let wholeWord;\n        let matchCase;\n        const selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            isDisconnectedFromFindController = true;\n            wholeWord = true;\n            matchCase = true;\n        }\n        else {\n            wholeWord = findState.wholeWord;\n            matchCase = findState.matchCase;\n        }\n        // Selection owns what is searched for\n        const s = editor.getSelection();\n        let searchText;\n        let currentMatch = null;\n        if (s.isEmpty()) {\n            // selection is empty => expand to current word\n            const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\n            if (!word) {\n                return null;\n            }\n            searchText = word.word;\n            currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n        }\n        else {\n            searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n        }\n        return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n    }\n    constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n        this._editor = _editor;\n        this.findController = findController;\n        this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n        this.searchText = searchText;\n        this.wholeWord = wholeWord;\n        this.matchCase = matchCase;\n        this.currentMatch = currentMatch;\n    }\n    addSelectionToNextFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* ScrollType.Smooth */);\n    }\n    moveSelectionToNextFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* ScrollType.Smooth */);\n    }\n    _getNextMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            const result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        const allSelections = this._editor.getSelections();\n        const lastAddedSelection = allSelections[allSelections.length - 1];\n        const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false);\n        if (!nextMatch) {\n            return null;\n        }\n        return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n    }\n    addSelectionToPreviousFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* ScrollType.Smooth */);\n    }\n    moveSelectionToPreviousFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* ScrollType.Smooth */);\n    }\n    _getPreviousMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            const result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        const allSelections = this._editor.getSelections();\n        const lastAddedSelection = allSelections[allSelections.length - 1];\n        const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false);\n        if (!previousMatch) {\n            return null;\n        }\n        return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n    }\n    selectAll(searchScope) {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        this.findController.highlightFindOptions();\n        const editorModel = this._editor.getModel();\n        if (searchScope) {\n            return editorModel.findMatches(this.searchText, searchScope, false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        }\n        return editorModel.findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n    }\n}\nexport class MultiCursorSelectionController extends Disposable {\n    static { this.ID = 'editor.contrib.multiCursorController'; }\n    static get(editor) {\n        return editor.getContribution(MultiCursorSelectionController.ID);\n    }\n    constructor(editor) {\n        super();\n        this._sessionDispose = this._register(new DisposableStore());\n        this._editor = editor;\n        this._ignoreSelectionChange = false;\n        this._session = null;\n    }\n    dispose() {\n        this._endSession();\n        super.dispose();\n    }\n    _beginSessionIfNeeded(findController) {\n        if (!this._session) {\n            // Create a new session\n            const session = MultiCursorSession.create(this._editor, findController);\n            if (!session) {\n                return;\n            }\n            this._session = session;\n            const newState = { searchString: this._session.searchText };\n            if (this._session.isDisconnectedFromFindController) {\n                newState.wholeWordOverride = 1 /* FindOptionOverride.True */;\n                newState.matchCaseOverride = 1 /* FindOptionOverride.True */;\n                newState.isRegexOverride = 2 /* FindOptionOverride.False */;\n            }\n            findController.getState().change(newState, false);\n            this._sessionDispose.add(this._editor.onDidChangeCursorSelection((e) => {\n                if (this._ignoreSelectionChange) {\n                    return;\n                }\n                this._endSession();\n            }));\n            this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\n                this._endSession();\n            }));\n            this._sessionDispose.add(findController.getState().onFindReplaceStateChange((e) => {\n                if (e.matchCase || e.wholeWord) {\n                    this._endSession();\n                }\n            }));\n        }\n    }\n    _endSession() {\n        this._sessionDispose.clear();\n        if (this._session && this._session.isDisconnectedFromFindController) {\n            const newState = {\n                wholeWordOverride: 0 /* FindOptionOverride.NotSet */,\n                matchCaseOverride: 0 /* FindOptionOverride.NotSet */,\n                isRegexOverride: 0 /* FindOptionOverride.NotSet */,\n            };\n            this._session.findController.getState().change(newState, false);\n        }\n        this._session = null;\n    }\n    _setSelections(selections) {\n        this._ignoreSelectionChange = true;\n        this._editor.setSelections(selections);\n        this._ignoreSelectionChange = false;\n    }\n    _expandEmptyToWord(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\n        if (!word) {\n            return selection;\n        }\n        return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n    _applySessionResult(result) {\n        if (!result) {\n            return;\n        }\n        this._setSelections(result.selections);\n        if (result.revealRange) {\n            this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n        }\n    }\n    getSession(findController) {\n        return this._session;\n    }\n    addSelectionToNextFindMatch(findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (!this._session) {\n            // If there are multiple cursors, handle the case where they do not all select the same text.\n            const allSelections = this._editor.getSelections();\n            if (allSelections.length > 1) {\n                const findState = findController.getState();\n                const matchCase = findState.matchCase;\n                const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    const model = this._editor.getModel();\n                    const resultingSelections = [];\n                    for (let i = 0, len = allSelections.length; i < len; i++) {\n                        resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n                    }\n                    this._editor.setSelections(resultingSelections);\n                    return;\n                }\n            }\n        }\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToNextFindMatch());\n        }\n    }\n    addSelectionToPreviousFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n        }\n    }\n    moveSelectionToNextFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n        }\n    }\n    moveSelectionToPreviousFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n        }\n    }\n    selectAll(findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        let matches = null;\n        const findState = findController.getState();\n        // Special case: find widget owns entirely what we search for if:\n        // - focus is not in the editor (i.e. it is in the find widget)\n        // - and the search widget is visible\n        // - and the search string is non-empty\n        // - and we're searching for a regex\n        if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n            const editorModel = this._editor.getModel();\n            if (findState.searchScope) {\n                matches = editorModel.findMatches(findState.searchString, findState.searchScope, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n            }\n            else {\n                matches = editorModel.findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(132 /* EditorOption.wordSeparators */) : null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n            }\n        }\n        else {\n            this._beginSessionIfNeeded(findController);\n            if (!this._session) {\n                return;\n            }\n            matches = this._session.selectAll(findState.searchScope);\n        }\n        if (matches.length > 0) {\n            const editorSelection = this._editor.getSelection();\n            // Have the primary cursor remain the one where the action was invoked\n            for (let i = 0, len = matches.length; i < len; i++) {\n                const match = matches[i];\n                const intersection = match.range.intersectRanges(editorSelection);\n                if (intersection) {\n                    // bingo!\n                    matches[i] = matches[0];\n                    matches[0] = match;\n                    break;\n                }\n            }\n            this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n        }\n    }\n}\nexport class MultiCursorSelectionControllerAction extends EditorAction {\n    run(accessor, editor) {\n        const multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel) {\n            const previousCursorState = viewModel.getCursorStates();\n            const findController = CommonFindController.get(editor);\n            if (findController) {\n                this._run(multiCursorController, findController);\n            }\n            else {\n                const newFindController = accessor.get(IInstantiationService).createInstance(CommonFindController, editor);\n                this._run(multiCursorController, newFindController);\n                newFindController.dispose();\n            }\n            announceCursorChange(previousCursorState, viewModel.getCursorStates());\n        }\n    }\n}\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.addSelectionToNextFindMatch',\n            label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n            alias: 'Add Selection To Next Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 34 /* KeyCode.KeyD */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add &&Next Occurrence\"),\n                order: 5\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.addSelectionToNextFindMatch(findController);\n    }\n}\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.addSelectionToPreviousFindMatch',\n            label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n            alias: 'Add Selection To Previous Find Match',\n            precondition: undefined,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add P&&revious Occurrence\"),\n                order: 6\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.addSelectionToPreviousFindMatch(findController);\n    }\n}\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.moveSelectionToNextFindMatch',\n            label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n            alias: 'Move Last Selection To Next Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 34 /* KeyCode.KeyD */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.moveSelectionToNextFindMatch(findController);\n    }\n}\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.moveSelectionToPreviousFindMatch',\n            label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n            alias: 'Move Last Selection To Previous Find Match',\n            precondition: undefined\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.moveSelectionToPreviousFindMatch(findController);\n    }\n}\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.selectHighlights',\n            label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n            alias: 'Select All Occurrences of Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, \"Select All &&Occurrences\"),\n                order: 7\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    }\n}\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.changeAll',\n            label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n            alias: 'Change All Occurrences',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 60 /* KeyCode.F2 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 1.2\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    }\n}\nclass SelectionHighlighterState {\n    constructor(_model, _searchText, _matchCase, _wordSeparators, prevState) {\n        this._model = _model;\n        this._searchText = _searchText;\n        this._matchCase = _matchCase;\n        this._wordSeparators = _wordSeparators;\n        this._modelVersionId = this._model.getVersionId();\n        this._cachedFindMatches = null;\n        if (prevState\n            && this._model === prevState._model\n            && this._searchText === prevState._searchText\n            && this._matchCase === prevState._matchCase\n            && this._wordSeparators === prevState._wordSeparators\n            && this._modelVersionId === prevState._modelVersionId) {\n            this._cachedFindMatches = prevState._cachedFindMatches;\n        }\n    }\n    findMatches() {\n        if (this._cachedFindMatches === null) {\n            this._cachedFindMatches = this._model.findMatches(this._searchText, true, false, this._matchCase, this._wordSeparators, false).map(m => m.range);\n            this._cachedFindMatches.sort(Range.compareRangesUsingStarts);\n        }\n        return this._cachedFindMatches;\n    }\n}\nlet SelectionHighlighter = class SelectionHighlighter extends Disposable {\n    static { SelectionHighlighter_1 = this; }\n    static { this.ID = 'editor.contrib.selectionHighlighter'; }\n    constructor(editor, _languageFeaturesService) {\n        super();\n        this._languageFeaturesService = _languageFeaturesService;\n        this.editor = editor;\n        this._isEnabled = editor.getOption(109 /* EditorOption.selectionHighlight */);\n        this._decorations = editor.createDecorationsCollection();\n        this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n        this.state = null;\n        this._register(editor.onDidChangeConfiguration((e) => {\n            this._isEnabled = editor.getOption(109 /* EditorOption.selectionHighlight */);\n        }));\n        this._register(editor.onDidChangeCursorSelection((e) => {\n            if (!this._isEnabled) {\n                // Early exit if nothing needs to be done!\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n                return;\n            }\n            if (e.selection.isEmpty()) {\n                if (e.reason === 3 /* CursorChangeReason.Explicit */) {\n                    if (this.state) {\n                        // no longer valid\n                        this._setState(null);\n                    }\n                    this.updateSoon.schedule();\n                }\n                else {\n                    this._setState(null);\n                }\n            }\n            else {\n                this._update();\n            }\n        }));\n        this._register(editor.onDidChangeModel((e) => {\n            this._setState(null);\n        }));\n        this._register(editor.onDidChangeModelContent((e) => {\n            if (this._isEnabled) {\n                this.updateSoon.schedule();\n            }\n        }));\n        const findController = CommonFindController.get(editor);\n        if (findController) {\n            this._register(findController.getState().onFindReplaceStateChange((e) => {\n                this._update();\n            }));\n        }\n        this.updateSoon.schedule();\n    }\n    _update() {\n        this._setState(SelectionHighlighter_1._createState(this.state, this._isEnabled, this.editor));\n    }\n    static _createState(oldState, isEnabled, editor) {\n        if (!isEnabled) {\n            return null;\n        }\n        if (!editor.hasModel()) {\n            return null;\n        }\n        const s = editor.getSelection();\n        if (s.startLineNumber !== s.endLineNumber) {\n            // multiline forbidden for perf reasons\n            return null;\n        }\n        const multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return null;\n        }\n        const findController = CommonFindController.get(editor);\n        if (!findController) {\n            return null;\n        }\n        let r = multiCursorController.getSession(findController);\n        if (!r) {\n            const allSelections = editor.getSelections();\n            if (allSelections.length > 1) {\n                const findState = findController.getState();\n                const matchCase = findState.matchCase;\n                const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    return null;\n                }\n            }\n            r = MultiCursorSession.create(editor, findController);\n        }\n        if (!r) {\n            return null;\n        }\n        if (r.currentMatch) {\n            // This is an empty selection\n            // Do not interfere with semantic word highlighting in the no selection case\n            return null;\n        }\n        if (/^[ \\t]+$/.test(r.searchText)) {\n            // whitespace only selection\n            return null;\n        }\n        if (r.searchText.length > 200) {\n            // very long selection\n            return null;\n        }\n        // TODO: better handling of this case\n        const findState = findController.getState();\n        const caseSensitive = findState.matchCase;\n        // Return early if the find widget shows the exact same matches\n        if (findState.isRevealed) {\n            let findStateSearchString = findState.searchString;\n            if (!caseSensitive) {\n                findStateSearchString = findStateSearchString.toLowerCase();\n            }\n            let mySearchString = r.searchText;\n            if (!caseSensitive) {\n                mySearchString = mySearchString.toLowerCase();\n            }\n            if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n                return null;\n            }\n        }\n        return new SelectionHighlighterState(editor.getModel(), r.searchText, r.matchCase, r.wholeWord ? editor.getOption(132 /* EditorOption.wordSeparators */) : null, oldState);\n    }\n    _setState(newState) {\n        this.state = newState;\n        if (!this.state) {\n            this._decorations.clear();\n            return;\n        }\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (model.isTooLargeForTokenization()) {\n            // the file is too large, so searching word under cursor in the whole document would be blocking the UI.\n            return;\n        }\n        const allMatches = this.state.findMatches();\n        const selections = this.editor.getSelections();\n        selections.sort(Range.compareRangesUsingStarts);\n        // do not overlap with selection (issue #64 and #512)\n        const matches = [];\n        for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n            const match = allMatches[i];\n            if (j >= lenJ) {\n                // finished all editor selections\n                matches.push(match);\n                i++;\n            }\n            else {\n                const cmp = Range.compareRangesUsingStarts(match, selections[j]);\n                if (cmp < 0) {\n                    // match is before sel\n                    if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n                        matches.push(match);\n                    }\n                    i++;\n                }\n                else if (cmp > 0) {\n                    // sel is before match\n                    j++;\n                }\n                else {\n                    // sel is equal to match\n                    i++;\n                    j++;\n                }\n            }\n        }\n        const occurrenceHighlighting = this.editor.getOption(81 /* EditorOption.occurrencesHighlight */) !== 'off';\n        const hasSemanticHighlights = this._languageFeaturesService.documentHighlightProvider.has(model) && occurrenceHighlighting;\n        const decorations = matches.map(r => {\n            return {\n                range: r,\n                options: getSelectionHighlightDecorationOptions(hasSemanticHighlights)\n            };\n        });\n        this._decorations.set(decorations);\n    }\n    dispose() {\n        this._setState(null);\n        super.dispose();\n    }\n};\nSelectionHighlighter = SelectionHighlighter_1 = __decorate([\n    __param(1, ILanguageFeaturesService)\n], SelectionHighlighter);\nexport { SelectionHighlighter };\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n    const selectedText = getValueInRange(model, ranges[0], !matchCase);\n    for (let i = 1, len = ranges.length; i < len; i++) {\n        const range = ranges[i];\n        if (range.isEmpty()) {\n            return false;\n        }\n        const thisSelectedText = getValueInRange(model, range, !matchCase);\n        if (selectedText !== thisSelectedText) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getValueInRange(model, range, toLowerCase) {\n    const text = model.getValueInRange(range);\n    return (toLowerCase ? text.toLowerCase() : text);\n}\nexport class FocusNextCursor extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.focusNextCursor',\n            label: nls.localize('mutlicursor.focusNextCursor', \"Focus Next Cursor\"),\n            metadata: {\n                description: nls.localize('mutlicursor.focusNextCursor.description', \"Focuses the next cursor\"),\n                args: [],\n            },\n            alias: 'Focus Next Cursor',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.model.pushStackElement();\n        const previousCursorState = Array.from(viewModel.getCursorStates());\n        const firstCursor = previousCursorState.shift();\n        if (!firstCursor) {\n            return;\n        }\n        previousCursorState.push(firstCursor);\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, previousCursorState);\n        viewModel.revealPrimaryCursor(args.source, true);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nexport class FocusPreviousCursor extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.focusPreviousCursor',\n            label: nls.localize('mutlicursor.focusPreviousCursor', \"Focus Previous Cursor\"),\n            metadata: {\n                description: nls.localize('mutlicursor.focusPreviousCursor.description', \"Focuses the previous cursor\"),\n                args: [],\n            },\n            alias: 'Focus Previous Cursor',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.model.pushStackElement();\n        const previousCursorState = Array.from(viewModel.getCursorStates());\n        const firstCursor = previousCursorState.pop();\n        if (!firstCursor) {\n            return;\n        }\n        previousCursorState.unshift(firstCursor);\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, previousCursorState);\n        viewModel.revealPrimaryCursor(args.source, true);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController, 4 /* EditorContributionInstantiation.Lazy */);\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);\nregisterEditorAction(FocusNextCursor);\nregisterEditorAction(FocusPreviousCursor);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}