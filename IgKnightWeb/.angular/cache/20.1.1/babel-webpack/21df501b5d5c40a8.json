{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { DisposableStore, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nexport const Context = {\n  Visible: historyNavigationVisible,\n  HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', \"Whether any suggestion is focused\")),\n  DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', \"Whether suggestion details are visible\")),\n  MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', \"Whether there are multiple suggestions to pick from\")),\n  MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', \"Whether inserting the current suggestion yields in a change or has everything already been typed\")),\n  AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', \"Whether suggestions are inserted when pressing Enter\")),\n  HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', \"Whether the current suggestion has insert and replace behaviour\")),\n  InsertMode: new RawContextKey('suggestionInsertMode', undefined, {\n    type: 'string',\n    description: localize('suggestionInsertMode', \"Whether the default behaviour is to insert or replace\")\n  }),\n  CanResolve: new RawContextKey('suggestionCanResolve', false, localize('suggestionCanResolve', \"Whether the current suggestion supports to resolve further details\"))\n};\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\nexport class CompletionItem {\n  constructor(position, completion, container, provider) {\n    this.position = position;\n    this.completion = completion;\n    this.container = container;\n    this.provider = provider;\n    // validation\n    this.isInvalid = false;\n    // sorting, filtering\n    this.score = FuzzyScore.Default;\n    this.distance = 0;\n    this.textLabel = typeof completion.label === 'string' ? completion.label : completion.label?.label;\n    // ensure lower-variants (perf)\n    this.labelLow = this.textLabel.toLowerCase();\n    // validate label\n    this.isInvalid = !this.textLabel;\n    this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n    this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n    this.extensionId = completion.extensionId;\n    // normalize ranges\n    if (Range.isIRange(completion.range)) {\n      this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n      this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      // validate range\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n    } else {\n      this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n      this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n      this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n      // validate ranges\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace) || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber || completion.range.insert.startColumn !== completion.range.replace.startColumn;\n    }\n    // create the suggestion resolver\n    if (typeof provider.resolveCompletionItem !== 'function') {\n      this._resolveCache = Promise.resolve();\n      this._resolveDuration = 0;\n    }\n  }\n  // ---- resolving\n  get isResolved() {\n    return this._resolveDuration !== undefined;\n  }\n  get resolveDuration() {\n    return this._resolveDuration !== undefined ? this._resolveDuration : -1;\n  }\n  resolve(token) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this._resolveCache) {\n        const sub = token.onCancellationRequested(() => {\n          _this._resolveCache = undefined;\n          _this._resolveDuration = undefined;\n        });\n        const sw = new StopWatch(true);\n        _this._resolveCache = Promise.resolve(_this.provider.resolveCompletionItem(_this.completion, token)).then(value => {\n          Object.assign(_this.completion, value);\n          _this._resolveDuration = sw.elapsed();\n        }, err => {\n          if (isCancellationError(err)) {\n            // the IPC queue will reject the request with the\n            // cancellation error -> reset cached\n            _this._resolveCache = undefined;\n            _this._resolveDuration = undefined;\n          }\n        }).finally(() => {\n          sub.dispose();\n        });\n      }\n      return _this._resolveCache;\n    })();\n  }\n}\nexport class CompletionOptions {\n  static #_ = this.default = new CompletionOptions();\n  constructor(snippetSortOrder = 2 /* SnippetSortOrder.Bottom */, kindFilter = new Set(), providerFilter = new Set(), providerItemsToReuse = new Map(), showDeprecated = true) {\n    this.snippetSortOrder = snippetSortOrder;\n    this.kindFilter = kindFilter;\n    this.providerFilter = providerFilter;\n    this.providerItemsToReuse = providerItemsToReuse;\n    this.showDeprecated = showDeprecated;\n  }\n}\nlet _snippetSuggestSupport;\nexport function getSnippetSuggestSupport() {\n  return _snippetSuggestSupport;\n}\nexport class CompletionItemModel {\n  constructor(items, needsClipboard, durations, disposable) {\n    this.items = items;\n    this.needsClipboard = needsClipboard;\n    this.durations = durations;\n    this.disposable = disposable;\n  }\n}\nexport function provideSuggestionItems(_x, _x2, _x3) {\n  return _provideSuggestionItems.apply(this, arguments);\n}\nfunction _provideSuggestionItems() {\n  _provideSuggestionItems = _asyncToGenerator(function* (registry, model, position, options = CompletionOptions.default, context = {\n    triggerKind: 0 /* languages.CompletionTriggerKind.Invoke */\n  }, token = CancellationToken.None) {\n    const sw = new StopWatch();\n    position = position.clone();\n    const word = model.getWordAtPosition(position);\n    const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n    const defaultRange = {\n      replace: defaultReplaceRange,\n      insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column)\n    };\n    const result = [];\n    const disposables = new DisposableStore();\n    const durations = [];\n    let needsClipboard = false;\n    const onCompletionList = (provider, container, sw) => {\n      let didAddResult = false;\n      if (!container) {\n        return didAddResult;\n      }\n      for (const suggestion of container.suggestions) {\n        if (!options.kindFilter.has(suggestion.kind)) {\n          // skip if not showing deprecated suggestions\n          if (!options.showDeprecated && suggestion?.tags?.includes(1 /* languages.CompletionItemTag.Deprecated */)) {\n            continue;\n          }\n          // fill in default range when missing\n          if (!suggestion.range) {\n            suggestion.range = defaultRange;\n          }\n          // fill in default sortText when missing\n          if (!suggestion.sortText) {\n            suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;\n          }\n          if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* languages.CompletionItemInsertTextRule.InsertAsSnippet */) {\n            needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n          }\n          result.push(new CompletionItem(position, suggestion, container, provider));\n          didAddResult = true;\n        }\n      }\n      if (isDisposable(container)) {\n        disposables.add(container);\n      }\n      durations.push({\n        providerName: provider._debugDisplayName ?? 'unknown_provider',\n        elapsedProvider: container.duration ?? -1,\n        elapsedOverall: sw.elapsed()\n      });\n      return didAddResult;\n    };\n    // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n    // do so - no snippet filter, no special-providers-only request\n    const snippetCompletions = _asyncToGenerator(function* () {\n      if (!_snippetSuggestSupport || options.kindFilter.has(27 /* languages.CompletionItemKind.Snippet */)) {\n        return;\n      }\n      // we have items from a previous session that we can reuse\n      const reuseItems = options.providerItemsToReuse.get(_snippetSuggestSupport);\n      if (reuseItems) {\n        reuseItems.forEach(item => result.push(item));\n        return;\n      }\n      if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n        return;\n      }\n      const sw = new StopWatch();\n      const list = yield _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n      onCompletionList(_snippetSuggestSupport, list, sw);\n    })();\n    // add suggestions from contributed providers - providers are ordered in groups of\n    // equal score and once a group produces a result the process stops\n    // get provider groups, always add snippet suggestion provider\n    for (const providerGroup of registry.orderedGroups(model)) {\n      // for each support in the group ask for suggestions\n      let didAddResult = false;\n      yield Promise.all(providerGroup.map(/*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (provider) {\n          // we have items from a previous session that we can reuse\n          if (options.providerItemsToReuse.has(provider)) {\n            const items = options.providerItemsToReuse.get(provider);\n            items.forEach(item => result.push(item));\n            didAddResult = didAddResult || items.length > 0;\n            return;\n          }\n          // check if this provider is filtered out\n          if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n            return;\n          }\n          try {\n            const sw = new StopWatch();\n            const list = yield provider.provideCompletionItems(model, position, context, token);\n            didAddResult = onCompletionList(provider, list, sw) || didAddResult;\n          } catch (err) {\n            onUnexpectedExternalError(err);\n          }\n        });\n        return function (_x5) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      if (didAddResult || token.isCancellationRequested) {\n        break;\n      }\n    }\n    yield snippetCompletions;\n    if (token.isCancellationRequested) {\n      disposables.dispose();\n      return Promise.reject(new CancellationError());\n    }\n    return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, {\n      entries: durations,\n      elapsed: sw.elapsed()\n    }, disposables);\n  });\n  return _provideSuggestionItems.apply(this, arguments);\n}\nfunction defaultComparator(a, b) {\n  // check with 'sortText'\n  if (a.sortTextLow && b.sortTextLow) {\n    if (a.sortTextLow < b.sortTextLow) {\n      return -1;\n    } else if (a.sortTextLow > b.sortTextLow) {\n      return 1;\n    }\n  }\n  // check with 'label'\n  if (a.textLabel < b.textLabel) {\n    return -1;\n  } else if (a.textLabel > b.textLabel) {\n    return 1;\n  }\n  // check with 'type'\n  return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return -1;\n    } else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return 1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return 1;\n    } else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return -1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nconst _snippetComparators = new Map();\n_snippetComparators.set(0 /* SnippetSortOrder.Top */, snippetUpComparator);\n_snippetComparators.set(2 /* SnippetSortOrder.Bottom */, snippetDownComparator);\n_snippetComparators.set(1 /* SnippetSortOrder.Inline */, defaultComparator);\nexport function getSuggestionComparator(snippetConfig) {\n  return _snippetComparators.get(snippetConfig);\n}\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (accessor, ...args) {\n    const [uri, position, triggerCharacter, maxItemsToResolve] = args;\n    assertType(URI.isUri(uri));\n    assertType(Position.isIPosition(position));\n    assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n    assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n    const {\n      completionProvider\n    } = accessor.get(ILanguageFeaturesService);\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n      const result = {\n        incomplete: false,\n        suggestions: []\n      };\n      const resolving = [];\n      const actualPosition = ref.object.textEditorModel.validatePosition(position);\n      const completions = yield provideSuggestionItems(completionProvider, ref.object.textEditorModel, actualPosition, undefined, {\n        triggerCharacter: triggerCharacter ?? undefined,\n        triggerKind: triggerCharacter ? 1 /* languages.CompletionTriggerKind.TriggerCharacter */ : 0 /* languages.CompletionTriggerKind.Invoke */\n      });\n      for (const item of completions.items) {\n        if (resolving.length < (maxItemsToResolve ?? 0)) {\n          resolving.push(item.resolve(CancellationToken.None));\n        }\n        result.incomplete = result.incomplete || item.container.incomplete;\n        result.suggestions.push(item.completion);\n      }\n      try {\n        yield Promise.all(resolving);\n        return result;\n      } finally {\n        setTimeout(() => completions.disposable.dispose(), 100);\n      }\n    } finally {\n      ref.dispose();\n    }\n  });\n  return function (_x4) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport function showSimpleSuggestions(editor, provider) {\n  editor.getContribution('editor.contrib.suggestController')?.triggerSuggest(new Set().add(provider), undefined, true);\n}\nexport class QuickSuggestionsOptions {\n  static isAllOff(config) {\n    return config.other === 'off' && config.comments === 'off' && config.strings === 'off';\n  }\n  static isAllOn(config) {\n    return config.other === 'on' && config.comments === 'on' && config.strings === 'on';\n  }\n  static valueFor(config, tokenType) {\n    switch (tokenType) {\n      case 1 /* StandardTokenType.Comment */:\n        return config.comments;\n      case 2 /* StandardTokenType.String */:\n        return config.strings;\n      default:\n        return config.other;\n    }\n  }\n}","map":{"version":3,"names":["CancellationToken","CancellationError","isCancellationError","onUnexpectedExternalError","FuzzyScore","DisposableStore","isDisposable","StopWatch","assertType","URI","Position","Range","ITextModelService","SnippetParser","localize","MenuId","CommandsRegistry","RawContextKey","ILanguageFeaturesService","historyNavigationVisible","Context","Visible","HasFocusedSuggestion","DetailsVisible","MultipleSuggestions","MakesTextEdit","AcceptSuggestionsOnEnter","HasInsertAndReplaceRange","InsertMode","undefined","type","description","CanResolve","suggestWidgetStatusbarMenu","CompletionItem","constructor","position","completion","container","provider","isInvalid","score","Default","distance","textLabel","label","labelLow","toLowerCase","sortTextLow","sortText","filterTextLow","filterText","extensionId","isIRange","range","editStart","startLineNumber","startColumn","editInsertEnd","endLineNumber","endColumn","editReplaceEnd","spansMultipleLines","lineNumber","insert","replace","resolveCompletionItem","_resolveCache","Promise","resolve","_resolveDuration","isResolved","resolveDuration","token","_this","_asyncToGenerator","sub","onCancellationRequested","sw","then","value","Object","assign","elapsed","err","finally","dispose","CompletionOptions","_","default","snippetSortOrder","kindFilter","Set","providerFilter","providerItemsToReuse","Map","showDeprecated","_snippetSuggestSupport","getSnippetSuggestSupport","CompletionItemModel","items","needsClipboard","durations","disposable","provideSuggestionItems","_x","_x2","_x3","_provideSuggestionItems","apply","arguments","registry","model","options","context","triggerKind","None","clone","word","getWordAtPosition","defaultReplaceRange","fromPositions","defaultRange","setEndPosition","column","result","disposables","onCompletionList","didAddResult","suggestion","suggestions","has","kind","tags","includes","insertTextRules","guessNeedsClipboard","insertText","push","add","providerName","_debugDisplayName","elapsedProvider","duration","elapsedOverall","snippetCompletions","reuseItems","get","forEach","item","size","list","provideCompletionItems","providerGroup","orderedGroups","all","map","_ref3","length","_x5","isCancellationRequested","reject","sort","getSuggestionComparator","entries","defaultComparator","a","b","snippetUpComparator","snippetDownComparator","_snippetComparators","set","snippetConfig","registerCommand","_ref","accessor","args","uri","triggerCharacter","maxItemsToResolve","isUri","isIPosition","completionProvider","ref","createModelReference","incomplete","resolving","actualPosition","object","textEditorModel","validatePosition","completions","setTimeout","_x4","showSimpleSuggestions","editor","getContribution","triggerSuggest","QuickSuggestionsOptions","isAllOff","config","other","comments","strings","isAllOn","valueFor","tokenType"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggest.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { DisposableStore, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nexport const Context = {\n    Visible: historyNavigationVisible,\n    HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', \"Whether any suggestion is focused\")),\n    DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', \"Whether suggestion details are visible\")),\n    MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', \"Whether there are multiple suggestions to pick from\")),\n    MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', \"Whether inserting the current suggestion yields in a change or has everything already been typed\")),\n    AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', \"Whether suggestions are inserted when pressing Enter\")),\n    HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', \"Whether the current suggestion has insert and replace behaviour\")),\n    InsertMode: new RawContextKey('suggestionInsertMode', undefined, { type: 'string', description: localize('suggestionInsertMode', \"Whether the default behaviour is to insert or replace\") }),\n    CanResolve: new RawContextKey('suggestionCanResolve', false, localize('suggestionCanResolve', \"Whether the current suggestion supports to resolve further details\")),\n};\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\nexport class CompletionItem {\n    constructor(position, completion, container, provider) {\n        this.position = position;\n        this.completion = completion;\n        this.container = container;\n        this.provider = provider;\n        // validation\n        this.isInvalid = false;\n        // sorting, filtering\n        this.score = FuzzyScore.Default;\n        this.distance = 0;\n        this.textLabel = typeof completion.label === 'string'\n            ? completion.label\n            : completion.label?.label;\n        // ensure lower-variants (perf)\n        this.labelLow = this.textLabel.toLowerCase();\n        // validate label\n        this.isInvalid = !this.textLabel;\n        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n        this.extensionId = completion.extensionId;\n        // normalize ranges\n        if (Range.isIRange(completion.range)) {\n            this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n            this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n            this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n            // validate range\n            this.isInvalid = this.isInvalid\n                || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n        }\n        else {\n            this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n            this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n            this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n            // validate ranges\n            this.isInvalid = this.isInvalid\n                || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace)\n                || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber\n                || completion.range.insert.startColumn !== completion.range.replace.startColumn;\n        }\n        // create the suggestion resolver\n        if (typeof provider.resolveCompletionItem !== 'function') {\n            this._resolveCache = Promise.resolve();\n            this._resolveDuration = 0;\n        }\n    }\n    // ---- resolving\n    get isResolved() {\n        return this._resolveDuration !== undefined;\n    }\n    get resolveDuration() {\n        return this._resolveDuration !== undefined ? this._resolveDuration : -1;\n    }\n    async resolve(token) {\n        if (!this._resolveCache) {\n            const sub = token.onCancellationRequested(() => {\n                this._resolveCache = undefined;\n                this._resolveDuration = undefined;\n            });\n            const sw = new StopWatch(true);\n            this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(value => {\n                Object.assign(this.completion, value);\n                this._resolveDuration = sw.elapsed();\n            }, err => {\n                if (isCancellationError(err)) {\n                    // the IPC queue will reject the request with the\n                    // cancellation error -> reset cached\n                    this._resolveCache = undefined;\n                    this._resolveDuration = undefined;\n                }\n            }).finally(() => {\n                sub.dispose();\n            });\n        }\n        return this._resolveCache;\n    }\n}\nexport class CompletionOptions {\n    static { this.default = new CompletionOptions(); }\n    constructor(snippetSortOrder = 2 /* SnippetSortOrder.Bottom */, kindFilter = new Set(), providerFilter = new Set(), providerItemsToReuse = new Map(), showDeprecated = true) {\n        this.snippetSortOrder = snippetSortOrder;\n        this.kindFilter = kindFilter;\n        this.providerFilter = providerFilter;\n        this.providerItemsToReuse = providerItemsToReuse;\n        this.showDeprecated = showDeprecated;\n    }\n}\nlet _snippetSuggestSupport;\nexport function getSnippetSuggestSupport() {\n    return _snippetSuggestSupport;\n}\nexport class CompletionItemModel {\n    constructor(items, needsClipboard, durations, disposable) {\n        this.items = items;\n        this.needsClipboard = needsClipboard;\n        this.durations = durations;\n        this.disposable = disposable;\n    }\n}\nexport async function provideSuggestionItems(registry, model, position, options = CompletionOptions.default, context = { triggerKind: 0 /* languages.CompletionTriggerKind.Invoke */ }, token = CancellationToken.None) {\n    const sw = new StopWatch();\n    position = position.clone();\n    const word = model.getWordAtPosition(position);\n    const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n    const defaultRange = { replace: defaultReplaceRange, insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column) };\n    const result = [];\n    const disposables = new DisposableStore();\n    const durations = [];\n    let needsClipboard = false;\n    const onCompletionList = (provider, container, sw) => {\n        let didAddResult = false;\n        if (!container) {\n            return didAddResult;\n        }\n        for (const suggestion of container.suggestions) {\n            if (!options.kindFilter.has(suggestion.kind)) {\n                // skip if not showing deprecated suggestions\n                if (!options.showDeprecated && suggestion?.tags?.includes(1 /* languages.CompletionItemTag.Deprecated */)) {\n                    continue;\n                }\n                // fill in default range when missing\n                if (!suggestion.range) {\n                    suggestion.range = defaultRange;\n                }\n                // fill in default sortText when missing\n                if (!suggestion.sortText) {\n                    suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;\n                }\n                if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* languages.CompletionItemInsertTextRule.InsertAsSnippet */) {\n                    needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n                }\n                result.push(new CompletionItem(position, suggestion, container, provider));\n                didAddResult = true;\n            }\n        }\n        if (isDisposable(container)) {\n            disposables.add(container);\n        }\n        durations.push({\n            providerName: provider._debugDisplayName ?? 'unknown_provider', elapsedProvider: container.duration ?? -1, elapsedOverall: sw.elapsed()\n        });\n        return didAddResult;\n    };\n    // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n    // do so - no snippet filter, no special-providers-only request\n    const snippetCompletions = (async () => {\n        if (!_snippetSuggestSupport || options.kindFilter.has(27 /* languages.CompletionItemKind.Snippet */)) {\n            return;\n        }\n        // we have items from a previous session that we can reuse\n        const reuseItems = options.providerItemsToReuse.get(_snippetSuggestSupport);\n        if (reuseItems) {\n            reuseItems.forEach(item => result.push(item));\n            return;\n        }\n        if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n            return;\n        }\n        const sw = new StopWatch();\n        const list = await _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n        onCompletionList(_snippetSuggestSupport, list, sw);\n    })();\n    // add suggestions from contributed providers - providers are ordered in groups of\n    // equal score and once a group produces a result the process stops\n    // get provider groups, always add snippet suggestion provider\n    for (const providerGroup of registry.orderedGroups(model)) {\n        // for each support in the group ask for suggestions\n        let didAddResult = false;\n        await Promise.all(providerGroup.map(async (provider) => {\n            // we have items from a previous session that we can reuse\n            if (options.providerItemsToReuse.has(provider)) {\n                const items = options.providerItemsToReuse.get(provider);\n                items.forEach(item => result.push(item));\n                didAddResult = didAddResult || items.length > 0;\n                return;\n            }\n            // check if this provider is filtered out\n            if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n                return;\n            }\n            try {\n                const sw = new StopWatch();\n                const list = await provider.provideCompletionItems(model, position, context, token);\n                didAddResult = onCompletionList(provider, list, sw) || didAddResult;\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n            }\n        }));\n        if (didAddResult || token.isCancellationRequested) {\n            break;\n        }\n    }\n    await snippetCompletions;\n    if (token.isCancellationRequested) {\n        disposables.dispose();\n        return Promise.reject(new CancellationError());\n    }\n    return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, { entries: durations, elapsed: sw.elapsed() }, disposables);\n}\nfunction defaultComparator(a, b) {\n    // check with 'sortText'\n    if (a.sortTextLow && b.sortTextLow) {\n        if (a.sortTextLow < b.sortTextLow) {\n            return -1;\n        }\n        else if (a.sortTextLow > b.sortTextLow) {\n            return 1;\n        }\n    }\n    // check with 'label'\n    if (a.textLabel < b.textLabel) {\n        return -1;\n    }\n    else if (a.textLabel > b.textLabel) {\n        return 1;\n    }\n    // check with 'type'\n    return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return -1;\n        }\n        else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return 1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return 1;\n        }\n        else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return -1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nconst _snippetComparators = new Map();\n_snippetComparators.set(0 /* SnippetSortOrder.Top */, snippetUpComparator);\n_snippetComparators.set(2 /* SnippetSortOrder.Bottom */, snippetDownComparator);\n_snippetComparators.set(1 /* SnippetSortOrder.Inline */, defaultComparator);\nexport function getSuggestionComparator(snippetConfig) {\n    return _snippetComparators.get(snippetConfig);\n}\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', async (accessor, ...args) => {\n    const [uri, position, triggerCharacter, maxItemsToResolve] = args;\n    assertType(URI.isUri(uri));\n    assertType(Position.isIPosition(position));\n    assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n    assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n    const { completionProvider } = accessor.get(ILanguageFeaturesService);\n    const ref = await accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const result = {\n            incomplete: false,\n            suggestions: []\n        };\n        const resolving = [];\n        const actualPosition = ref.object.textEditorModel.validatePosition(position);\n        const completions = await provideSuggestionItems(completionProvider, ref.object.textEditorModel, actualPosition, undefined, { triggerCharacter: triggerCharacter ?? undefined, triggerKind: triggerCharacter ? 1 /* languages.CompletionTriggerKind.TriggerCharacter */ : 0 /* languages.CompletionTriggerKind.Invoke */ });\n        for (const item of completions.items) {\n            if (resolving.length < (maxItemsToResolve ?? 0)) {\n                resolving.push(item.resolve(CancellationToken.None));\n            }\n            result.incomplete = result.incomplete || item.container.incomplete;\n            result.suggestions.push(item.completion);\n        }\n        try {\n            await Promise.all(resolving);\n            return result;\n        }\n        finally {\n            setTimeout(() => completions.disposable.dispose(), 100);\n        }\n    }\n    finally {\n        ref.dispose();\n    }\n});\nexport function showSimpleSuggestions(editor, provider) {\n    editor.getContribution('editor.contrib.suggestController')?.triggerSuggest(new Set().add(provider), undefined, true);\n}\nexport class QuickSuggestionsOptions {\n    static isAllOff(config) {\n        return config.other === 'off' && config.comments === 'off' && config.strings === 'off';\n    }\n    static isAllOn(config) {\n        return config.other === 'on' && config.comments === 'on' && config.strings === 'on';\n    }\n    static valueFor(config, tokenType) {\n        switch (tokenType) {\n            case 1 /* StandardTokenType.Comment */: return config.comments;\n            case 2 /* StandardTokenType.String */: return config.strings;\n            default: return config.other;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}