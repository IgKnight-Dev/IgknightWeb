{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport let LineNumbersOverlay = /*#__PURE__*/(() => {\n  class LineNumbersOverlay extends DynamicViewOverlay {\n    static #_ = this.CLASS_NAME = 'line-numbers';\n    constructor(context) {\n      super();\n      this._context = context;\n      this._readConfig();\n      this._lastCursorModelPosition = new Position(1, 1);\n      this._renderResult = null;\n      this._activeLineNumber = 1;\n      this._context.addEventHandler(this);\n    }\n    _readConfig() {\n      const options = this._context.configuration.options;\n      this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n      const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n      this._renderLineNumbers = lineNumbers.renderType;\n      this._renderCustomLineNumbers = lineNumbers.renderFn;\n      this._renderFinalNewline = options.get(96 /* EditorOption.renderFinalNewline */);\n      const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n      this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n      this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n      this._context.removeEventHandler(this);\n      this._renderResult = null;\n      super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n      this._readConfig();\n      return true;\n    }\n    onCursorStateChanged(e) {\n      const primaryViewPosition = e.selections[0].getPosition();\n      this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n      let shouldRender = false;\n      if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n        this._activeLineNumber = primaryViewPosition.lineNumber;\n        shouldRender = true;\n      }\n      if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n        shouldRender = true;\n      }\n      return shouldRender;\n    }\n    onFlushed(e) {\n      return true;\n    }\n    onLinesChanged(e) {\n      return true;\n    }\n    onLinesDeleted(e) {\n      return true;\n    }\n    onLinesInserted(e) {\n      return true;\n    }\n    onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n      return true;\n    }\n    onDecorationsChanged(e) {\n      return e.affectsLineNumber;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n      const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n      if (modelPosition.column !== 1) {\n        return '';\n      }\n      const modelLineNumber = modelPosition.lineNumber;\n      if (this._renderCustomLineNumbers) {\n        return this._renderCustomLineNumbers(modelLineNumber);\n      }\n      if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n        const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n        if (diff === 0) {\n          return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n        }\n        return String(diff);\n      }\n      if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n        if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n          return String(modelLineNumber);\n        }\n        if (modelLineNumber % 10 === 0) {\n          return String(modelLineNumber);\n        }\n        const finalLineNumber = this._context.viewModel.getLineCount();\n        if (modelLineNumber === finalLineNumber) {\n          return String(modelLineNumber);\n        }\n        return '';\n      }\n      return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n      if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n        this._renderResult = null;\n        return;\n      }\n      const lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n      const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      const lineNoDecorations = this._context.viewModel.getDecorationsInViewport(ctx.visibleRange).filter(d => !!d.options.lineNumberClassName);\n      lineNoDecorations.sort((a, b) => Range.compareRangesUsingEnds(a.range, b.range));\n      let decorationStartIndex = 0;\n      const lineCount = this._context.viewModel.getLineCount();\n      const output = [];\n      for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        const lineIndex = lineNumber - visibleStartLineNumber;\n        let renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n        let extraClassNames = '';\n        // skip decorations whose end positions we've already passed\n        while (decorationStartIndex < lineNoDecorations.length && lineNoDecorations[decorationStartIndex].range.endLineNumber < lineNumber) {\n          decorationStartIndex++;\n        }\n        for (let i = decorationStartIndex; i < lineNoDecorations.length; i++) {\n          const {\n            range,\n            options\n          } = lineNoDecorations[i];\n          if (range.startLineNumber <= lineNumber) {\n            extraClassNames += ' ' + options.lineNumberClassName;\n          }\n        }\n        if (!renderLineNumber && !extraClassNames) {\n          output[lineIndex] = '';\n          continue;\n        }\n        if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n          // this is the last line\n          if (this._renderFinalNewline === 'off') {\n            renderLineNumber = '';\n          }\n          if (this._renderFinalNewline === 'dimmed') {\n            extraClassNames += ' dimmed-line-number';\n          }\n        }\n        if (lineNumber === this._activeLineNumber) {\n          extraClassNames += ' active-line-number';\n        }\n        output[lineIndex] = `<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassNames}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`;\n      }\n      this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n      const lineIndex = lineNumber - startLineNumber;\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n      return this._renderResult[lineIndex];\n    }\n  }\n  return LineNumbersOverlay;\n})();\nregisterThemingParticipant((theme, collector) => {\n  const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n  const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n  if (editorDimmedLineNumberColor) {\n    collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n  } else if (editorLineNumbersColor) {\n    collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n  }\n});","map":{"version":3,"names":["platform","DynamicViewOverlay","Position","Range","registerThemingParticipant","editorDimmedLineNumber","editorLineNumbers","LineNumbersOverlay","_","CLASS_NAME","constructor","context","_context","_readConfig","_lastCursorModelPosition","_renderResult","_activeLineNumber","addEventHandler","options","configuration","_lineHeight","get","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","layoutInfo","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","primaryViewPosition","selections","getPosition","viewModel","coordinatesConverter","convertViewPositionToModelPosition","shouldRender","lineNumber","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","onDecorationsChanged","affectsLineNumber","_getLineRenderLineNumber","viewLineNumber","modelPosition","column","modelLineNumber","diff","Math","abs","String","finalLineNumber","getLineCount","prepareRender","ctx","lineHeightClassName","isLinux","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","lineNoDecorations","getDecorationsInViewport","filter","d","lineNumberClassName","sort","a","b","compareRangesUsingEnds","range","decorationStartIndex","lineCount","output","lineIndex","renderLineNumber","extraClassNames","length","i","getLineLength","render","theme","collector","editorLineNumbersColor","getColor","editorDimmedLineNumberColor","addRule","transparent"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    static { this.CLASS_NAME = 'line-numbers'; }\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(96 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return e.affectsLineNumber;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            const finalLineNumber = this._context.viewModel.getLineCount();\n            if (modelLineNumber === finalLineNumber) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineNoDecorations = this._context.viewModel.getDecorationsInViewport(ctx.visibleRange).filter(d => !!d.options.lineNumberClassName);\n        lineNoDecorations.sort((a, b) => Range.compareRangesUsingEnds(a.range, b.range));\n        let decorationStartIndex = 0;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            let renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            let extraClassNames = '';\n            // skip decorations whose end positions we've already passed\n            while (decorationStartIndex < lineNoDecorations.length && lineNoDecorations[decorationStartIndex].range.endLineNumber < lineNumber) {\n                decorationStartIndex++;\n            }\n            for (let i = decorationStartIndex; i < lineNoDecorations.length; i++) {\n                const { range, options } = lineNoDecorations[i];\n                if (range.startLineNumber <= lineNumber) {\n                    extraClassNames += ' ' + options.lineNumberClassName;\n                }\n            }\n            if (!renderLineNumber && !extraClassNames) {\n                output[lineIndex] = '';\n                continue;\n            }\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    renderLineNumber = '';\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassNames += ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassNames += ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassNames}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}