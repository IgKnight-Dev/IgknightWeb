{"ast":null,"code":"import { createSingleCallFunction } from './functional.js';\nimport { Iterable } from './iterator.js';\n// #region Disposable Tracking\n/**\n * Enables logging of potentially leaked disposables.\n *\n * A disposable is considered leaked if it is not disposed or not registered as the child of\n * another disposable. This tracking is very simple an only works for classes that either\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\n */\nconst TRACK_DISPOSABLES = false;\nlet disposableTracker = null;\nexport function setDisposableTracker(tracker) {\n  disposableTracker = tracker;\n}\nif (TRACK_DISPOSABLES) {\n  const __is_disposable_tracked__ = '__is_disposable_tracked__';\n  setDisposableTracker(new class {\n    trackDisposable(x) {\n      const stack = new Error('Potentially leaked disposable').stack;\n      setTimeout(() => {\n        if (!x[__is_disposable_tracked__]) {\n          console.log(stack);\n        }\n      }, 3000);\n    }\n    setParent(child, parent) {\n      if (child && child !== Disposable.None) {\n        try {\n          child[__is_disposable_tracked__] = true;\n        } catch {\n          // noop\n        }\n      }\n    }\n    markAsDisposed(disposable) {\n      if (disposable && disposable !== Disposable.None) {\n        try {\n          disposable[__is_disposable_tracked__] = true;\n        } catch {\n          // noop\n        }\n      }\n    }\n    markAsSingleton(disposable) {}\n  }());\n}\nexport function trackDisposable(x) {\n  disposableTracker?.trackDisposable(x);\n  return x;\n}\nexport function markAsDisposed(disposable) {\n  disposableTracker?.markAsDisposed(disposable);\n}\nfunction setParentOfDisposable(child, parent) {\n  disposableTracker?.setParent(child, parent);\n}\nfunction setParentOfDisposables(children, parent) {\n  if (!disposableTracker) {\n    return;\n  }\n  for (const child of children) {\n    disposableTracker.setParent(child, parent);\n  }\n}\n/**\n * Indicates that the given object is a singleton which does not need to be disposed.\n*/\nexport function markAsSingleton(singleton) {\n  disposableTracker?.markAsSingleton(singleton);\n  return singleton;\n}\n/**\n * Check if `thing` is {@link IDisposable disposable}.\n */\nexport function isDisposable(thing) {\n  return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;\n}\nexport function dispose(arg) {\n  if (Iterable.is(arg)) {\n    const errors = [];\n    for (const d of arg) {\n      if (d) {\n        try {\n          d.dispose();\n        } catch (e) {\n          errors.push(e);\n        }\n      }\n    }\n    if (errors.length === 1) {\n      throw errors[0];\n    } else if (errors.length > 1) {\n      throw new AggregateError(errors, 'Encountered errors while disposing of store');\n    }\n    return Array.isArray(arg) ? [] : arg;\n  } else if (arg) {\n    arg.dispose();\n    return arg;\n  }\n}\n/**\n * Combine multiple disposable values into a single {@link IDisposable}.\n */\nexport function combinedDisposable(...disposables) {\n  const parent = toDisposable(() => dispose(disposables));\n  setParentOfDisposables(disposables, parent);\n  return parent;\n}\n/**\n * Turn a function that implements dispose into an {@link IDisposable}.\n *\n * @param fn Clean up function, guaranteed to be called only **once**.\n */\nexport function toDisposable(fn) {\n  const self = trackDisposable({\n    dispose: createSingleCallFunction(() => {\n      markAsDisposed(self);\n      fn();\n    })\n  });\n  return self;\n}\n/**\n * Manages a collection of disposable values.\n *\n * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an\n * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a\n * store that has already been disposed of.\n */\nexport let DisposableStore = /*#__PURE__*/(() => {\n  class DisposableStore {\n    static #_ = this.DISABLE_DISPOSED_WARNING = false;\n    constructor() {\n      this._toDispose = new Set();\n      this._isDisposed = false;\n      trackDisposable(this);\n    }\n    /**\n     * Dispose of all registered disposables and mark this object as disposed.\n     *\n     * Any future disposables added to this object will be disposed of on `add`.\n     */\n    dispose() {\n      if (this._isDisposed) {\n        return;\n      }\n      markAsDisposed(this);\n      this._isDisposed = true;\n      this.clear();\n    }\n    /**\n     * @return `true` if this object has been disposed of.\n     */\n    get isDisposed() {\n      return this._isDisposed;\n    }\n    /**\n     * Dispose of all registered disposables but do not mark this object as disposed.\n     */\n    clear() {\n      if (this._toDispose.size === 0) {\n        return;\n      }\n      try {\n        dispose(this._toDispose);\n      } finally {\n        this._toDispose.clear();\n      }\n    }\n    /**\n     * Add a new {@link IDisposable disposable} to the collection.\n     */\n    add(o) {\n      if (!o) {\n        return o;\n      }\n      if (o === this) {\n        throw new Error('Cannot register a disposable on itself!');\n      }\n      setParentOfDisposable(o, this);\n      if (this._isDisposed) {\n        if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\n          console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);\n        }\n      } else {\n        this._toDispose.add(o);\n      }\n      return o;\n    }\n    /**\n     * Deletes the value from the store, but does not dispose it.\n     */\n    deleteAndLeak(o) {\n      if (!o) {\n        return;\n      }\n      if (this._toDispose.has(o)) {\n        this._toDispose.delete(o);\n        setParentOfDisposable(o, null);\n      }\n    }\n  }\n  return DisposableStore;\n})();\n/**\n * Abstract base class for a {@link IDisposable disposable} object.\n *\n * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.\n */\nexport class Disposable {\n  /**\n   * A disposable that does nothing when it is disposed of.\n   *\n   * TODO: This should not be a static property.\n   */\n  static #_ = this.None = Object.freeze({\n    dispose() {}\n  });\n  constructor() {\n    this._store = new DisposableStore();\n    trackDisposable(this);\n    setParentOfDisposable(this._store, this);\n  }\n  dispose() {\n    markAsDisposed(this);\n    this._store.dispose();\n  }\n  /**\n   * Adds `o` to the collection of disposables managed by this object.\n   */\n  _register(o) {\n    if (o === this) {\n      throw new Error('Cannot register a disposable on itself!');\n    }\n    return this._store.add(o);\n  }\n}\n/**\n * Manages the lifecycle of a disposable value that may be changed.\n *\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\n */\nexport class MutableDisposable {\n  constructor() {\n    this._isDisposed = false;\n    trackDisposable(this);\n  }\n  get value() {\n    return this._isDisposed ? undefined : this._value;\n  }\n  set value(value) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    if (value) {\n      setParentOfDisposable(value, this);\n    }\n    this._value = value;\n  }\n  /**\n   * Resets the stored value and disposed of the previously stored value.\n   */\n  clear() {\n    this.value = undefined;\n  }\n  dispose() {\n    this._isDisposed = true;\n    markAsDisposed(this);\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\nexport class RefCountedDisposable {\n  constructor(_disposable) {\n    this._disposable = _disposable;\n    this._counter = 1;\n  }\n  acquire() {\n    this._counter++;\n    return this;\n  }\n  release() {\n    if (--this._counter === 0) {\n      this._disposable.dispose();\n    }\n    return this;\n  }\n}\nexport class ImmortalReference {\n  constructor(object) {\n    this.object = object;\n  }\n  dispose() {}\n}\n/**\n * A map the manages the lifecycle of the values that it stores.\n */\nexport class DisposableMap {\n  constructor() {\n    this._store = new Map();\n    this._isDisposed = false;\n    trackDisposable(this);\n  }\n  /**\n   * Disposes of all stored values and mark this object as disposed.\n   *\n   * Trying to use this object after it has been disposed of is an error.\n   */\n  dispose() {\n    markAsDisposed(this);\n    this._isDisposed = true;\n    this.clearAndDisposeAll();\n  }\n  /**\n   * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.\n   */\n  clearAndDisposeAll() {\n    if (!this._store.size) {\n      return;\n    }\n    try {\n      dispose(this._store.values());\n    } finally {\n      this._store.clear();\n    }\n  }\n  get(key) {\n    return this._store.get(key);\n  }\n  set(key, value, skipDisposeOnOverwrite = false) {\n    if (this._isDisposed) {\n      console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);\n    }\n    if (!skipDisposeOnOverwrite) {\n      this._store.get(key)?.dispose();\n    }\n    this._store.set(key, value);\n  }\n  /**\n   * Delete the value stored for `key` from this map and also dispose of it.\n   */\n  deleteAndDispose(key) {\n    this._store.get(key)?.dispose();\n    this._store.delete(key);\n  }\n  [Symbol.iterator]() {\n    return this._store[Symbol.iterator]();\n  }\n}","map":{"version":3,"names":["createSingleCallFunction","Iterable","TRACK_DISPOSABLES","disposableTracker","setDisposableTracker","tracker","__is_disposable_tracked__","trackDisposable","x","stack","Error","setTimeout","console","log","setParent","child","parent","Disposable","None","markAsDisposed","disposable","markAsSingleton","setParentOfDisposable","setParentOfDisposables","children","singleton","isDisposable","thing","dispose","length","arg","is","errors","d","e","push","AggregateError","Array","isArray","combinedDisposable","disposables","toDisposable","fn","self","DisposableStore","_","DISABLE_DISPOSED_WARNING","constructor","_toDispose","Set","_isDisposed","clear","isDisposed","size","add","o","warn","deleteAndLeak","has","delete","Object","freeze","_store","_register","MutableDisposable","value","undefined","_value","RefCountedDisposable","_disposable","_counter","acquire","release","ImmortalReference","object","DisposableMap","Map","clearAndDisposeAll","values","get","key","set","skipDisposeOnOverwrite","deleteAndDispose","Symbol","iterator"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"],"sourcesContent":["import { createSingleCallFunction } from './functional.js';\nimport { Iterable } from './iterator.js';\n// #region Disposable Tracking\n/**\n * Enables logging of potentially leaked disposables.\n *\n * A disposable is considered leaked if it is not disposed or not registered as the child of\n * another disposable. This tracking is very simple an only works for classes that either\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\n */\nconst TRACK_DISPOSABLES = false;\nlet disposableTracker = null;\nexport function setDisposableTracker(tracker) {\n    disposableTracker = tracker;\n}\nif (TRACK_DISPOSABLES) {\n    const __is_disposable_tracked__ = '__is_disposable_tracked__';\n    setDisposableTracker(new class {\n        trackDisposable(x) {\n            const stack = new Error('Potentially leaked disposable').stack;\n            setTimeout(() => {\n                if (!x[__is_disposable_tracked__]) {\n                    console.log(stack);\n                }\n            }, 3000);\n        }\n        setParent(child, parent) {\n            if (child && child !== Disposable.None) {\n                try {\n                    child[__is_disposable_tracked__] = true;\n                }\n                catch {\n                    // noop\n                }\n            }\n        }\n        markAsDisposed(disposable) {\n            if (disposable && disposable !== Disposable.None) {\n                try {\n                    disposable[__is_disposable_tracked__] = true;\n                }\n                catch {\n                    // noop\n                }\n            }\n        }\n        markAsSingleton(disposable) { }\n    });\n}\nexport function trackDisposable(x) {\n    disposableTracker?.trackDisposable(x);\n    return x;\n}\nexport function markAsDisposed(disposable) {\n    disposableTracker?.markAsDisposed(disposable);\n}\nfunction setParentOfDisposable(child, parent) {\n    disposableTracker?.setParent(child, parent);\n}\nfunction setParentOfDisposables(children, parent) {\n    if (!disposableTracker) {\n        return;\n    }\n    for (const child of children) {\n        disposableTracker.setParent(child, parent);\n    }\n}\n/**\n * Indicates that the given object is a singleton which does not need to be disposed.\n*/\nexport function markAsSingleton(singleton) {\n    disposableTracker?.markAsSingleton(singleton);\n    return singleton;\n}\n/**\n * Check if `thing` is {@link IDisposable disposable}.\n */\nexport function isDisposable(thing) {\n    return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;\n}\nexport function dispose(arg) {\n    if (Iterable.is(arg)) {\n        const errors = [];\n        for (const d of arg) {\n            if (d) {\n                try {\n                    d.dispose();\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n            }\n        }\n        if (errors.length === 1) {\n            throw errors[0];\n        }\n        else if (errors.length > 1) {\n            throw new AggregateError(errors, 'Encountered errors while disposing of store');\n        }\n        return Array.isArray(arg) ? [] : arg;\n    }\n    else if (arg) {\n        arg.dispose();\n        return arg;\n    }\n}\n/**\n * Combine multiple disposable values into a single {@link IDisposable}.\n */\nexport function combinedDisposable(...disposables) {\n    const parent = toDisposable(() => dispose(disposables));\n    setParentOfDisposables(disposables, parent);\n    return parent;\n}\n/**\n * Turn a function that implements dispose into an {@link IDisposable}.\n *\n * @param fn Clean up function, guaranteed to be called only **once**.\n */\nexport function toDisposable(fn) {\n    const self = trackDisposable({\n        dispose: createSingleCallFunction(() => {\n            markAsDisposed(self);\n            fn();\n        })\n    });\n    return self;\n}\n/**\n * Manages a collection of disposable values.\n *\n * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an\n * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a\n * store that has already been disposed of.\n */\nexport class DisposableStore {\n    static { this.DISABLE_DISPOSED_WARNING = false; }\n    constructor() {\n        this._toDispose = new Set();\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    /**\n     * Dispose of all registered disposables and mark this object as disposed.\n     *\n     * Any future disposables added to this object will be disposed of on `add`.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        markAsDisposed(this);\n        this._isDisposed = true;\n        this.clear();\n    }\n    /**\n     * @return `true` if this object has been disposed of.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of all registered disposables but do not mark this object as disposed.\n     */\n    clear() {\n        if (this._toDispose.size === 0) {\n            return;\n        }\n        try {\n            dispose(this._toDispose);\n        }\n        finally {\n            this._toDispose.clear();\n        }\n    }\n    /**\n     * Add a new {@link IDisposable disposable} to the collection.\n     */\n    add(o) {\n        if (!o) {\n            return o;\n        }\n        if (o === this) {\n            throw new Error('Cannot register a disposable on itself!');\n        }\n        setParentOfDisposable(o, this);\n        if (this._isDisposed) {\n            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\n                console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);\n            }\n        }\n        else {\n            this._toDispose.add(o);\n        }\n        return o;\n    }\n    /**\n     * Deletes the value from the store, but does not dispose it.\n     */\n    deleteAndLeak(o) {\n        if (!o) {\n            return;\n        }\n        if (this._toDispose.has(o)) {\n            this._toDispose.delete(o);\n            setParentOfDisposable(o, null);\n        }\n    }\n}\n/**\n * Abstract base class for a {@link IDisposable disposable} object.\n *\n * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.\n */\nexport class Disposable {\n    /**\n     * A disposable that does nothing when it is disposed of.\n     *\n     * TODO: This should not be a static property.\n     */\n    static { this.None = Object.freeze({ dispose() { } }); }\n    constructor() {\n        this._store = new DisposableStore();\n        trackDisposable(this);\n        setParentOfDisposable(this._store, this);\n    }\n    dispose() {\n        markAsDisposed(this);\n        this._store.dispose();\n    }\n    /**\n     * Adds `o` to the collection of disposables managed by this object.\n     */\n    _register(o) {\n        if (o === this) {\n            throw new Error('Cannot register a disposable on itself!');\n        }\n        return this._store.add(o);\n    }\n}\n/**\n * Manages the lifecycle of a disposable value that may be changed.\n *\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\n */\nexport class MutableDisposable {\n    constructor() {\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    get value() {\n        return this._isDisposed ? undefined : this._value;\n    }\n    set value(value) {\n        if (this._isDisposed || value === this._value) {\n            return;\n        }\n        this._value?.dispose();\n        if (value) {\n            setParentOfDisposable(value, this);\n        }\n        this._value = value;\n    }\n    /**\n     * Resets the stored value and disposed of the previously stored value.\n     */\n    clear() {\n        this.value = undefined;\n    }\n    dispose() {\n        this._isDisposed = true;\n        markAsDisposed(this);\n        this._value?.dispose();\n        this._value = undefined;\n    }\n}\nexport class RefCountedDisposable {\n    constructor(_disposable) {\n        this._disposable = _disposable;\n        this._counter = 1;\n    }\n    acquire() {\n        this._counter++;\n        return this;\n    }\n    release() {\n        if (--this._counter === 0) {\n            this._disposable.dispose();\n        }\n        return this;\n    }\n}\nexport class ImmortalReference {\n    constructor(object) {\n        this.object = object;\n    }\n    dispose() { }\n}\n/**\n * A map the manages the lifecycle of the values that it stores.\n */\nexport class DisposableMap {\n    constructor() {\n        this._store = new Map();\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    /**\n     * Disposes of all stored values and mark this object as disposed.\n     *\n     * Trying to use this object after it has been disposed of is an error.\n     */\n    dispose() {\n        markAsDisposed(this);\n        this._isDisposed = true;\n        this.clearAndDisposeAll();\n    }\n    /**\n     * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.\n     */\n    clearAndDisposeAll() {\n        if (!this._store.size) {\n            return;\n        }\n        try {\n            dispose(this._store.values());\n        }\n        finally {\n            this._store.clear();\n        }\n    }\n    get(key) {\n        return this._store.get(key);\n    }\n    set(key, value, skipDisposeOnOverwrite = false) {\n        if (this._isDisposed) {\n            console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);\n        }\n        if (!skipDisposeOnOverwrite) {\n            this._store.get(key)?.dispose();\n        }\n        this._store.set(key, value);\n    }\n    /**\n     * Delete the value stored for `key` from this map and also dispose of it.\n     */\n    deleteAndDispose(key) {\n        this._store.get(key)?.dispose();\n        this._store.delete(key);\n    }\n    [Symbol.iterator]() {\n        return this._store[Symbol.iterator]();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}