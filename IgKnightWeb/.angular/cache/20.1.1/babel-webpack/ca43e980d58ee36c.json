{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport let OvertypingCapturer = /*#__PURE__*/(() => {\n  class OvertypingCapturer {\n    static #_ = this._maxSelectionLength = 51200;\n    constructor(editor, suggestModel) {\n      this._disposables = new DisposableStore();\n      this._lastOvertyped = [];\n      this._locked = false;\n      this._disposables.add(editor.onWillType(() => {\n        if (this._locked || !editor.hasModel()) {\n          return;\n        }\n        const selections = editor.getSelections();\n        const selectionsLength = selections.length;\n        // Check if it will overtype any selections\n        let willOvertype = false;\n        for (let i = 0; i < selectionsLength; i++) {\n          if (!selections[i].isEmpty()) {\n            willOvertype = true;\n            break;\n          }\n        }\n        if (!willOvertype) {\n          if (this._lastOvertyped.length !== 0) {\n            this._lastOvertyped.length = 0;\n          }\n          return;\n        }\n        this._lastOvertyped = [];\n        const model = editor.getModel();\n        for (let i = 0; i < selectionsLength; i++) {\n          const selection = selections[i];\n          // Check for overtyping capturer restrictions\n          if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n            return;\n          }\n          this._lastOvertyped[i] = {\n            value: model.getValueInRange(selection),\n            multiline: selection.startLineNumber !== selection.endLineNumber\n          };\n        }\n      }));\n      this._disposables.add(suggestModel.onDidTrigger(e => {\n        this._locked = true;\n      }));\n      this._disposables.add(suggestModel.onDidCancel(e => {\n        this._locked = false;\n      }));\n    }\n    getLastOvertypedInfo(idx) {\n      if (idx >= 0 && idx < this._lastOvertyped.length) {\n        return this._lastOvertyped[idx];\n      }\n      return undefined;\n    }\n    dispose() {\n      this._disposables.dispose();\n    }\n  }\n  return OvertypingCapturer;\n})();","map":{"version":3,"names":["DisposableStore","OvertypingCapturer","_","_maxSelectionLength","constructor","editor","suggestModel","_disposables","_lastOvertyped","_locked","add","onWillType","hasModel","selections","getSelections","selectionsLength","length","willOvertype","i","isEmpty","model","getModel","selection","getValueLengthInRange","value","getValueInRange","multiline","startLineNumber","endLineNumber","onDidTrigger","e","onDidCancel","getLastOvertypedInfo","idx","undefined","dispose"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestOvertypingCapturer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport class OvertypingCapturer {\n    static { this._maxSelectionLength = 51200; }\n    constructor(editor, suggestModel) {\n        this._disposables = new DisposableStore();\n        this._lastOvertyped = [];\n        this._locked = false;\n        this._disposables.add(editor.onWillType(() => {\n            if (this._locked || !editor.hasModel()) {\n                return;\n            }\n            const selections = editor.getSelections();\n            const selectionsLength = selections.length;\n            // Check if it will overtype any selections\n            let willOvertype = false;\n            for (let i = 0; i < selectionsLength; i++) {\n                if (!selections[i].isEmpty()) {\n                    willOvertype = true;\n                    break;\n                }\n            }\n            if (!willOvertype) {\n                if (this._lastOvertyped.length !== 0) {\n                    this._lastOvertyped.length = 0;\n                }\n                return;\n            }\n            this._lastOvertyped = [];\n            const model = editor.getModel();\n            for (let i = 0; i < selectionsLength; i++) {\n                const selection = selections[i];\n                // Check for overtyping capturer restrictions\n                if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n                    return;\n                }\n                this._lastOvertyped[i] = { value: model.getValueInRange(selection), multiline: selection.startLineNumber !== selection.endLineNumber };\n            }\n        }));\n        this._disposables.add(suggestModel.onDidTrigger(e => {\n            this._locked = true;\n        }));\n        this._disposables.add(suggestModel.onDidCancel(e => {\n            this._locked = false;\n        }));\n    }\n    getLastOvertypedInfo(idx) {\n        if (idx >= 0 && idx < this._lastOvertyped.length) {\n            return this._lastOvertyped[idx];\n        }\n        return undefined;\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,sCAAsC;AACtE,WAAaC,kBAAkB;EAAxB,MAAMA,kBAAkB,CAAC;IAAA,QAAAC,CAAA,GACnB,IAAI,CAACC,mBAAmB,GAAG,KAAK;IACzCC,WAAWA,CAACC,MAAM,EAAEC,YAAY,EAAE;MAC9B,IAAI,CAACC,YAAY,GAAG,IAAIP,eAAe,CAAC,CAAC;MACzC,IAAI,CAACQ,cAAc,GAAG,EAAE;MACxB,IAAI,CAACC,OAAO,GAAG,KAAK;MACpB,IAAI,CAACF,YAAY,CAACG,GAAG,CAACL,MAAM,CAACM,UAAU,CAAC,MAAM;QAC1C,IAAI,IAAI,CAACF,OAAO,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE;UACpC;QACJ;QACA,MAAMC,UAAU,GAAGR,MAAM,CAACS,aAAa,CAAC,CAAC;QACzC,MAAMC,gBAAgB,GAAGF,UAAU,CAACG,MAAM;QAC1C;QACA,IAAIC,YAAY,GAAG,KAAK;QACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,EAAEG,CAAC,EAAE,EAAE;UACvC,IAAI,CAACL,UAAU,CAACK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;YAC1BF,YAAY,GAAG,IAAI;YACnB;UACJ;QACJ;QACA,IAAI,CAACA,YAAY,EAAE;UACf,IAAI,IAAI,CAACT,cAAc,CAACQ,MAAM,KAAK,CAAC,EAAE;YAClC,IAAI,CAACR,cAAc,CAACQ,MAAM,GAAG,CAAC;UAClC;UACA;QACJ;QACA,IAAI,CAACR,cAAc,GAAG,EAAE;QACxB,MAAMY,KAAK,GAAGf,MAAM,CAACgB,QAAQ,CAAC,CAAC;QAC/B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,EAAEG,CAAC,EAAE,EAAE;UACvC,MAAMI,SAAS,GAAGT,UAAU,CAACK,CAAC,CAAC;UAC/B;UACA,IAAIE,KAAK,CAACG,qBAAqB,CAACD,SAAS,CAAC,GAAGrB,kBAAkB,CAACE,mBAAmB,EAAE;YACjF;UACJ;UACA,IAAI,CAACK,cAAc,CAACU,CAAC,CAAC,GAAG;YAAEM,KAAK,EAAEJ,KAAK,CAACK,eAAe,CAACH,SAAS,CAAC;YAAEI,SAAS,EAAEJ,SAAS,CAACK,eAAe,KAAKL,SAAS,CAACM;UAAc,CAAC;QAC1I;MACJ,CAAC,CAAC,CAAC;MACH,IAAI,CAACrB,YAAY,CAACG,GAAG,CAACJ,YAAY,CAACuB,YAAY,CAACC,CAAC,IAAI;QACjD,IAAI,CAACrB,OAAO,GAAG,IAAI;MACvB,CAAC,CAAC,CAAC;MACH,IAAI,CAACF,YAAY,CAACG,GAAG,CAACJ,YAAY,CAACyB,WAAW,CAACD,CAAC,IAAI;QAChD,IAAI,CAACrB,OAAO,GAAG,KAAK;MACxB,CAAC,CAAC,CAAC;IACP;IACAuB,oBAAoBA,CAACC,GAAG,EAAE;MACtB,IAAIA,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACzB,cAAc,CAACQ,MAAM,EAAE;QAC9C,OAAO,IAAI,CAACR,cAAc,CAACyB,GAAG,CAAC;MACnC;MACA,OAAOC,SAAS;IACpB;IACAC,OAAOA,CAAA,EAAG;MACN,IAAI,CAAC5B,YAAY,CAAC4B,OAAO,CAAC,CAAC;IAC/B;EACJ;EAAC,OArDYlC,kBAAkB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}