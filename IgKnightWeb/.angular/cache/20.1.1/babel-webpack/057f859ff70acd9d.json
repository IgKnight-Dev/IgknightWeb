{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { observableFromEvent } from '../../../base/common/observable.js';\nexport let LanguageService = /*#__PURE__*/(() => {\n  class LanguageService extends Disposable {\n    static #_ = this.instanceCount = 0;\n    constructor(warnOnOverwrite = false) {\n      super();\n      this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n      this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n      this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n      this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n      this._onDidChange = this._register(new Emitter({\n        leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */\n      }));\n      this.onDidChange = this._onDidChange.event;\n      this._requestedBasicLanguages = new Set();\n      this._requestedRichLanguages = new Set();\n      LanguageService.instanceCount++;\n      this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n      this.languageIdCodec = this._registry.languageIdCodec;\n      this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n      LanguageService.instanceCount--;\n      super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n      return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n      return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n      return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n      const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n      return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n      return new LanguageSelection(this.onDidChange, () => {\n        return this._createAndGetLanguageIdentifier(languageId);\n      });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n      return new LanguageSelection(this.onDidChange, () => {\n        const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return this._createAndGetLanguageIdentifier(languageId);\n      });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n      if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n        // Fall back to plain text if language is unknown\n        languageId = PLAINTEXT_LANGUAGE_ID;\n      }\n      return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n      if (!this._requestedBasicLanguages.has(languageId)) {\n        this._requestedBasicLanguages.add(languageId);\n        this._onDidRequestBasicLanguageFeatures.fire(languageId);\n      }\n    }\n    requestRichLanguageFeatures(languageId) {\n      if (!this._requestedRichLanguages.has(languageId)) {\n        this._requestedRichLanguages.add(languageId);\n        // Ensure basic features are requested\n        this.requestBasicLanguageFeatures(languageId);\n        // Ensure tokenizers are created\n        TokenizationRegistry.getOrCreate(languageId);\n        this._onDidRequestRichLanguageFeatures.fire(languageId);\n      }\n    }\n  }\n  return LanguageService;\n})();\nclass LanguageSelection {\n  constructor(onDidChangeLanguages, selector) {\n    this._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n    this.onDidChange = Event.fromObservable(this._value);\n  }\n  get languageId() {\n    return this._value.get();\n  }\n}","map":{"version":3,"names":["Emitter","Event","Disposable","LanguagesRegistry","firstOrDefault","TokenizationRegistry","PLAINTEXT_LANGUAGE_ID","observableFromEvent","LanguageService","_","instanceCount","constructor","warnOnOverwrite","_onDidRequestBasicLanguageFeatures","_register","onDidRequestBasicLanguageFeatures","event","_onDidRequestRichLanguageFeatures","onDidRequestRichLanguageFeatures","_onDidChange","leakWarningThreshold","onDidChange","_requestedBasicLanguages","Set","_requestedRichLanguages","_registry","languageIdCodec","fire","dispose","isRegisteredLanguageId","languageId","getLanguageIdByLanguageName","languageName","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource","firstLine","languageIds","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","requestBasicLanguageFeatures","has","add","requestRichLanguageFeatures","getOrCreate","onDidChangeLanguages","selector","_value","fromObservable","get"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { observableFromEvent } from '../../../base/common/observable.js';\nexport class LanguageService extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n        this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        this._requestedBasicLanguages = new Set();\n        this._requestedRichLanguages = new Set();\n        LanguageService.instanceCount++;\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n        if (!this._requestedBasicLanguages.has(languageId)) {\n            this._requestedBasicLanguages.add(languageId);\n            this._onDidRequestBasicLanguageFeatures.fire(languageId);\n        }\n    }\n    requestRichLanguageFeatures(languageId) {\n        if (!this._requestedRichLanguages.has(languageId)) {\n            this._requestedRichLanguages.add(languageId);\n            // Ensure basic features are requested\n            this.requestBasicLanguageFeatures(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            this._onDidRequestRichLanguageFeatures.fire(languageId);\n        }\n    }\n}\nclass LanguageSelection {\n    constructor(onDidChangeLanguages, selector) {\n        this._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n        this.onDidChange = Event.fromObservable(this._value);\n    }\n    get languageId() {\n        return this._value.get();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}