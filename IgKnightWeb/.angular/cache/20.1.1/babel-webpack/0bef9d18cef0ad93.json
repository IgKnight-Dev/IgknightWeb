{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nclass CursorState {\n  constructor(selections) {\n    this.selections = selections;\n  }\n  equals(other) {\n    const thisLen = this.selections.length;\n    const otherLen = other.selections.length;\n    if (thisLen !== otherLen) {\n      return false;\n    }\n    for (let i = 0; i < thisLen; i++) {\n      if (!this.selections[i].equalsSelection(other.selections[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nclass StackElement {\n  constructor(cursorState, scrollTop, scrollLeft) {\n    this.cursorState = cursorState;\n    this.scrollTop = scrollTop;\n    this.scrollLeft = scrollLeft;\n  }\n}\nexport let CursorUndoRedoController = /*#__PURE__*/(() => {\n  class CursorUndoRedoController extends Disposable {\n    static #_ = this.ID = 'editor.contrib.cursorUndoRedoController';\n    static get(editor) {\n      return editor.getContribution(CursorUndoRedoController.ID);\n    }\n    constructor(editor) {\n      super();\n      this._editor = editor;\n      this._isCursorUndoRedo = false;\n      this._undoStack = [];\n      this._redoStack = [];\n      this._register(editor.onDidChangeModel(e => {\n        this._undoStack = [];\n        this._redoStack = [];\n      }));\n      this._register(editor.onDidChangeModelContent(e => {\n        this._undoStack = [];\n        this._redoStack = [];\n      }));\n      this._register(editor.onDidChangeCursorSelection(e => {\n        if (this._isCursorUndoRedo) {\n          return;\n        }\n        if (!e.oldSelections) {\n          return;\n        }\n        if (e.oldModelVersionId !== e.modelVersionId) {\n          return;\n        }\n        const prevState = new CursorState(e.oldSelections);\n        const isEqualToLastUndoStack = this._undoStack.length > 0 && this._undoStack[this._undoStack.length - 1].cursorState.equals(prevState);\n        if (!isEqualToLastUndoStack) {\n          this._undoStack.push(new StackElement(prevState, editor.getScrollTop(), editor.getScrollLeft()));\n          this._redoStack = [];\n          if (this._undoStack.length > 50) {\n            // keep the cursor undo stack bounded\n            this._undoStack.shift();\n          }\n        }\n      }));\n    }\n    cursorUndo() {\n      if (!this._editor.hasModel() || this._undoStack.length === 0) {\n        return;\n      }\n      this._redoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));\n      this._applyState(this._undoStack.pop());\n    }\n    cursorRedo() {\n      if (!this._editor.hasModel() || this._redoStack.length === 0) {\n        return;\n      }\n      this._undoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));\n      this._applyState(this._redoStack.pop());\n    }\n    _applyState(stackElement) {\n      this._isCursorUndoRedo = true;\n      this._editor.setSelections(stackElement.cursorState.selections);\n      this._editor.setScrollPosition({\n        scrollTop: stackElement.scrollTop,\n        scrollLeft: stackElement.scrollLeft\n      });\n      this._isCursorUndoRedo = false;\n    }\n  }\n  return CursorUndoRedoController;\n})();\nexport class CursorUndo extends EditorAction {\n  constructor() {\n    super({\n      id: 'cursorUndo',\n      label: nls.localize('cursor.undo', \"Cursor Undo\"),\n      alias: 'Cursor Undo',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 51 /* KeyCode.KeyU */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    CursorUndoRedoController.get(editor)?.cursorUndo();\n  }\n}\nexport class CursorRedo extends EditorAction {\n  constructor() {\n    super({\n      id: 'cursorRedo',\n      label: nls.localize('cursor.redo', \"Cursor Redo\"),\n      alias: 'Cursor Redo',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor, args) {\n    CursorUndoRedoController.get(editor)?.cursorRedo();\n  }\n}\nregisterEditorContribution(CursorUndoRedoController.ID, CursorUndoRedoController, 0 /* EditorContributionInstantiation.Eager */); // eager because it needs to listen to record cursor state ASAP\nregisterEditorAction(CursorUndo);\nregisterEditorAction(CursorRedo);","map":{"version":3,"names":["Disposable","EditorAction","registerEditorAction","registerEditorContribution","EditorContextKeys","nls","CursorState","constructor","selections","equals","other","thisLen","length","otherLen","i","equalsSelection","StackElement","cursorState","scrollTop","scrollLeft","CursorUndoRedoController","_","ID","get","editor","getContribution","_editor","_isCursorUndoRedo","_undoStack","_redoStack","_register","onDidChangeModel","e","onDidChangeModelContent","onDidChangeCursorSelection","oldSelections","oldModelVersionId","modelVersionId","prevState","isEqualToLastUndoStack","push","getScrollTop","getScrollLeft","shift","cursorUndo","hasModel","getSelections","_applyState","pop","cursorRedo","stackElement","setSelections","setScrollPosition","CursorUndo","id","label","localize","alias","precondition","undefined","kbOpts","kbExpr","textInputFocus","primary","weight","run","accessor","args","CursorRedo"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nclass CursorState {\n    constructor(selections) {\n        this.selections = selections;\n    }\n    equals(other) {\n        const thisLen = this.selections.length;\n        const otherLen = other.selections.length;\n        if (thisLen !== otherLen) {\n            return false;\n        }\n        for (let i = 0; i < thisLen; i++) {\n            if (!this.selections[i].equalsSelection(other.selections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass StackElement {\n    constructor(cursorState, scrollTop, scrollLeft) {\n        this.cursorState = cursorState;\n        this.scrollTop = scrollTop;\n        this.scrollLeft = scrollLeft;\n    }\n}\nexport class CursorUndoRedoController extends Disposable {\n    static { this.ID = 'editor.contrib.cursorUndoRedoController'; }\n    static get(editor) {\n        return editor.getContribution(CursorUndoRedoController.ID);\n    }\n    constructor(editor) {\n        super();\n        this._editor = editor;\n        this._isCursorUndoRedo = false;\n        this._undoStack = [];\n        this._redoStack = [];\n        this._register(editor.onDidChangeModel((e) => {\n            this._undoStack = [];\n            this._redoStack = [];\n        }));\n        this._register(editor.onDidChangeModelContent((e) => {\n            this._undoStack = [];\n            this._redoStack = [];\n        }));\n        this._register(editor.onDidChangeCursorSelection((e) => {\n            if (this._isCursorUndoRedo) {\n                return;\n            }\n            if (!e.oldSelections) {\n                return;\n            }\n            if (e.oldModelVersionId !== e.modelVersionId) {\n                return;\n            }\n            const prevState = new CursorState(e.oldSelections);\n            const isEqualToLastUndoStack = (this._undoStack.length > 0 && this._undoStack[this._undoStack.length - 1].cursorState.equals(prevState));\n            if (!isEqualToLastUndoStack) {\n                this._undoStack.push(new StackElement(prevState, editor.getScrollTop(), editor.getScrollLeft()));\n                this._redoStack = [];\n                if (this._undoStack.length > 50) {\n                    // keep the cursor undo stack bounded\n                    this._undoStack.shift();\n                }\n            }\n        }));\n    }\n    cursorUndo() {\n        if (!this._editor.hasModel() || this._undoStack.length === 0) {\n            return;\n        }\n        this._redoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));\n        this._applyState(this._undoStack.pop());\n    }\n    cursorRedo() {\n        if (!this._editor.hasModel() || this._redoStack.length === 0) {\n            return;\n        }\n        this._undoStack.push(new StackElement(new CursorState(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft()));\n        this._applyState(this._redoStack.pop());\n    }\n    _applyState(stackElement) {\n        this._isCursorUndoRedo = true;\n        this._editor.setSelections(stackElement.cursorState.selections);\n        this._editor.setScrollPosition({\n            scrollTop: stackElement.scrollTop,\n            scrollLeft: stackElement.scrollLeft\n        });\n        this._isCursorUndoRedo = false;\n    }\n}\nexport class CursorUndo extends EditorAction {\n    constructor() {\n        super({\n            id: 'cursorUndo',\n            label: nls.localize('cursor.undo', \"Cursor Undo\"),\n            alias: 'Cursor Undo',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 51 /* KeyCode.KeyU */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        CursorUndoRedoController.get(editor)?.cursorUndo();\n    }\n}\nexport class CursorRedo extends EditorAction {\n    constructor() {\n        super({\n            id: 'cursorRedo',\n            label: nls.localize('cursor.redo', \"Cursor Redo\"),\n            alias: 'Cursor Redo',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor, args) {\n        CursorUndoRedoController.get(editor)?.cursorRedo();\n    }\n}\nregisterEditorContribution(CursorUndoRedoController.ID, CursorUndoRedoController, 0 /* EditorContributionInstantiation.Eager */); // eager because it needs to listen to record cursor state ASAP\nregisterEditorAction(CursorUndo);\nregisterEditorAction(CursorRedo);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}