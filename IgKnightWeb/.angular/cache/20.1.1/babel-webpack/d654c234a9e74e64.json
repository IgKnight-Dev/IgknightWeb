{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = /*#__PURE__*/(() => {\n  let FoldingController = class FoldingController extends Disposable {\n    static #_ = FoldingController_1 = this;\n    static #_2 = this.ID = 'editor.contrib.folding';\n    static get(editor) {\n      return editor.getContribution(FoldingController_1.ID);\n    }\n    static getFoldingRangeProviders(languageFeaturesService, model) {\n      const foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n      return FoldingController_1._foldingRangeSelector?.(foldingRangeProviders, model) ?? foldingRangeProviders;\n    }\n    constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n      super();\n      this.contextKeyService = contextKeyService;\n      this.languageConfigurationService = languageConfigurationService;\n      this.languageFeaturesService = languageFeaturesService;\n      this.localToDispose = this._register(new DisposableStore());\n      this.editor = editor;\n      this._foldingLimitReporter = new RangesLimitReporter(editor);\n      const options = this.editor.getOptions();\n      this._isEnabled = options.get(43 /* EditorOption.folding */);\n      this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n      this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n      this._restoringViewState = false;\n      this._currentModelHasFoldedImports = false;\n      this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n      this.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', {\n        min: 200\n      });\n      this.foldingModel = null;\n      this.hiddenRangeModel = null;\n      this.rangeProvider = null;\n      this.foldingRegionPromise = null;\n      this.foldingModelPromise = null;\n      this.updateScheduler = null;\n      this.cursorChangedScheduler = null;\n      this.mouseDownInfo = null;\n      this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n      this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n      this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n      this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n      this.foldingEnabled.set(this._isEnabled);\n      this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n      this._register(this.editor.onDidChangeConfiguration(e => {\n        if (e.hasChanged(43 /* EditorOption.folding */)) {\n          this._isEnabled = this.editor.getOptions().get(43 /* EditorOption.folding */);\n          this.foldingEnabled.set(this._isEnabled);\n          this.onModelChanged();\n        }\n        if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n          this.onModelChanged();\n        }\n        if (e.hasChanged(111 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n          const options = this.editor.getOptions();\n          this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n          this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n          this.triggerFoldingModelChanged();\n        }\n        if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n          this._useFoldingProviders = this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n          this.onFoldingStrategyChanged();\n        }\n        if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n          this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n        }\n        if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n          this._foldingImportsByDefault = this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n        }\n      }));\n      this.onModelChanged();\n    }\n    /**\n     * Store view state.\n     */\n    saveViewState() {\n      const model = this.editor.getModel();\n      if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n        return {};\n      }\n      if (this.foldingModel) {\n        // disposed ?\n        const collapsedRegions = this.foldingModel.getMemento();\n        const provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n        return {\n          collapsedRegions,\n          lineCount: model.getLineCount(),\n          provider,\n          foldedImports: this._currentModelHasFoldedImports\n        };\n      }\n      return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n    restoreViewState(state) {\n      const model = this.editor.getModel();\n      if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n        return;\n      }\n      if (!state) {\n        return;\n      }\n      this._currentModelHasFoldedImports = !!state.foldedImports;\n      if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n        this._restoringViewState = true;\n        try {\n          this.foldingModel.applyMemento(state.collapsedRegions);\n        } finally {\n          this._restoringViewState = false;\n        }\n      }\n    }\n    onModelChanged() {\n      this.localToDispose.clear();\n      const model = this.editor.getModel();\n      if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n        // huge files get no view model, so they cannot support hidden areas\n        return;\n      }\n      this._currentModelHasFoldedImports = false;\n      this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n      this.localToDispose.add(this.foldingModel);\n      this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n      this.localToDispose.add(this.hiddenRangeModel);\n      this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n      this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n      this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n      this.localToDispose.add(this.cursorChangedScheduler);\n      this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n      this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n      this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n      this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n      this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n      this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n      this.localToDispose.add({\n        dispose: () => {\n          if (this.foldingRegionPromise) {\n            this.foldingRegionPromise.cancel();\n            this.foldingRegionPromise = null;\n          }\n          this.updateScheduler?.cancel();\n          this.updateScheduler = null;\n          this.foldingModel = null;\n          this.foldingModelPromise = null;\n          this.hiddenRangeModel = null;\n          this.cursorChangedScheduler = null;\n          this.rangeProvider?.dispose();\n          this.rangeProvider = null;\n        }\n      });\n      this.triggerFoldingModelChanged();\n    }\n    onFoldingStrategyChanged() {\n      this.rangeProvider?.dispose();\n      this.rangeProvider = null;\n      this.triggerFoldingModelChanged();\n    }\n    getRangeProvider(editorModel) {\n      if (this.rangeProvider) {\n        return this.rangeProvider;\n      }\n      const indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n      this.rangeProvider = indentRangeProvider; // fallback\n      if (this._useFoldingProviders && this.foldingModel) {\n        const selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n        if (selectedProviders.length > 0) {\n          this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n        }\n      }\n      return this.rangeProvider;\n    }\n    getFoldingModel() {\n      return this.foldingModelPromise;\n    }\n    onDidChangeModelContent(e) {\n      this.hiddenRangeModel?.notifyChangeModelContent(e);\n      this.triggerFoldingModelChanged();\n    }\n    triggerFoldingModelChanged() {\n      if (this.updateScheduler) {\n        if (this.foldingRegionPromise) {\n          this.foldingRegionPromise.cancel();\n          this.foldingRegionPromise = null;\n        }\n        this.foldingModelPromise = this.updateScheduler.trigger(() => {\n          const foldingModel = this.foldingModel;\n          if (!foldingModel) {\n            // null if editor has been disposed, or folding turned off\n            return null;\n          }\n          const sw = new StopWatch();\n          const provider = this.getRangeProvider(foldingModel.textModel);\n          const foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n          return foldingRegionPromise.then(foldingRanges => {\n            if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) {\n              // new request or cancelled in the meantime?\n              let scrollState;\n              if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n                const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                if (hasChanges) {\n                  scrollState = StableEditorScrollState.capture(this.editor);\n                  this._currentModelHasFoldedImports = hasChanges;\n                }\n              }\n              // some cursors might have moved into hidden regions, make sure they are in expanded regions\n              const selections = this.editor.getSelections();\n              foldingModel.update(foldingRanges, toSelectedLines(selections));\n              scrollState?.restore(this.editor);\n              // update debounce info\n              const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n              if (this.updateScheduler) {\n                this.updateScheduler.defaultDelay = newValue;\n              }\n            }\n            return foldingModel;\n          });\n        }).then(undefined, err => {\n          onUnexpectedError(err);\n          return null;\n        });\n      }\n    }\n    onHiddenRangesChanges(hiddenRanges) {\n      if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n        const selections = this.editor.getSelections();\n        if (selections) {\n          if (this.hiddenRangeModel.adjustSelections(selections)) {\n            this.editor.setSelections(selections);\n          }\n        }\n      }\n      this.editor.setHiddenAreas(hiddenRanges, this);\n    }\n    onCursorPositionChanged() {\n      if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n        this.cursorChangedScheduler.schedule();\n      }\n    }\n    revealCursor() {\n      const foldingModel = this.getFoldingModel();\n      if (!foldingModel) {\n        return;\n      }\n      foldingModel.then(foldingModel => {\n        if (foldingModel) {\n          const selections = this.editor.getSelections();\n          if (selections && selections.length > 0) {\n            const toToggle = [];\n            for (const selection of selections) {\n              const lineNumber = selection.selectionStartLineNumber;\n              if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n                toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n              }\n            }\n            if (toToggle.length) {\n              foldingModel.toggleCollapseState(toToggle);\n              this.reveal(selections[0].getPosition());\n            }\n          }\n        }\n      }).then(undefined, onUnexpectedError);\n    }\n    onEditorMouseDown(e) {\n      this.mouseDownInfo = null;\n      if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n        return;\n      }\n      if (!e.event.leftButton && !e.event.middleButton) {\n        return;\n      }\n      const range = e.target.range;\n      let iconClicked = false;\n      switch (e.target.type) {\n        case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */:\n          {\n            const data = e.target.detail;\n            const offsetLeftInGutter = e.target.element.offsetLeft;\n            const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n            // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n            // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n            if (gutterOffsetX < 4) {\n              // the whitespace between the border and the real folding icon border is 4px\n              return;\n            }\n            iconClicked = true;\n            break;\n          }\n        case 7 /* MouseTargetType.CONTENT_EMPTY */:\n          {\n            if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n              const data = e.target.detail;\n              if (!data.isAfterLines) {\n                break;\n              }\n            }\n            return;\n          }\n        case 6 /* MouseTargetType.CONTENT_TEXT */:\n          {\n            if (this.hiddenRangeModel.hasRanges()) {\n              const model = this.editor.getModel();\n              if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                break;\n              }\n            }\n            return;\n          }\n        default:\n          return;\n      }\n      this.mouseDownInfo = {\n        lineNumber: range.startLineNumber,\n        iconClicked\n      };\n    }\n    onEditorMouseUp(e) {\n      const foldingModel = this.foldingModel;\n      if (!foldingModel || !this.mouseDownInfo || !e.target) {\n        return;\n      }\n      const lineNumber = this.mouseDownInfo.lineNumber;\n      const iconClicked = this.mouseDownInfo.iconClicked;\n      const range = e.target.range;\n      if (!range || range.startLineNumber !== lineNumber) {\n        return;\n      }\n      if (iconClicked) {\n        if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n          return;\n        }\n      } else {\n        const model = this.editor.getModel();\n        if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n          return;\n        }\n      }\n      const region = foldingModel.getRegionAtLine(lineNumber);\n      if (region && region.startLineNumber === lineNumber) {\n        const isCollapsed = region.isCollapsed;\n        if (iconClicked || isCollapsed) {\n          const surrounding = e.event.altKey;\n          let toToggle = [];\n          if (surrounding) {\n            const filter = otherRegion => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n            const toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n            for (const r of toMaybeToggle) {\n              if (r.isCollapsed) {\n                toToggle.push(r);\n              }\n            }\n            // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n            if (toToggle.length === 0) {\n              toToggle = toMaybeToggle;\n            }\n          } else {\n            const recursive = e.event.middleButton || e.event.shiftKey;\n            if (recursive) {\n              for (const r of foldingModel.getRegionsInside(region)) {\n                if (r.isCollapsed === isCollapsed) {\n                  toToggle.push(r);\n                }\n              }\n            }\n            // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n            if (isCollapsed || !recursive || toToggle.length === 0) {\n              toToggle.push(region);\n            }\n          }\n          foldingModel.toggleCollapseState(toToggle);\n          this.reveal({\n            lineNumber,\n            column: 1\n          });\n        }\n      }\n    }\n    reveal(position) {\n      this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n    }\n  };\n  return FoldingController;\n})();\nFoldingController = FoldingController_1 = __decorate([__param(1, IContextKeyService), __param(2, ILanguageConfigurationService), __param(3, INotificationService), __param(4, ILanguageFeatureDebounceService), __param(5, ILanguageFeaturesService)], FoldingController);\nexport { FoldingController };\nexport class RangesLimitReporter {\n  constructor(editor) {\n    this.editor = editor;\n    this._onDidChange = new Emitter();\n    this._computed = 0;\n    this._limited = false;\n  }\n  get limit() {\n    return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n  }\n  update(computed, limited) {\n    if (computed !== this._computed || limited !== this._limited) {\n      this._computed = computed;\n      this._limited = limited;\n      this._onDidChange.fire();\n    }\n  }\n}\nclass FoldingAction extends EditorAction {\n  runEditorCommand(accessor, editor, args) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const foldingController = FoldingController.get(editor);\n    if (!foldingController) {\n      return;\n    }\n    const foldingModelPromise = foldingController.getFoldingModel();\n    if (foldingModelPromise) {\n      this.reportTelemetry(accessor, editor);\n      return foldingModelPromise.then(foldingModel => {\n        if (foldingModel) {\n          this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n          const selection = editor.getSelection();\n          if (selection) {\n            foldingController.reveal(selection.getStartPosition());\n          }\n        }\n      });\n    }\n  }\n  getSelectedLines(editor) {\n    const selections = editor.getSelections();\n    return selections ? selections.map(s => s.startLineNumber) : [];\n  }\n  getLineNumbers(args, editor) {\n    if (args && args.selectionLines) {\n      return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n    }\n    return this.getSelectedLines(editor);\n  }\n  run(_accessor, _editor) {}\n}\nexport function toSelectedLines(selections) {\n  if (!selections || selections.length === 0) {\n    return {\n      startsInside: () => false\n    };\n  }\n  return {\n    startsInside(startLine, endLine) {\n      for (const s of selections) {\n        const line = s.startLineNumber;\n        if (line >= startLine && line <= endLine) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n}\nfunction foldingArgumentsConstraint(args) {\n  if (!types.isUndefined(args)) {\n    if (!types.isObject(args)) {\n      return false;\n    }\n    const foldingArgs = args;\n    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n      return false;\n    }\n  }\n  return true;\n}\nclass UnfoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfold',\n      label: nls.localize('unfoldAction.label', \"Unfold\"),\n      alias: 'Unfold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Unfold the content in the editor',\n        args: [{\n          name: 'Unfold editor argument',\n          description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number',\n                'default': 1\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down'],\n                'default': 'down'\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    const levels = args && args.levels || 1;\n    const lineNumbers = this.getLineNumbers(args, editor);\n    if (args && args.direction === 'up') {\n      setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n    } else {\n      setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n    }\n  }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldRecursively',\n      label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n      alias: 'Unfold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, _args) {\n    setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n  }\n}\nclass FoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.fold',\n      label: nls.localize('foldAction.label', \"Fold\"),\n      alias: 'Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Fold the content in the editor',\n        args: [{\n          name: 'Fold editor argument',\n          description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number'\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down']\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    const lineNumbers = this.getLineNumbers(args, editor);\n    const levels = args && args.levels;\n    const direction = args && args.direction;\n    if (typeof levels !== 'number' && typeof direction !== 'string') {\n      // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n      setCollapseStateUp(foldingModel, true, lineNumbers);\n    } else {\n      if (direction === 'up') {\n        setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n      } else {\n        setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n      }\n    }\n  }\n}\nclass ToggleFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFold',\n      label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n      alias: 'Toggle Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, 1, selectedLines);\n  }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldRecursively',\n      label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n      alias: 'Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n  }\n}\nclass ToggleFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFoldRecursively',\n      label: nls.localize('toggleFoldRecursivelyAction.label', \"Toggle Fold Recursively\"),\n      alias: 'Toggle Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, Number.MAX_VALUE, selectedLines);\n  }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllBlockComments',\n      label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n      alias: 'Fold All Block Comments',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n      if (comments && comments.blockCommentStartToken) {\n        const regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllMarkerRegions',\n      label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n      alias: 'Fold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        const regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllMarkerRegions',\n      label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n      alias: 'Unfold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        const regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, false);\n      }\n    }\n  }\n}\nclass FoldAllExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllExcept',\n      label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n      alias: 'Fold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, true, selectedLines);\n  }\n}\nclass UnfoldAllExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllExcept',\n      label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n      alias: 'Unfold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, false, selectedLines);\n  }\n}\nclass FoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAll',\n      label: nls.localize('foldAllAction.label', \"Fold All\"),\n      alias: 'Fold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, true);\n  }\n}\nclass UnfoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAll',\n      label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n      alias: 'Unfold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, false);\n  }\n}\nlet FoldLevelAction = /*#__PURE__*/(() => {\n  class FoldLevelAction extends FoldingAction {\n    static #_ = this.ID_PREFIX = 'editor.foldLevel';\n    static #_2 = this.ID = level => FoldLevelAction.ID_PREFIX + level;\n    getFoldingLevel() {\n      return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n    invoke(_foldingController, foldingModel, editor) {\n      setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n  }\n  return FoldLevelAction;\n})();\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoParentFold',\n      label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n      alias: 'Go to Parent Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoPreviousFold',\n      label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n      alias: 'Go to Previous Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoNextFold',\n      label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n      alias: 'Go to Next Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\nclass FoldRangeFromSelectionAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.createFoldingRangeFromSelection',\n      label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n      alias: 'Create Folding Range from Selection',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const collapseRanges = [];\n    const selections = editor.getSelections();\n    if (selections) {\n      for (const selection of selections) {\n        let endLineNumber = selection.endLineNumber;\n        if (selection.endColumn === 1) {\n          --endLineNumber;\n        }\n        if (endLineNumber > selection.startLineNumber) {\n          collapseRanges.push({\n            startLineNumber: selection.startLineNumber,\n            endLineNumber: endLineNumber,\n            type: undefined,\n            isCollapsed: true,\n            source: 1 /* FoldSource.userDefined */\n          });\n          editor.setSelection({\n            startLineNumber: selection.startLineNumber,\n            startColumn: 1,\n            endLineNumber: selection.startLineNumber,\n            endColumn: 1\n          });\n        }\n      }\n      if (collapseRanges.length > 0) {\n        collapseRanges.sort((a, b) => {\n          return a.startLineNumber - b.startLineNumber;\n        });\n        const newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, editor.getModel()?.getLineCount());\n        foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n      }\n    }\n  }\n}\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.removeManualFoldingRanges',\n      label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n      alias: 'Remove Manual Folding Ranges',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(foldingController, foldingModel, editor) {\n    const selections = editor.getSelections();\n    if (selections) {\n      const ranges = [];\n      for (const selection of selections) {\n        const {\n          startLineNumber,\n          endLineNumber\n        } = selection;\n        ranges.push(endLineNumber >= startLineNumber ? {\n          startLineNumber,\n          endLineNumber\n        } : {\n          endLineNumber,\n          startLineNumber\n        });\n      }\n      foldingModel.removeManualRanges(ranges);\n      foldingController.triggerFoldingModelChanged();\n    }\n  }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(ToggleFoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (let i = 1; i <= 7; i++) {\n  registerInstantiatedEditorAction(new FoldLevelAction({\n    id: FoldLevelAction.ID(i),\n    label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n    alias: `Fold Level ${i}`,\n    precondition: CONTEXT_FOLDING_ENABLED,\n    kbOpts: {\n      kbExpr: EditorContextKeys.editorTextFocus,\n      primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */ + i),\n      weight: 100 /* KeybindingWeight.EditorContrib */\n    }\n  }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (accessor, ...args) {\n    const [resource] = args;\n    if (!(resource instanceof URI)) {\n      throw illegalArgument();\n    }\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(resource);\n    if (!model) {\n      throw illegalArgument();\n    }\n    const configurationService = accessor.get(IConfigurationService);\n    if (!configurationService.getValue('editor.folding', {\n      resource\n    })) {\n      return [];\n    }\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const strategy = configurationService.getValue('editor.foldingStrategy', {\n      resource\n    });\n    const foldingLimitReporter = {\n      get limit() {\n        return configurationService.getValue('editor.foldingMaximumRegions', {\n          resource\n        });\n      },\n      update: (computed, limited) => {}\n    };\n    const indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n    let rangeProvider = indentRangeProvider;\n    if (strategy !== 'indentation') {\n      const providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n      if (providers.length) {\n        rangeProvider = new SyntaxRangeProvider(model, providers, () => {}, foldingLimitReporter, indentRangeProvider);\n      }\n    }\n    const ranges = yield rangeProvider.compute(CancellationToken.None);\n    const result = [];\n    try {\n      if (ranges) {\n        for (let i = 0; i < ranges.length; i++) {\n          const type = ranges.getType(i);\n          result.push({\n            start: ranges.getStartLineNumber(i),\n            end: ranges.getEndLineNumber(i),\n            kind: type ? FoldingRangeKind.fromValue(type) : undefined\n          });\n        }\n      }\n      return result;\n    } finally {\n      rangeProvider.dispose();\n    }\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","FoldingController_1","createCancelablePromise","Delayer","RunOnceScheduler","CancellationToken","illegalArgument","onUnexpectedError","KeyChord","Disposable","DisposableStore","escapeRegExpCharacters","types","StableEditorScrollState","EditorAction","registerEditorAction","registerEditorContribution","registerInstantiatedEditorAction","EditorContextKeys","FoldingRangeKind","ILanguageConfigurationService","FoldingModel","getNextFoldLine","getParentFoldLine","getPreviousFoldLine","setCollapseStateAtLevel","setCollapseStateForMatchingLines","setCollapseStateForRest","setCollapseStateForType","setCollapseStateLevelsDown","setCollapseStateLevelsUp","setCollapseStateUp","toggleCollapseState","HiddenRangeModel","IndentRangeProvider","nls","IContextKeyService","RawContextKey","FoldingDecorationProvider","FoldingRegions","SyntaxRangeProvider","INotificationService","ILanguageFeatureDebounceService","StopWatch","ILanguageFeaturesService","Emitter","CommandsRegistry","URI","IModelService","IConfigurationService","CONTEXT_FOLDING_ENABLED","FoldingController","_","_2","ID","get","editor","getContribution","getFoldingRangeProviders","languageFeaturesService","model","foldingRangeProviders","foldingRangeProvider","ordered","_foldingRangeSelector","constructor","contextKeyService","languageConfigurationService","notificationService","languageFeatureDebounceService","localToDispose","_register","_foldingLimitReporter","RangesLimitReporter","options","getOptions","_isEnabled","_useFoldingProviders","_unfoldOnClickAfterEndOfLine","_restoringViewState","_currentModelHasFoldedImports","_foldingImportsByDefault","updateDebounceInfo","for","min","foldingModel","hiddenRangeModel","rangeProvider","foldingRegionPromise","foldingModelPromise","updateScheduler","cursorChangedScheduler","mouseDownInfo","foldingDecorationProvider","showFoldingControls","showFoldingHighlights","foldingEnabled","bindTo","set","onDidChangeModel","onModelChanged","onDidChangeConfiguration","e","hasChanged","triggerFoldingModelChanged","onFoldingStrategyChanged","saveViewState","getModel","isTooLargeForTokenization","collapsedRegions","getMemento","provider","id","undefined","lineCount","getLineCount","foldedImports","restoreViewState","state","applyMemento","clear","add","onDidChange","hr","onHiddenRangesChanges","revealCursor","onDidChangeModelLanguageConfiguration","onDidChangeModelContent","onDidChangeCursorPosition","onCursorPositionChanged","onMouseDown","onEditorMouseDown","onMouseUp","onEditorMouseUp","dispose","cancel","getRangeProvider","editorModel","indentRangeProvider","selectedProviders","getFoldingModel","notifyChangeModelContent","trigger","sw","textModel","token","compute","then","foldingRanges","scrollState","hasChanges","setCollapsedAllOfType","Imports","value","capture","selections","getSelections","update","toSelectedLines","restore","newValue","elapsed","defaultDelay","err","hiddenRanges","adjustSelections","setSelections","setHiddenAreas","hasRanges","schedule","toToggle","selection","lineNumber","selectionStartLineNumber","isHidden","push","getAllRegionsAtLine","isCollapsed","startLineNumber","reveal","getPosition","range","event","leftButton","middleButton","iconClicked","type","data","detail","offsetLeftInGutter","element","offsetLeft","gutterOffsetX","offsetX","isAfterLines","startColumn","getLineMaxColumn","region","getRegionAtLine","surrounding","altKey","filter","otherRegion","containedBy","toMaybeToggle","getRegionsInside","recursive","shiftKey","column","position","revealPositionInCenterIfOutsideViewport","_onDidChange","_computed","_limited","limit","computed","limited","fire","FoldingAction","runEditorCommand","accessor","args","foldingController","reportTelemetry","invoke","getSelection","getStartPosition","getSelectedLines","map","s","getLineNumbers","selectionLines","l","run","_accessor","_editor","startsInside","startLine","endLine","line","foldingArgumentsConstraint","isUndefined","isObject","foldingArgs","levels","isNumber","direction","isString","Array","isArray","every","UnfoldAction","label","localize","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","mac","weight","metadata","description","name","constraint","schema","_foldingController","lineNumbers","UnFoldRecursivelyAction","_args","Number","MAX_VALUE","FoldAction","ToggleFoldAction","selectedLines","FoldRecursivelyAction","ToggleFoldRecursivelyAction","FoldAllBlockCommentsAction","regions","hasTypes","Comment","comments","getLanguageConfiguration","getLanguageId","blockCommentStartToken","regExp","RegExp","FoldAllRegionsAction","Region","foldingRules","markers","start","UnfoldAllRegionsAction","FoldAllExceptAction","UnfoldAllExceptAction","FoldAllAction","UnfoldAllAction","FoldLevelAction","ID_PREFIX","level","getFoldingLevel","parseInt","substr","GotoParentFoldAction","setSelection","endLineNumber","endColumn","GotoPreviousFoldAction","GotoNextFoldAction","FoldRangeFromSelectionAction","collapseRanges","source","sort","a","b","newRanges","sanitizeAndMerge","updatePost","fromFoldRanges","RemoveFoldRangeFromSelectionAction","ranges","removeManualRanges","registerCommand","_ref","_asyncToGenerator","resource","configurationService","getValue","strategy","foldingLimitReporter","providers","None","result","getType","getStartLineNumber","end","getEndLineNumber","kind","fromValue","_x","apply"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/folding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine as getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = class FoldingController extends Disposable {\n    static { FoldingController_1 = this; }\n    static { this.ID = 'editor.contrib.folding'; }\n    static get(editor) {\n        return editor.getContribution(FoldingController_1.ID);\n    }\n    static getFoldingRangeProviders(languageFeaturesService, model) {\n        const foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n        return (FoldingController_1._foldingRangeSelector?.(foldingRangeProviders, model)) ?? foldingRangeProviders;\n    }\n    constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.languageConfigurationService = languageConfigurationService;\n        this.languageFeaturesService = languageFeaturesService;\n        this.localToDispose = this._register(new DisposableStore());\n        this.editor = editor;\n        this._foldingLimitReporter = new RangesLimitReporter(editor);\n        const options = this.editor.getOptions();\n        this._isEnabled = options.get(43 /* EditorOption.folding */);\n        this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n        this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n        this._restoringViewState = false;\n        this._currentModelHasFoldedImports = false;\n        this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n        this.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', { min: 200 });\n        this.foldingModel = null;\n        this.hiddenRangeModel = null;\n        this.rangeProvider = null;\n        this.foldingRegionPromise = null;\n        this.foldingModelPromise = null;\n        this.updateScheduler = null;\n        this.cursorChangedScheduler = null;\n        this.mouseDownInfo = null;\n        this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n        this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n        this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n        this.foldingEnabled.set(this._isEnabled);\n        this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(43 /* EditorOption.folding */)) {\n                this._isEnabled = this.editor.getOptions().get(43 /* EditorOption.folding */);\n                this.foldingEnabled.set(this._isEnabled);\n                this.onModelChanged();\n            }\n            if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n                this.onModelChanged();\n            }\n            if (e.hasChanged(111 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n                const options = this.editor.getOptions();\n                this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n                this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n                this.triggerFoldingModelChanged();\n            }\n            if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n                this._useFoldingProviders = this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n                this.onFoldingStrategyChanged();\n            }\n            if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n                this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n            }\n            if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n                this._foldingImportsByDefault = this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n            }\n        }));\n        this.onModelChanged();\n    }\n    /**\n     * Store view state.\n     */\n    saveViewState() {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n            return {};\n        }\n        if (this.foldingModel) { // disposed ?\n            const collapsedRegions = this.foldingModel.getMemento();\n            const provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n            return { collapsedRegions, lineCount: model.getLineCount(), provider, foldedImports: this._currentModelHasFoldedImports };\n        }\n        return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n    restoreViewState(state) {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n            return;\n        }\n        if (!state) {\n            return;\n        }\n        this._currentModelHasFoldedImports = !!state.foldedImports;\n        if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n            this._restoringViewState = true;\n            try {\n                this.foldingModel.applyMemento(state.collapsedRegions);\n            }\n            finally {\n                this._restoringViewState = false;\n            }\n        }\n    }\n    onModelChanged() {\n        this.localToDispose.clear();\n        const model = this.editor.getModel();\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n            // huge files get no view model, so they cannot support hidden areas\n            return;\n        }\n        this._currentModelHasFoldedImports = false;\n        this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n        this.localToDispose.add(this.foldingModel);\n        this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n        this.localToDispose.add(this.hiddenRangeModel);\n        this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n        this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n        this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n        this.localToDispose.add(this.cursorChangedScheduler);\n        this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n        this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n        this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n        this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n        this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n        this.localToDispose.add({\n            dispose: () => {\n                if (this.foldingRegionPromise) {\n                    this.foldingRegionPromise.cancel();\n                    this.foldingRegionPromise = null;\n                }\n                this.updateScheduler?.cancel();\n                this.updateScheduler = null;\n                this.foldingModel = null;\n                this.foldingModelPromise = null;\n                this.hiddenRangeModel = null;\n                this.cursorChangedScheduler = null;\n                this.rangeProvider?.dispose();\n                this.rangeProvider = null;\n            }\n        });\n        this.triggerFoldingModelChanged();\n    }\n    onFoldingStrategyChanged() {\n        this.rangeProvider?.dispose();\n        this.rangeProvider = null;\n        this.triggerFoldingModelChanged();\n    }\n    getRangeProvider(editorModel) {\n        if (this.rangeProvider) {\n            return this.rangeProvider;\n        }\n        const indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n        this.rangeProvider = indentRangeProvider; // fallback\n        if (this._useFoldingProviders && this.foldingModel) {\n            const selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n            if (selectedProviders.length > 0) {\n                this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n            }\n        }\n        return this.rangeProvider;\n    }\n    getFoldingModel() {\n        return this.foldingModelPromise;\n    }\n    onDidChangeModelContent(e) {\n        this.hiddenRangeModel?.notifyChangeModelContent(e);\n        this.triggerFoldingModelChanged();\n    }\n    triggerFoldingModelChanged() {\n        if (this.updateScheduler) {\n            if (this.foldingRegionPromise) {\n                this.foldingRegionPromise.cancel();\n                this.foldingRegionPromise = null;\n            }\n            this.foldingModelPromise = this.updateScheduler.trigger(() => {\n                const foldingModel = this.foldingModel;\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\n                    return null;\n                }\n                const sw = new StopWatch();\n                const provider = this.getRangeProvider(foldingModel.textModel);\n                const foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n                return foldingRegionPromise.then(foldingRanges => {\n                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n                        let scrollState;\n                        if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n                            const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                            if (hasChanges) {\n                                scrollState = StableEditorScrollState.capture(this.editor);\n                                this._currentModelHasFoldedImports = hasChanges;\n                            }\n                        }\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\n                        const selections = this.editor.getSelections();\n                        foldingModel.update(foldingRanges, toSelectedLines(selections));\n                        scrollState?.restore(this.editor);\n                        // update debounce info\n                        const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n                        if (this.updateScheduler) {\n                            this.updateScheduler.defaultDelay = newValue;\n                        }\n                    }\n                    return foldingModel;\n                });\n            }).then(undefined, (err) => {\n                onUnexpectedError(err);\n                return null;\n            });\n        }\n    }\n    onHiddenRangesChanges(hiddenRanges) {\n        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n            const selections = this.editor.getSelections();\n            if (selections) {\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\n                    this.editor.setSelections(selections);\n                }\n            }\n        }\n        this.editor.setHiddenAreas(hiddenRanges, this);\n    }\n    onCursorPositionChanged() {\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n            this.cursorChangedScheduler.schedule();\n        }\n    }\n    revealCursor() {\n        const foldingModel = this.getFoldingModel();\n        if (!foldingModel) {\n            return;\n        }\n        foldingModel.then(foldingModel => {\n            if (foldingModel) {\n                const selections = this.editor.getSelections();\n                if (selections && selections.length > 0) {\n                    const toToggle = [];\n                    for (const selection of selections) {\n                        const lineNumber = selection.selectionStartLineNumber;\n                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n                            toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n                        }\n                    }\n                    if (toToggle.length) {\n                        foldingModel.toggleCollapseState(toToggle);\n                        this.reveal(selections[0].getPosition());\n                    }\n                }\n            }\n        }).then(undefined, onUnexpectedError);\n    }\n    onEditorMouseDown(e) {\n        this.mouseDownInfo = null;\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n            return;\n        }\n        if (!e.event.leftButton && !e.event.middleButton) {\n            return;\n        }\n        const range = e.target.range;\n        let iconClicked = false;\n        switch (e.target.type) {\n            case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */: {\n                const data = e.target.detail;\n                const offsetLeftInGutter = e.target.element.offsetLeft;\n                const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n                if (gutterOffsetX < 4) { // the whitespace between the border and the real folding icon border is 4px\n                    return;\n                }\n                iconClicked = true;\n                break;\n            }\n            case 7 /* MouseTargetType.CONTENT_EMPTY */: {\n                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n                    const data = e.target.detail;\n                    if (!data.isAfterLines) {\n                        break;\n                    }\n                }\n                return;\n            }\n            case 6 /* MouseTargetType.CONTENT_TEXT */: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    const model = this.editor.getModel();\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                        break;\n                    }\n                }\n                return;\n            }\n            default:\n                return;\n        }\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n    }\n    onEditorMouseUp(e) {\n        const foldingModel = this.foldingModel;\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\n            return;\n        }\n        const lineNumber = this.mouseDownInfo.lineNumber;\n        const iconClicked = this.mouseDownInfo.iconClicked;\n        const range = e.target.range;\n        if (!range || range.startLineNumber !== lineNumber) {\n            return;\n        }\n        if (iconClicked) {\n            if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n                return;\n            }\n        }\n        else {\n            const model = this.editor.getModel();\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n                return;\n            }\n        }\n        const region = foldingModel.getRegionAtLine(lineNumber);\n        if (region && region.startLineNumber === lineNumber) {\n            const isCollapsed = region.isCollapsed;\n            if (iconClicked || isCollapsed) {\n                const surrounding = e.event.altKey;\n                let toToggle = [];\n                if (surrounding) {\n                    const filter = (otherRegion) => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n                    const toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n                    for (const r of toMaybeToggle) {\n                        if (r.isCollapsed) {\n                            toToggle.push(r);\n                        }\n                    }\n                    // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n                    if (toToggle.length === 0) {\n                        toToggle = toMaybeToggle;\n                    }\n                }\n                else {\n                    const recursive = e.event.middleButton || e.event.shiftKey;\n                    if (recursive) {\n                        for (const r of foldingModel.getRegionsInside(region)) {\n                            if (r.isCollapsed === isCollapsed) {\n                                toToggle.push(r);\n                            }\n                        }\n                    }\n                    // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n                    if (isCollapsed || !recursive || toToggle.length === 0) {\n                        toToggle.push(region);\n                    }\n                }\n                foldingModel.toggleCollapseState(toToggle);\n                this.reveal({ lineNumber, column: 1 });\n            }\n        }\n    }\n    reveal(position) {\n        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n    }\n};\nFoldingController = FoldingController_1 = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageConfigurationService),\n    __param(3, INotificationService),\n    __param(4, ILanguageFeatureDebounceService),\n    __param(5, ILanguageFeaturesService)\n], FoldingController);\nexport { FoldingController };\nexport class RangesLimitReporter {\n    constructor(editor) {\n        this.editor = editor;\n        this._onDidChange = new Emitter();\n        this._computed = 0;\n        this._limited = false;\n    }\n    get limit() {\n        return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n    }\n    update(computed, limited) {\n        if (computed !== this._computed || limited !== this._limited) {\n            this._computed = computed;\n            this._limited = limited;\n            this._onDidChange.fire();\n        }\n    }\n}\nclass FoldingAction extends EditorAction {\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const foldingController = FoldingController.get(editor);\n        if (!foldingController) {\n            return;\n        }\n        const foldingModelPromise = foldingController.getFoldingModel();\n        if (foldingModelPromise) {\n            this.reportTelemetry(accessor, editor);\n            return foldingModelPromise.then(foldingModel => {\n                if (foldingModel) {\n                    this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n                    const selection = editor.getSelection();\n                    if (selection) {\n                        foldingController.reveal(selection.getStartPosition());\n                    }\n                }\n            });\n        }\n    }\n    getSelectedLines(editor) {\n        const selections = editor.getSelections();\n        return selections ? selections.map(s => s.startLineNumber) : [];\n    }\n    getLineNumbers(args, editor) {\n        if (args && args.selectionLines) {\n            return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n        }\n        return this.getSelectedLines(editor);\n    }\n    run(_accessor, _editor) {\n    }\n}\nexport function toSelectedLines(selections) {\n    if (!selections || selections.length === 0) {\n        return {\n            startsInside: () => false\n        };\n    }\n    return {\n        startsInside(startLine, endLine) {\n            for (const s of selections) {\n                const line = s.startLineNumber;\n                if (line >= startLine && line <= endLine) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    };\n}\nfunction foldingArgumentsConstraint(args) {\n    if (!types.isUndefined(args)) {\n        if (!types.isObject(args)) {\n            return false;\n        }\n        const foldingArgs = args;\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n            return false;\n        }\n    }\n    return true;\n}\nclass UnfoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfold',\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\n            alias: 'Unfold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Unfold the content in the editor',\n                args: [\n                    {\n                        name: 'Unfold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const levels = args && args.levels || 1;\n        const lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n        }\n        else {\n            setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n        }\n    }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldRecursively',\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n            alias: 'Unfold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, _args) {\n        setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    }\n}\nclass FoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.fold',\n            label: nls.localize('foldAction.label', \"Fold\"),\n            alias: 'Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Fold the content in the editor',\n                args: [\n                    {\n                        name: 'Fold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const lineNumbers = this.getLineNumbers(args, editor);\n        const levels = args && args.levels;\n        const direction = args && args.direction;\n        if (typeof levels !== 'number' && typeof direction !== 'string') {\n            // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n            setCollapseStateUp(foldingModel, true, lineNumbers);\n        }\n        else {\n            if (direction === 'up') {\n                setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n            }\n            else {\n                setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n            }\n        }\n    }\n}\nclass ToggleFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFold',\n            label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n            alias: 'Toggle Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, 1, selectedLines);\n    }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldRecursively',\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n            alias: 'Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass ToggleFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFoldRecursively',\n            label: nls.localize('toggleFoldRecursivelyAction.label', \"Toggle Fold Recursively\"),\n            alias: 'Toggle Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllBlockComments',\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n            alias: 'Fold All Block Comments',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n            if (comments && comments.blockCommentStartToken) {\n                const regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllMarkerRegions',\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n            alias: 'Fold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllMarkerRegions',\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n            alias: 'Unfold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, false);\n            }\n        }\n    }\n}\nclass FoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllExcept',\n            label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n            alias: 'Fold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, true, selectedLines);\n    }\n}\nclass UnfoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllExcept',\n            label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n            alias: 'Unfold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, false, selectedLines);\n    }\n}\nclass FoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAll',\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\n            alias: 'Fold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, true);\n    }\n}\nclass UnfoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAll',\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n            alias: 'Unfold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, false);\n    }\n}\nclass FoldLevelAction extends FoldingAction {\n    static { this.ID_PREFIX = 'editor.foldLevel'; }\n    static { this.ID = (level) => FoldLevelAction.ID_PREFIX + level; }\n    getFoldingLevel() {\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n}\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoParentFold',\n            label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n            alias: 'Go to Parent Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoPreviousFold',\n            label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n            alias: 'Go to Previous Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoNextFold',\n            label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n            alias: 'Go to Next Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\nclass FoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.createFoldingRangeFromSelection',\n            label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n            alias: 'Create Folding Range from Selection',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const collapseRanges = [];\n        const selections = editor.getSelections();\n        if (selections) {\n            for (const selection of selections) {\n                let endLineNumber = selection.endLineNumber;\n                if (selection.endColumn === 1) {\n                    --endLineNumber;\n                }\n                if (endLineNumber > selection.startLineNumber) {\n                    collapseRanges.push({\n                        startLineNumber: selection.startLineNumber,\n                        endLineNumber: endLineNumber,\n                        type: undefined,\n                        isCollapsed: true,\n                        source: 1 /* FoldSource.userDefined */\n                    });\n                    editor.setSelection({\n                        startLineNumber: selection.startLineNumber,\n                        startColumn: 1,\n                        endLineNumber: selection.startLineNumber,\n                        endColumn: 1\n                    });\n                }\n            }\n            if (collapseRanges.length > 0) {\n                collapseRanges.sort((a, b) => {\n                    return a.startLineNumber - b.startLineNumber;\n                });\n                const newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, editor.getModel()?.getLineCount());\n                foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n            }\n        }\n    }\n}\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.removeManualFoldingRanges',\n            label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n            alias: 'Remove Manual Folding Ranges',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(foldingController, foldingModel, editor) {\n        const selections = editor.getSelections();\n        if (selections) {\n            const ranges = [];\n            for (const selection of selections) {\n                const { startLineNumber, endLineNumber } = selection;\n                ranges.push(endLineNumber >= startLineNumber ? { startLineNumber, endLineNumber } : { endLineNumber, startLineNumber });\n            }\n            foldingModel.removeManualRanges(ranges);\n            foldingController.triggerFoldingModelChanged();\n        }\n    }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(ToggleFoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (let i = 1; i <= 7; i++) {\n    registerInstantiatedEditorAction(new FoldLevelAction({\n        id: FoldLevelAction.ID(i),\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n        alias: `Fold Level ${i}`,\n        precondition: CONTEXT_FOLDING_ENABLED,\n        kbOpts: {\n            kbExpr: EditorContextKeys.editorTextFocus,\n            primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | (21 /* KeyCode.Digit0 */ + i)),\n            weight: 100 /* KeybindingWeight.EditorContrib */\n        }\n    }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', async function (accessor, ...args) {\n    const [resource] = args;\n    if (!(resource instanceof URI)) {\n        throw illegalArgument();\n    }\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(resource);\n    if (!model) {\n        throw illegalArgument();\n    }\n    const configurationService = accessor.get(IConfigurationService);\n    if (!configurationService.getValue('editor.folding', { resource })) {\n        return [];\n    }\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const strategy = configurationService.getValue('editor.foldingStrategy', { resource });\n    const foldingLimitReporter = {\n        get limit() {\n            return configurationService.getValue('editor.foldingMaximumRegions', { resource });\n        },\n        update: (computed, limited) => { }\n    };\n    const indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n    let rangeProvider = indentRangeProvider;\n    if (strategy !== 'indentation') {\n        const providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n        if (providers.length) {\n            rangeProvider = new SyntaxRangeProvider(model, providers, () => { }, foldingLimitReporter, indentRangeProvider);\n        }\n    }\n    const ranges = await rangeProvider.compute(CancellationToken.None);\n    const result = [];\n    try {\n        if (ranges) {\n            for (let i = 0; i < ranges.length; i++) {\n                const type = ranges.getType(i);\n                result.push({ start: ranges.getStartLineNumber(i), end: ranges.getEndLineNumber(i), kind: type ? FoldingRangeKind.fromValue(type) : undefined });\n            }\n        }\n        return result;\n    }\n    finally {\n        rangeProvider.dispose();\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}