{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token.service\";\nexport let TokenRefreshService = /*#__PURE__*/(() => {\n  class TokenRefreshService {\n    http;\n    tokenService;\n    constructor(http, tokenService) {\n      this.http = http;\n      this.tokenService = tokenService;\n    }\n    refreshToken() {\n      const refreshToken = this.tokenService.getRefreshToken();\n      if (!refreshToken) throw new Error('Missing refresh token');\n      return this.http.post('/api/login/auth/refresh-token', {\n        refreshToken\n      }).pipe(map(response => {\n        this.tokenService.setAccessToken(response.accessToken);\n        this.tokenService.setRefreshToken(response.refreshToken);\n        return response.accessToken;\n      }));\n    }\n    static ɵfac = function TokenRefreshService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TokenRefreshService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenRefreshService,\n      factory: TokenRefreshService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TokenRefreshService;\n})();","map":{"version":3,"names":["map","TokenRefreshService","http","tokenService","constructor","refreshToken","getRefreshToken","Error","post","pipe","response","setAccessToken","accessToken","setRefreshToken","i0","ɵɵinject","i1","HttpClient","i2","TokenService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\core\\services\\token-refresh.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TokenService } from './token.service';\r\nimport { map, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TokenRefreshService {\r\n  constructor(private http: HttpClient, private tokenService: TokenService) {}\r\n\r\n  refreshToken(): Observable<string> {\r\n    const refreshToken = this.tokenService.getRefreshToken();\r\n    if (!refreshToken) throw new Error('Missing refresh token');\r\n\r\n    return this.http.post<any>('/api/login/auth/refresh-token', { refreshToken }).pipe(\r\n      map((response) => {\r\n        this.tokenService.setAccessToken(response.accessToken);\r\n        this.tokenService.setRefreshToken(response.refreshToken);\r\n        return response.accessToken;\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAoB,MAAM;;;;AAGtC,WAAaC,mBAAmB;EAA1B,MAAOA,mBAAmB;IACVC,IAAA;IAA0BC,YAAA;IAA9CC,YAAoBF,IAAgB,EAAUC,YAA0B;MAApD,KAAAD,IAAI,GAAJA,IAAI;MAAsB,KAAAC,YAAY,GAAZA,YAAY;IAAiB;IAE3EE,YAAYA,CAAA;MACV,MAAMA,YAAY,GAAG,IAAI,CAACF,YAAY,CAACG,eAAe,EAAE;MACxD,IAAI,CAACD,YAAY,EAAE,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;MAE3D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,+BAA+B,EAAE;QAAEH;MAAY,CAAE,CAAC,CAACI,IAAI,CAChFT,GAAG,CAAEU,QAAQ,IAAI;QACf,IAAI,CAACP,YAAY,CAACQ,cAAc,CAACD,QAAQ,CAACE,WAAW,CAAC;QACtD,IAAI,CAACT,YAAY,CAACU,eAAe,CAACH,QAAQ,CAACL,YAAY,CAAC;QACxD,OAAOK,QAAQ,CAACE,WAAW;MAC7B,CAAC,CAAC,CACH;IACH;;uCAdWX,mBAAmB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;IAAA;;aAAnBlB,mBAAmB;MAAAmB,OAAA,EAAnBnB,mBAAmB,CAAAoB,IAAA;MAAAC,UAAA,EADN;IAAM;;SACnBrB,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}