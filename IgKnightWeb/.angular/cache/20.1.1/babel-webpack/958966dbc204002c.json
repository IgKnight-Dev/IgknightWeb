{"ast":null,"code":"export const PythonTopics = [{\n  id: 'python-introduction',\n  title: 'Introduction to Python',\n  slug: 'python-introduction'\n}, {\n  id: 'python-variables',\n  title: 'Variables & Data Types',\n  slug: 'python-syntax-variables'\n}, {\n  id: 'python-conditions',\n  title: 'Conditional Statements',\n  slug: 'python-conditions'\n}, {\n  id: 'python-loops',\n  title: 'Loops in Python',\n  slug: 'python-loops'\n}, {\n  id: 'python-functions',\n  title: 'Functions & Parameters',\n  slug: 'python-functions'\n}, {\n  id: 'python-lists-tuples',\n  title: 'Lists & Tuples',\n  slug: 'python-lists-tuples'\n}, {\n  id: 'python-dictionaries',\n  title: 'Dictionaries in Python',\n  slug: 'python-dictionaries'\n}, {\n  id: 'python-strings',\n  title: 'Working with Strings',\n  slug: 'python-strings'\n}, {\n  id: 'python-modules',\n  title: 'Modules & Packages',\n  slug: 'python-modules'\n}, {\n  id: 'python-files',\n  title: 'File Handling',\n  slug: 'python-files'\n}, {\n  id: 'python-exceptions',\n  title: 'Exception Handling',\n  slug: 'python-exceptions'\n}, {\n  id: 'python-oop',\n  title: 'Object-Oriented Python',\n  slug: 'python-oop'\n}, {\n  id: 'python-advanced',\n  title: 'Advanced Python Tips',\n  slug: 'python-advanced'\n}, {\n  id: 'python-best-practices',\n  title: 'Best Practices',\n  slug: 'python-best-practices'\n}];\nexport function PythonTopicContent(slug) {\n  switch (slug) {\n    case 'python-introduction':\n      return {\n        slug: 'python-introduction',\n        title: 'Introduction to Python',\n        content: `\n<p>Python is one of the most popular programming languages today. It's loved for its simplicity, readability, and versatility. Whether you're building websites, automating tasks, crunching data, or training AI models ‚Äî Python has got your back.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî• Why Python?</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><strong>Beginner-friendly:</strong> Its syntax is like writing English.</li>\n  <li><strong>Flexible:</strong> From web development to machine learning to scripting ‚Äî Python does it all.</li>\n  <li><strong>Massive community:</strong> Tons of libraries, tutorials, and help available online.</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-Life Analogy</h3>\n<p>Think of Python as the ‚ÄúSwiss Army Knife‚Äù of programming ‚Äî it's not always the fastest tool, but it's insanely useful and easy to handle.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üöÄ Where is Python Used?</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><strong>Web Development:</strong> With frameworks like Django and Flask</li>\n  <li><strong>Data Science:</strong> NumPy, Pandas, Matplotlib, and Jupyter</li>\n  <li><strong>AI/ML:</strong> TensorFlow, PyTorch</li>\n  <li><strong>Automation & Scripting:</strong> For repetitive tasks, file handling, web scraping</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Fun Fact</h3>\n<p>Python was named after the British comedy group ‚ÄúMonty Python‚Äù ‚Äî not the snake üêç.</p>\n        `,\n        proTip: 'Try using Python in an online playground like Replit or Jupyter Notebook before installing anything locally.',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# Your first Python code\nprint(\"Hello, IgKnight!\")\n            `\n        }, {\n          language: 'python',\n          code: `\n# Simple math\na = 10\nb = 5\nprint(\"Sum is:\", a + b)\n            `\n        }]\n      };\n    case 'python-syntax-variables':\n      return {\n        slug: 'python-syntax-variables',\n        title: 'Python Syntax & Variables',\n        content: `\n<p>Python's syntax is clean and beginner-friendly. You don't need curly braces <code>{ }</code> or semicolons <code>;</code> ‚Äî indentation and simplicity rule here.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úçÔ∏è Writing Python</h3>\n<p>Each line of code does something meaningful. Indentation (spaces/tabs at the beginning) is how Python defines code blocks (like inside loops or functions).</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî§ Declaring Variables</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Python is dynamically typed ‚Äî you don‚Äôt need to declare the data type.</li>\n  <li>Just assign a value using <code>=</code> and Python figures it out.</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Variable Naming Rules</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Can include letters, numbers, and underscores (e.g., <code>user_name</code>)</li>\n  <li>Cannot start with a number</li>\n  <li>Case-sensitive (<code>age</code> and <code>Age</code> are different)</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìä Common Data Types</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><code>int</code>: Whole numbers</li>\n  <li><code>float</code>: Decimal numbers</li>\n  <li><code>str</code>: Text (strings)</li>\n  <li><code>bool</code>: True or False</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Example</h3>\n<p>Here's how you'd declare some variables in Python:</p>\n        `,\n        proTip: 'Use descriptive variable names ‚Äî avoid single-letter variables unless you are writing a quick loop.',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# Variable examples\nname = \"Alice\"\nage = 25\nheight = 5.6\nis_student = True\n\nprint(name, age, height, is_student)\n            `\n        }, {\n          language: 'python',\n          code: `\n# Bad vs Good\na = \"John\"         # ‚ùå Avoid (not clear)\nuser_name = \"John\" # ‚úÖ Better\n            `\n        }]\n      };\n    case 'python-loops':\n      return {\n        slug: 'python-loops',\n        title: 'Loops in Python',\n        content: `\n<p>Loops let you execute a block of code multiple times. They are one of the most important tools in programming ‚Äî especially useful when working with lists, user input, files, or repetitive tasks.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üåÄ Why Use Loops?</h3>\n<p>Imagine printing \"Hello\" 100 times ‚Äî doing it manually would be a nightmare. With a loop, you can do it in just 2‚Äì3 lines. Loops save time and make your code much cleaner.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÅ Types of Loops in Python</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><strong><code>for</code> loop</strong> ‚Äî When you know what you're looping through (like a list, string, or range).</li>\n  <li><strong><code>while</code> loop</strong> ‚Äî When you want to keep looping until something changes (like waiting for a user to guess the right number).</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Real-Life Analogy</h3>\n<p><code>for</code> loop is like a to-do list: you check off each item in order.<br>\n<code>while</code> loop is like watching Netflix: you keep watching episodes <i>while</i> you're not sleepy.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß≠ The <code>for</code> Loop</h3>\n<p><code>for</code> loops are used to iterate over sequences like lists, tuples, dictionaries, strings, or even ranges of numbers.</p>\n<p><strong>Syntax:</strong> <code>for item in sequence:</code></p>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Automatically stops after the last item</li>\n  <li>No need to manually increment a counter</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß™ The <code>while</code> Loop</h3>\n<p><code>while</code> loops keep running <strong>as long as</strong> the condition is true.</p>\n<p><strong>Syntax:</strong> <code>while condition:</code></p>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Make sure the condition eventually becomes false, or it‚Äôll loop forever!</li>\n  <li>Usually used with counters, user input, or unknown lengths</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ† Useful Keywords Inside Loops</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><code>break</code> ‚Äî Stop the loop immediately</li>\n  <li><code>continue</code> ‚Äî Skip the current iteration and go to the next one</li>\n  <li><code>else</code> ‚Äî Optional block that runs after the loop finishes (only if loop wasn‚Äôt broken)</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Common Mistakes to Avoid</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Forgetting to update variables in <code>while</code> loops (causes infinite loop)</li>\n  <li>Using <code>break</code> carelessly ‚Äî can skip important steps</li>\n  <li>Modifying a list while looping through it ‚Äî use <code>list.copy()</code> or <code>range(len(list))</code> instead</li>\n</ul>\n        `,\n        proTip: 'Use `for` loops when dealing with a sequence, and `while` loops when waiting on a condition ‚Äî and always double-check for infinite loops!',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# FOR loop - print each item in a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor fruit in fruits:\n    print(\"I like\", fruit)\n            `\n        }, {\n          language: 'python',\n          code: `\n# FOR loop using range()\nfor i in range(1, 6):\n    print(\"Number:\", i)\n            `\n        }, {\n          language: 'python',\n          code: `\n# WHILE loop - keep looping while condition is true\ncount = 1\n\nwhile count <= 3:\n    print(\"Counting:\", count)\n    count += 1\n            `\n        }, {\n          language: 'python',\n          code: `\n# Using break and continue\nfor i in range(5):\n    if i == 3:\n        break  # Exit early when i == 3\n    if i == 1:\n        continue  # Skip when i == 1\n    print(i)\n            `\n        }, {\n          language: 'python',\n          code: `\n# WHILE loop with user input\npassword = \"\"\n\nwhile password != \"secret123\":\n    password = input(\"Enter password: \")\n\nprint(\"Access granted!\")\n            `\n        }]\n      };\n    case 'python-conditions':\n      return {\n        slug: 'python-conditions',\n        title: 'Conditional Statements',\n        content: `\n<p>Conditional statements help you make decisions in code. Python supports <code>if</code>, <code>elif</code>, and <code>else</code> to handle different conditions ‚Äî just like everyday decision-making.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Basic Syntax</h3>\n<p>Use <code>if</code> to check a condition. If it‚Äôs true, the block runs. Otherwise, try <code>elif</code> (else if), and finally <code>else</code> if nothing else matches.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Operators You‚Äôll Use</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><code>==</code>: Equals</li>\n  <li><code>!=</code>: Not equal</li>\n  <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>: Comparison</li>\n  <li><code>and</code>, <code>or</code>, <code>not</code>: Logical operators</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Real Example</h3>\n<p>Let‚Äôs say you‚Äôre checking someone's age to see if they can vote:</p>\n        `,\n        proTip: 'Keep your indentation consistent! Python relies on it ‚Äî 4 spaces is the standard.',\n        codeSamples: [{\n          language: 'python',\n          code: `\nage = 20\n\nif age >= 18:\n    print(\"You can vote!\")\nelif age > 0:\n    print(\"You are too young to vote.\")\nelse:\n    print(\"Invalid age.\")\n            `\n        }, {\n          language: 'python',\n          code: `\n# Using multiple conditions\nuser = \"admin\"\nlogged_in = True\n\nif user == \"admin\" and logged_in:\n    print(\"Welcome, admin!\")\nelse:\n    print(\"Access denied.\")\n            `\n        }]\n      };\n    case 'python-functions':\n      return {\n        slug: 'python-functions',\n        title: 'Functions in Python',\n        content: `\n<p>Functions are reusable blocks of code that let you group related logic together and give it a name. Instead of repeating code again and again, you define it once as a function and then \"call\" it whenever you need it.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Why Use Functions?</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Organize your code</li>\n  <li>Avoid repetition (DRY: Don‚Äôt Repeat Yourself)</li>\n  <li>Make your program easier to understand and maintain</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîß Defining a Function</h3>\n<p>You define a function using the <code>def</code> keyword, followed by a name and parentheses:</p>\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def greet():\n    print(\"Hello there!\")</code></pre>\n\n<p>This defines the function. To actually run it, you need to <strong>call</strong> it:</p>\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>greet()</code></pre>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Parameters and Arguments</h3>\n<p>Functions can accept inputs (called <strong>parameters</strong>) so they can do more dynamic tasks:</p>\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def greet(name):\n    print(\"Hello\", name)</code></pre>\n<p>Here, <code>name</code> is a parameter. When calling the function, you pass an <strong>argument</strong>:</p>\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>greet(\"Alice\")</code></pre>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Returning Values</h3>\n<p>Functions can give back a value using the <code>return</code> keyword:</p>\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)  # 7</code></pre>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîê Scope: Local vs Global Variables</h3>\n<p>Variables created inside a function only exist there (they‚Äôre <strong>local</strong>). You can‚Äôt use them outside the function.</p>\n<p>Variables outside a function are <strong>global</strong> and can be accessed from anywhere ‚Äî but be careful not to overwrite them unintentionally!</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üåü Real-Life Analogy</h3>\n<p>Think of a function like a blender ‚Äî you define what it does (blend ingredients), then call it when needed (make a smoothie) and optionally get something back (smoothie üçì).</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ† Advanced (But Useful!) Concepts</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><strong>Default values:</strong> Parameters can have default values</li>\n  <li><strong>*args and **kwargs:</strong> Accept flexible numbers of arguments</li>\n  <li><strong>Lambda:</strong> One-line anonymous functions for quick tasks</li>\n</ul>\n        `,\n        proTip: 'Always give your functions meaningful names! Instead of \"doStuff()\", use \"calculate_discount()\" or \"fetch_user_data()\" ‚Äî makes your code much clearer.',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# Basic function\ndef greet():\n    print(\"Hi there!\")\n\ngreet()\n            `\n        }, {\n          language: 'python',\n          code: `\n# Function with parameters\ndef greet(name):\n    print(\"Welcome,\", name)\n\ngreet(\"Nina\")\n            `\n        }, {\n          language: 'python',\n          code: `\n# Function with default parameters\ndef welcome(user=\"Guest\"):\n    print(\"Hello,\", user)\n\nwelcome()\nwelcome(\"Alex\")\n            `\n        }, {\n          language: 'python',\n          code: `\n# Lambda (anonymous function)\nsquare = lambda x: x * x\nprint(square(6))  # 36\n            `\n        }]\n      };\n    case 'python-lists-tuples':\n      return {\n        slug: 'python-lists-tuples',\n        title: 'Lists & Tuples',\n        content: `\n<p>In Python, <strong>lists</strong> and <strong>tuples</strong> are used to store collections of items. They‚Äôre like containers that can hold multiple values ‚Äî great when you want to group things together.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß∫ What is a List?</h3>\n<p>A <strong>list</strong> is a flexible, changeable (mutable) collection. Think of it as a to-do list: you can add, remove, or update items anytime.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úÖ Common List Operations</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Create: <code>fruits = ['apple', 'banana', 'cherry']</code></li>\n  <li>Access: <code>fruits[0]</code> ‚Üí 'apple'</li>\n  <li>Update: <code>fruits[1] = 'mango'</code></li>\n  <li>Add: <code>fruits.append('orange')</code></li>\n  <li>Remove: <code>fruits.remove('banana')</code></li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ What is a Tuple?</h3>\n<p>A <strong>tuple</strong> is like a list, but <strong>immutable</strong> ‚Äî once created, it can‚Äôt be changed. Use it when the data shouldn‚Äôt be edited (like coordinates).</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîê Tuple Basics</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Create: <code>point = (3, 4)</code></li>\n  <li>Access: <code>point[0]</code> ‚Üí 3</li>\n  <li>Can‚Äôt modify: <code>point[0] = 10</code> ‚ùå (throws error)</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç When to Use What?</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>‚úÖ Use <strong>lists</strong> when data will change (shopping carts, scores)</li>\n  <li>‚úÖ Use <strong>tuples</strong> when data must stay constant (coordinates, fixed configs)</li>\n</ul>\n    `,\n        proTip: 'If you ever need to convert between them, use list() and tuple(). Like: tuple(my_list) or list(my_tuple)',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# List example\ngroceries = ['milk', 'eggs', 'bread']\ngroceries.append('butter')\nprint(groceries)\n        `\n        }, {\n          language: 'python',\n          code: `\n# Tuple example\nlocation = (52.52, 13.40)\nprint(\"Latitude:\", location[0])\n        `\n        }]\n      };\n    case 'python-dictionaries':\n      return {\n        slug: 'python-dictionaries',\n        title: 'Dictionaries',\n        content: `\n<p>In Python, a <strong>dictionary</strong> is like a mini-database that stores data in <strong>key-value</strong> pairs. Instead of using positions like in lists, you use <em>names</em> (keys) to access values.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîë What is a Dictionary?</h3>\n<p>Think of it like a real dictionary: you look up a word (key) to get its meaning (value).</p>\n<p>Example: <code>{ \"name\": \"Alice\", \"age\": 25 }</code></p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Why Use Dictionaries?</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>They‚Äôre perfect for labeled data ‚Äî like a user profile or config.</li>\n  <li>They‚Äôre fast for lookups, updates, and deletions using keys.</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è Common Dictionary Operations</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Create: <code>person = {\"name\": \"Alice\", \"age\": 25}</code></li>\n  <li>Access: <code>person[\"name\"]</code> ‚Üí 'Alice'</li>\n  <li>Update: <code>person[\"age\"] = 26</code></li>\n  <li>Add: <code>person[\"city\"] = \"New York\"</code></li>\n  <li>Delete: <code>del person[\"age\"]</code></li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Looping Through a Dictionary</h3>\n<p>You can loop over keys and values easily:</p>\n<pre class=\"bg-gray-800 text-white p-2 rounded text-sm\">for key, value in person.items():\n  print(key, \"‚Üí\", value)</pre>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üö´ Safe Access with get()</h3>\n<p>Use <code>dict.get(\"key\")</code> to avoid errors if the key doesn‚Äôt exist. It returns <code>None</code> or a default value.</p>\n<p>Example: <code>person.get(\"email\", \"Not provided\")</code></p>\n    `,\n        proTip: 'Dictionaries are unordered in versions below Python 3.7. From Python 3.7+, they preserve insertion order!',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# Creating a dictionary\nuser = {\n  \"username\": \"coolcoder\",\n  \"followers\": 120,\n  \"verified\": True\n}\n\n# Updating a key\nuser[\"followers\"] += 30\n\n# Safe access\nemail = user.get(\"email\", \"Not provided\")\nprint(email)\n        `\n        }]\n      };\n    case 'python-strings':\n      return {\n        slug: 'python-strings',\n        title: 'Strings in Python',\n        content: `\n<p>In Python, a <strong>string</strong> is just a sequence of characters ‚Äî like words, sentences, or even emojis! They're one of the most used data types in any program.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßµ What is a String?</h3>\n<p>A string is text wrapped in quotes: <code>\"Hello\"</code>, <code>'World'</code>, or even <code>\"\"\"Multi-line string\"\"\"</code>.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Real-World Use</h3>\n<p>Think about user names, messages, tweets, or emails ‚Äî they‚Äôre all stored and handled as strings in code.</p>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è Common String Operations</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li>Concatenation: <code>\"Hello\" + \" World\"</code></li>\n  <li>Length: <code>len(\"Hello\")</code> ‚Üí 5</li>\n  <li>Access: <code>msg[0]</code> ‚Üí first character</li>\n  <li>Slicing: <code>msg[1:4]</code> ‚Üí characters from index 1 to 3</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßº String Methods</h3>\n<ul class=\"list-disc list-inside text-gray-300\">\n  <li><code>.lower()</code> ‚Äì Convert to lowercase</li>\n  <li><code>.upper()</code> ‚Äì Convert to uppercase</li>\n  <li><code>.strip()</code> ‚Äì Remove surrounding spaces</li>\n  <li><code>.replace(\"a\", \"b\")</code> ‚Äì Replace characters</li>\n  <li><code>.split()</code> ‚Äì Break string into a list</li>\n</ul>\n\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ f-Strings: Easy Formatting</h3>\n<p>f-Strings let you insert variables into strings easily:</p>\n<pre class=\"bg-gray-800 text-white p-2 rounded text-sm\">\nname = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I'm {age} years old.\")\n</pre>\n    `,\n        proTip: 'Strings are immutable ‚Äî you can‚Äôt change a character inside a string, but you can build a new string using slicing or .replace().',\n        codeSamples: [{\n          language: 'python',\n          code: `\n# Basic string examples\nmessage = \"  Welcome to IgKnight!  \"\nprint(message.strip().upper())\n\n# f-String formatting\nuser = \"John\"\nscore = 99\nprint(f\"Hey {user}, your score is {score}!\")\n        `\n        }]\n      };\n    case 'python-modules':\n      return {\n        slug: 'python-modules',\n        title: 'Modules & Packages',\n        content: `\n      <p>As your Python code grows bigger, you don't want to keep everything in one massive file. That's where <strong>modules</strong> and <strong>packages</strong> come in ‚Äî they're how Python helps you organize your code like a pro.</p>\n\n      <h3>üîπ What's a Module?</h3>\n      <p>A <strong>module</strong> is just a single Python file (.py) that contains variables, functions, or classes you want to reuse elsewhere.</p>\n      <p>For example, imagine a file called <code>math_utils.py</code> with this content:</p>\n\n      <pre><code>def square(x):\n    return x * x\n\npi = 3.14</code></pre>\n\n      <p>You can use this in another file by importing it:</p>\n      <pre><code>import math_utils\n\nprint(math_utils.square(4))   # ‚û§ 16\nprint(math_utils.pi)          # ‚û§ 3.14</code></pre>\n\n      <h3>üîπ What‚Äôs a Package?</h3>\n      <p>A <strong>package</strong> is a folder that contains multiple related modules ‚Äî kind of like a folder of utilities.</p>\n      <p>To make a folder a package, you just add a special file called <code>__init__.py</code> inside it. Even if it‚Äôs empty, Python recognizes it as a package.</p>\n\n      <p>Example structure:</p>\n      <pre><code>utilities/\n‚îú‚îÄ‚îÄ __init__.py\n‚îú‚îÄ‚îÄ math_utils.py\n‚îî‚îÄ‚îÄ string_utils.py</code></pre>\n\n      <p>And you can import like this:</p>\n      <pre><code>from utilities import math_utils\nprint(math_utils.square(5))</code></pre>\n\n      <h3>üß† Why Use Them?</h3>\n      <ul class=\"list-disc pl-6\">\n        <li>Keep your code clean and organized</li>\n        <li>Reuse logic across files and projects</li>\n        <li>Split features into meaningful chunks (like auth, db, UI, etc.)</li>\n      </ul>\n\n      <h3>üåê Built-in & External Modules</h3>\n      <p>Python comes with tons of built-in modules (like <code>math</code>, <code>random</code>, <code>datetime</code>) and you can install external ones using <code>pip</code>.</p>\n\n      <pre><code>import random\nprint(random.randint(1, 10))</code></pre>\n\n      <p>Want to use an external module?</p>\n      <pre><code>pip install requests</code></pre>\n      <pre><code>import requests\nresponse = requests.get('https://api.example.com')</code></pre>\n\n      <h3>üì¶ Pro Tip: Use Aliases</h3>\n      <pre><code>import math_utils as m\nprint(m.square(3))</code></pre>\n      <p>Aliases make your imports shorter and cleaner.</p>\n    `,\n        proTip: 'Use modules and packages early ‚Äî even for small projects. It makes scaling and maintaining your code 10x easier.',\n        codeSamples: [{\n          language: 'python',\n          code: `# math_utils.py\ndef add(a, b):\n    return a + b`\n        }, {\n          language: 'python',\n          code: `# main.py\nimport math_utils\n\nprint(math_utils.add(10, 5))  # Output: 15`\n        }]\n      };\n    case 'python-files':\n      return {\n        slug: 'python-files',\n        title: 'File Handling',\n        content: `\n      <p>In real-world apps, you often need to read from or write to files ‚Äî whether it‚Äôs a config file, user data, or logs. Python makes this super easy with built-in file handling tools.</p>\n\n      <h3>üìÇ Opening a File</h3>\n      <p>Use the <code>open()</code> function:</p>\n      <pre><code>file = open('notes.txt', 'r')</code></pre>\n      <ul class=\"list-disc pl-6\">\n        <li><code>'r'</code> ‚Äì Read (default)</li>\n        <li><code>'w'</code> ‚Äì Write (overwrites if exists)</li>\n        <li><code>'a'</code> ‚Äì Append (adds to end)</li>\n        <li><code>'x'</code> ‚Äì Create (fails if exists)</li>\n        <li><code>'b'</code> ‚Äì Binary mode (add to above)</li>\n      </ul>\n\n      <h3>üìñ Reading from Files</h3>\n      <pre><code>file = open('notes.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()</code></pre>\n\n      <p>Better way? Use <strong><code>with</code></strong> ‚Äî it auto-closes:</p>\n      <pre><code>with open('notes.txt', 'r') as file:\n    print(file.read())</code></pre>\n\n      <h3>‚úç Writing to Files</h3>\n      <pre><code>with open('notes.txt', 'w') as file:\n    file.write('Hello IgKnight!')</code></pre>\n\n      <p>To add instead of overwrite:</p>\n      <pre><code>with open('notes.txt', 'a') as file:\n    file.write('\\\\nMore lines...')</code></pre>\n\n      <h3>üß™ Useful Read Methods</h3>\n      <ul class=\"list-disc pl-6\">\n        <li><code>read()</code> ‚Äì Entire content</li>\n        <li><code>readline()</code> ‚Äì One line</li>\n        <li><code>readlines()</code> ‚Äì List of lines</li>\n      </ul>\n\n      <h3>üîê Working with Files Safely</h3>\n      <p>Always use <code>with open(...) as file</code> to avoid issues like memory leaks or locked files.</p>\n\n      <h3>üì¶ Where Files Are Stored?</h3>\n      <p>If you use just a filename like <code>'data.txt'</code>, it‚Äôll read/write in the current working directory. Use full paths if needed.</p>\n    `,\n        proTip: 'Always use the <code>with</code> block when working with files. It saves you from forgetting to close files and prevents resource leaks.',\n        codeSamples: [{\n          language: 'python',\n          code: `# Writing to a file\nwith open('example.txt', 'w') as f:\n    f.write('Hello, IgKnight!')`\n        }, {\n          language: 'python',\n          code: `# Reading from a file\nwith open('example.txt', 'r') as f:\n    print(f.read())`\n        }]\n      };\n    case 'python-exceptions':\n      return {\n        slug: 'python-exceptions',\n        title: 'Exception Handling',\n        content: `\n      <p>When your code runs into unexpected problems ‚Äî like dividing by zero, missing files, or wrong user input ‚Äî Python raises <strong>exceptions</strong>. Instead of crashing, you can handle these errors gracefully using <code>try</code> and <code>except</code>.</p>\n\n      <h3>‚ö†Ô∏è What Is an Exception?</h3>\n      <p>An exception is a runtime error that stops your program unless you handle it. Example:</p>\n      <pre><code>num = int(\"abc\")  # This raises a ValueError</code></pre>\n\n      <h3>‚úÖ Using try-except</h3>\n      <p>Wrap risky code in a <code>try</code> block, and handle errors in <code>except</code>:</p>\n      <pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Can't divide by zero!\")</code></pre>\n\n      <h3>üéØ Catching Specific Errors</h3>\n      <p>You can catch different exceptions separately:</p>\n      <pre><code>try:\n    x = int(\"abc\")\nexcept ValueError:\n    print(\"Not a valid number!\")</code></pre>\n\n      <h3>üì¶ Catch-All (Not Recommended)</h3>\n      <p>You can catch anything ‚Äî but don‚Äôt overuse it:</p>\n      <pre><code>try:\n    risky_code()\nexcept Exception as e:\n    print(\"Something went wrong:\", e)</code></pre>\n\n      <h3>üßº Finally Block</h3>\n      <p><code>finally</code> runs no matter what ‚Äî great for cleanup:</p>\n      <pre><code>try:\n    f = open(\"data.txt\")\n    # do stuff\nexcept FileNotFoundError:\n    print(\"File not found.\")\nfinally:\n    print(\"Done trying.\")</code></pre>\n\n      <h3>üöÄ Raising Your Own Exceptions</h3>\n      <p>You can raise errors manually when something‚Äôs wrong:</p>\n      <pre><code>age = -5\nif age &lt; 0:\n    raise ValueError(\"Age can't be negative!\")</code></pre>\n\n      <h3>üîç Common Exceptions</h3>\n      <ul class=\"list-disc pl-6\">\n        <li><code>ZeroDivisionError</code> ‚Äì dividing by zero</li>\n        <li><code>ValueError</code> ‚Äì wrong type (e.g. converting \"abc\" to int)</li>\n        <li><code>TypeError</code> ‚Äì operation on wrong data types</li>\n        <li><code>FileNotFoundError</code> ‚Äì file doesn‚Äôt exist</li>\n        <li><code>IndexError</code> ‚Äì accessing out-of-range index</li>\n      </ul>\n    `,\n        proTip: 'Don‚Äôt hide all errors with a generic <code>except</code>. Be specific and only catch what you expect ‚Äî that‚Äôs real defensive programming.',\n        codeSamples: [{\n          language: 'python',\n          code: `try:\n    num = int(input(\"Enter a number: \"))\n    print(10 / num)\nexcept ValueError:\n    print(\"Please enter a valid number.\")\nexcept ZeroDivisionError:\n    print(\"Can't divide by zero.\")`\n        }]\n      };\n    case 'python-oop':\n      return {\n        slug: 'python-oop',\n        title: 'Object-Oriented Python',\n        content: `\n      <p>Python isn‚Äôt just about writing simple scripts ‚Äî it also supports <strong>Object-Oriented Programming (OOP)</strong>. This lets you model real-world things using <em>classes</em> and <em>objects</em>. Think of it like building with LEGO ‚Äî each piece (object) has its own shape and job, and together they form a complete system.</p>\n\n      <h3>üß± Class & Object ‚Äì The Basics</h3>\n      <p>A <strong>class</strong> is like a blueprint, and an <strong>object</strong> is a real thing built from that blueprint.</p>\n      <pre><code>class Car:\n    def __init__(self, brand):\n        self.brand = brand\n\n    def drive(self):\n        print(self.brand + \" is driving.\")\n\n# Create an object\nmy_car = Car(\"Tesla\")\nmy_car.drive()  # Output: Tesla is driving.\n</code></pre>\n\n      <h3>‚öôÔ∏è The <code>__init__</code> Method</h3>\n      <p>This is the constructor. It runs automatically when you create an object and is used to set initial values.</p>\n\n      <h3>üôã‚Äç‚ôÇÔ∏è The <code>self</code> Parameter</h3>\n      <p><code>self</code> refers to the current object. Every instance method must have it as the first parameter.</p>\n\n      <h3>üîê Encapsulation ‚Äì Protecting Data</h3>\n      <p>We use naming conventions to signal how variables should be used:</p>\n      <ul class=\"list-disc pl-6\">\n        <li><code>self.name</code>: Public ‚Äì can be accessed from outside</li>\n        <li><code>self._name</code>: Protected ‚Äì meant for internal use</li>\n        <li><code>self.__name</code>: Private ‚Äì not directly accessible</li>\n      </ul>\n\n      <h3>üß¨ Inheritance ‚Äì Reusing Code</h3>\n      <p>One class can inherit features from another class. Think of it like a child inheriting traits from a parent.</p>\n      <pre><code>class ElectricCar(Car):\n    def charge(self):\n        print(self.brand + \" is charging.\")\n\nev = ElectricCar(\"Nissan Leaf\")\nev.drive()\nev.charge()</code></pre>\n\n      <h3>üé≠ Method Overriding</h3>\n      <p>A subclass can modify methods from the parent class to behave differently.</p>\n      <pre><code>class ElectricCar(Car):\n    def drive(self):\n        print(self.brand + \" drives silently.\")</code></pre>\n\n      <h3>üìå Check Object Type</h3>\n      <p>You can check what class an object belongs to using <code>type()</code> or <code>isinstance()</code>.</p>\n      <pre><code>print(isinstance(my_car, Car))  # True</code></pre>\n    `,\n        proTip: 'Use OOP when your program involves reusable pieces or real-world objects. It helps you write cleaner, more modular code that‚Äôs easier to manage.',\n        codeSamples: [{\n          language: 'python',\n          code: `class Animal:\n    def speak(self):\n        print(\"Animal speaks.\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(\"Dog barks.\")\n\npet = Dog()\npet.speak()  # Dog barks.`\n        }]\n      };\n    case 'python-advanced':\n      return {\n        slug: 'python-advanced',\n        title: 'Advanced Python Tips',\n        content: `\n      <p>Now that you‚Äôve got a strong grip on the basics, let‚Äôs level up your Python skills with some neat tricks and pro-level features you‚Äôll actually use in real projects.</p>\n\n      <h3>üß† List Comprehensions</h3>\n      <p>Write cleaner and faster loops in one line.</p>\n      <pre><code>squares = [x*x for x in range(5)]\nprint(squares)  # [0, 1, 4, 9, 16]</code></pre>\n\n      <h3>üß∞ Lambda Functions</h3>\n      <p>Quick anonymous functions, great for simple one-liners.</p>\n      <pre><code>double = lambda x: x * 2\nprint(double(4))  # 8</code></pre>\n\n      <h3>‚öôÔ∏è *args and **kwargs</h3>\n      <p>Pass flexible numbers of arguments to functions.</p>\n      <pre><code>def greet(*names):\n    for name in names:\n        print(\"Hi\", name)\n\ngreet(\"Alice\", \"Bob\")</code></pre>\n\n      <pre><code>def info(**data):\n    for key, value in data.items():\n        print(key, \":\", value)\n\ninfo(name=\"Python\", version=3.11)</code></pre>\n\n      <h3>üöÄ Unpacking with *</h3>\n      <p>You can use <code>*</code> and <code>**</code> to unpack lists/dicts into function arguments.</p>\n      <pre><code>nums = [1, 2, 3]\nprint(*nums)  # prints: 1 2 3</code></pre>\n\n      <h3>üí° Ternary Operators</h3>\n      <p>Short if-else logic:</p>\n      <pre><code>age = 18\nstatus = \"Adult\" if age >= 18 else \"Minor\"</code></pre>\n\n      <h3>üß± Chaining Comparisons</h3>\n      <p>Python lets you write clean range checks:</p>\n      <pre><code>x = 15\nif 10 &lt; x &lt; 20:\n    print(\"In range\")</code></pre>\n\n      <h3>üîÑ Enumerate & Zip</h3>\n      <p>Loop with index using <code>enumerate()</code>, or pair items using <code>zip()</code>:</p>\n      <pre><code>colors = ['red', 'green']\nfor i, color in enumerate(colors):\n    print(i, color)\n\nnames = ['Alice', 'Bob']\nscores = [85, 90]\nfor name, score in zip(names, scores):\n    print(name, score)</code></pre>\n    `,\n        proTip: 'Start using list comprehensions, lambda, and unpacking in small scripts to build confidence ‚Äî they make your code look elegant and powerful.',\n        codeSamples: [{\n          language: 'python',\n          code: `nums = [1, 2, 3, 4]\nsquared = [n*n for n in nums if n % 2 == 0]\nprint(squared)  # [4, 16]`\n        }]\n      };\n    case 'python-best-practices':\n      return {\n        slug: 'python-best-practices',\n        title: 'Best Practices',\n        content: `\n      <p>Writing Python isn‚Äôt just about making things work ‚Äî it‚Äôs about writing clean, efficient, and readable code. Here are some golden rules that‚Äôll make you a Python pro in the real world.</p>\n\n      <h3>üßº Use Meaningful Variable Names</h3>\n      <p>Names like <code>user_age</code> are way better than <code>x</code> or <code>data1</code>. It helps your future self and teammates understand your code faster.</p>\n\n      <h3>üìè Stick to PEP8</h3>\n      <p>PEP8 is Python's official style guide. Use 4 spaces for indentation, limit lines to 79 characters, and add spaces around operators. Use tools like <code>black</code> or <code>flake8</code> to format your code automatically.</p>\n\n      <h3>üö´ Avoid Using Magic Numbers</h3>\n      <p>Hardcoded values make code confusing. Use constants or variables:</p>\n      <pre><code>MAX_SCORE = 100\nif score &gt; MAX_SCORE:\n    print(\"Invalid\")</code></pre>\n\n      <h3>üì¶ Keep Your Code Modular</h3>\n      <p>Break code into small functions. Each function should do one clear task.</p>\n\n      <h3>üß™ Write Tests</h3>\n      <p>Even small scripts benefit from basic tests. Python has a built-in <code>unittest</code> module, and you can also try <code>pytest</code> for more power.</p>\n\n      <h3>üêç Use Pythonic Idioms</h3>\n      <p>Prefer clean, native constructs over verbose code:</p>\n      <pre><code># Instead of this\nif x == True:\n    ...\n\n# Do this\nif x:\n    ...</code></pre>\n\n      <h3>üìÅ Keep File Structure Clean</h3>\n      <p>For bigger projects, split your code into modules, packages, and keep config, data, and main logic separate.</p>\n\n      <h3>üìÑ Document Your Code</h3>\n      <p>Use comments only when necessary, but always write docstrings for functions and classes. Describe what it does, what it expects, and what it returns.</p>\n      <pre><code>def get_total(price, tax):\n    \"\"\"Calculate total price after tax.\"\"\"\n    return price + (price * tax)</code></pre>\n    `,\n        proTip: 'Think about the next person reading your code ‚Äî make it so clear they don‚Äôt need to ask questions. That‚Äôs true professionalism.',\n        codeSamples: [{\n          language: 'python',\n          code: `# Bad\ndef d(x):\n    return x*1.1\n\n# Good\ndef apply_tax(price):\n    \"\"\"Apply 10% tax to the price.\"\"\"\n    return price * 1.1`\n        }]\n      };\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["PythonTopics","id","title","slug","PythonTopicContent","content","proTip","codeSamples","language","code","undefined"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\data\\python\\topics-data.ts"],"sourcesContent":["import { Topic, TopicContent } from \"../../../../models/topic.model\";\r\n\r\nexport const PythonTopics: Topic[] = [\r\n  { id: 'python-introduction', title: 'Introduction to Python', slug: 'python-introduction' },\r\n  { id: 'python-variables', title: 'Variables & Data Types', slug: 'python-syntax-variables' },\r\n  { id: 'python-conditions', title: 'Conditional Statements', slug: 'python-conditions' },\r\n  { id: 'python-loops', title: 'Loops in Python', slug: 'python-loops' },\r\n  { id: 'python-functions', title: 'Functions & Parameters', slug: 'python-functions' },\r\n  { id: 'python-lists-tuples', title: 'Lists & Tuples', slug: 'python-lists-tuples' },\r\n  { id: 'python-dictionaries', title: 'Dictionaries in Python', slug: 'python-dictionaries' },\r\n  { id: 'python-strings', title: 'Working with Strings', slug: 'python-strings' },\r\n  { id: 'python-modules', title: 'Modules & Packages', slug: 'python-modules' },\r\n  { id: 'python-files', title: 'File Handling', slug: 'python-files' },\r\n  { id: 'python-exceptions', title: 'Exception Handling', slug: 'python-exceptions' },\r\n  { id: 'python-oop', title: 'Object-Oriented Python', slug: 'python-oop' },\r\n  { id: 'python-advanced', title: 'Advanced Python Tips', slug: 'python-advanced' },\r\n  { id: 'python-best-practices', title: 'Best Practices', slug: 'python-best-practices' }\r\n];\r\n\r\nexport function PythonTopicContent(slug: string): TopicContent | undefined {\r\n  switch (slug) {\r\n    case 'python-introduction':\r\n      return {\r\n        slug: 'python-introduction',\r\n        title: 'Introduction to Python',\r\n        content: `\r\n<p>Python is one of the most popular programming languages today. It's loved for its simplicity, readability, and versatility. Whether you're building websites, automating tasks, crunching data, or training AI models ‚Äî Python has got your back.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî• Why Python?</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><strong>Beginner-friendly:</strong> Its syntax is like writing English.</li>\r\n  <li><strong>Flexible:</strong> From web development to machine learning to scripting ‚Äî Python does it all.</li>\r\n  <li><strong>Massive community:</strong> Tons of libraries, tutorials, and help available online.</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Real-Life Analogy</h3>\r\n<p>Think of Python as the ‚ÄúSwiss Army Knife‚Äù of programming ‚Äî it's not always the fastest tool, but it's insanely useful and easy to handle.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üöÄ Where is Python Used?</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><strong>Web Development:</strong> With frameworks like Django and Flask</li>\r\n  <li><strong>Data Science:</strong> NumPy, Pandas, Matplotlib, and Jupyter</li>\r\n  <li><strong>AI/ML:</strong> TensorFlow, PyTorch</li>\r\n  <li><strong>Automation & Scripting:</strong> For repetitive tasks, file handling, web scraping</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Fun Fact</h3>\r\n<p>Python was named after the British comedy group ‚ÄúMonty Python‚Äù ‚Äî not the snake üêç.</p>\r\n        `,\r\n        proTip: 'Try using Python in an online playground like Replit or Jupyter Notebook before installing anything locally.',\r\n        codeSamples: [\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Your first Python code\r\nprint(\"Hello, IgKnight!\")\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Simple math\r\na = 10\r\nb = 5\r\nprint(\"Sum is:\", a + b)\r\n            `\r\n          }\r\n        ]\r\n      };\r\n    case 'python-syntax-variables':\r\n      return {\r\n        slug: 'python-syntax-variables',\r\n        title: 'Python Syntax & Variables',\r\n        content: `\r\n<p>Python's syntax is clean and beginner-friendly. You don't need curly braces <code>{ }</code> or semicolons <code>;</code> ‚Äî indentation and simplicity rule here.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úçÔ∏è Writing Python</h3>\r\n<p>Each line of code does something meaningful. Indentation (spaces/tabs at the beginning) is how Python defines code blocks (like inside loops or functions).</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üî§ Declaring Variables</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Python is dynamically typed ‚Äî you don‚Äôt need to declare the data type.</li>\r\n  <li>Just assign a value using <code>=</code> and Python figures it out.</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Variable Naming Rules</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Can include letters, numbers, and underscores (e.g., <code>user_name</code>)</li>\r\n  <li>Cannot start with a number</li>\r\n  <li>Case-sensitive (<code>age</code> and <code>Age</code> are different)</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üìä Common Data Types</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><code>int</code>: Whole numbers</li>\r\n  <li><code>float</code>: Decimal numbers</li>\r\n  <li><code>str</code>: Text (strings)</li>\r\n  <li><code>bool</code>: True or False</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Example</h3>\r\n<p>Here's how you'd declare some variables in Python:</p>\r\n        `,\r\n        proTip: 'Use descriptive variable names ‚Äî avoid single-letter variables unless you are writing a quick loop.',\r\n        codeSamples: [\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Variable examples\r\nname = \"Alice\"\r\nage = 25\r\nheight = 5.6\r\nis_student = True\r\n\r\nprint(name, age, height, is_student)\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Bad vs Good\r\na = \"John\"         # ‚ùå Avoid (not clear)\r\nuser_name = \"John\" # ‚úÖ Better\r\n            `\r\n          }\r\n        ]\r\n      };\r\n          \r\n    case 'python-loops':\r\n      return {\r\n        slug: 'python-loops',\r\n        title: 'Loops in Python',\r\n        content: `\r\n<p>Loops let you execute a block of code multiple times. They are one of the most important tools in programming ‚Äî especially useful when working with lists, user input, files, or repetitive tasks.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üåÄ Why Use Loops?</h3>\r\n<p>Imagine printing \"Hello\" 100 times ‚Äî doing it manually would be a nightmare. With a loop, you can do it in just 2‚Äì3 lines. Loops save time and make your code much cleaner.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÅ Types of Loops in Python</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><strong><code>for</code> loop</strong> ‚Äî When you know what you're looping through (like a list, string, or range).</li>\r\n  <li><strong><code>while</code> loop</strong> ‚Äî When you want to keep looping until something changes (like waiting for a user to guess the right number).</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Real-Life Analogy</h3>\r\n<p><code>for</code> loop is like a to-do list: you check off each item in order.<br>\r\n<code>while</code> loop is like watching Netflix: you keep watching episodes <i>while</i> you're not sleepy.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß≠ The <code>for</code> Loop</h3>\r\n<p><code>for</code> loops are used to iterate over sequences like lists, tuples, dictionaries, strings, or even ranges of numbers.</p>\r\n<p><strong>Syntax:</strong> <code>for item in sequence:</code></p>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Automatically stops after the last item</li>\r\n  <li>No need to manually increment a counter</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß™ The <code>while</code> Loop</h3>\r\n<p><code>while</code> loops keep running <strong>as long as</strong> the condition is true.</p>\r\n<p><strong>Syntax:</strong> <code>while condition:</code></p>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Make sure the condition eventually becomes false, or it‚Äôll loop forever!</li>\r\n  <li>Usually used with counters, user input, or unknown lengths</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ† Useful Keywords Inside Loops</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><code>break</code> ‚Äî Stop the loop immediately</li>\r\n  <li><code>continue</code> ‚Äî Skip the current iteration and go to the next one</li>\r\n  <li><code>else</code> ‚Äî Optional block that runs after the loop finishes (only if loop wasn‚Äôt broken)</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Common Mistakes to Avoid</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Forgetting to update variables in <code>while</code> loops (causes infinite loop)</li>\r\n  <li>Using <code>break</code> carelessly ‚Äî can skip important steps</li>\r\n  <li>Modifying a list while looping through it ‚Äî use <code>list.copy()</code> or <code>range(len(list))</code> instead</li>\r\n</ul>\r\n        `,\r\n        proTip: 'Use `for` loops when dealing with a sequence, and `while` loops when waiting on a condition ‚Äî and always double-check for infinite loops!',\r\n        codeSamples: [\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# FOR loop - print each item in a list\r\nfruits = [\"apple\", \"banana\", \"cherry\"]\r\n\r\nfor fruit in fruits:\r\n    print(\"I like\", fruit)\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# FOR loop using range()\r\nfor i in range(1, 6):\r\n    print(\"Number:\", i)\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# WHILE loop - keep looping while condition is true\r\ncount = 1\r\n\r\nwhile count <= 3:\r\n    print(\"Counting:\", count)\r\n    count += 1\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Using break and continue\r\nfor i in range(5):\r\n    if i == 3:\r\n        break  # Exit early when i == 3\r\n    if i == 1:\r\n        continue  # Skip when i == 1\r\n    print(i)\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# WHILE loop with user input\r\npassword = \"\"\r\n\r\nwhile password != \"secret123\":\r\n    password = input(\"Enter password: \")\r\n\r\nprint(\"Access granted!\")\r\n            `\r\n          }\r\n        ]\r\n      };\r\n       case 'python-conditions':\r\n      return {\r\n        slug: 'python-conditions',\r\n        title: 'Conditional Statements',\r\n        content: `\r\n<p>Conditional statements help you make decisions in code. Python supports <code>if</code>, <code>elif</code>, and <code>else</code> to handle different conditions ‚Äî just like everyday decision-making.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç Basic Syntax</h3>\r\n<p>Use <code>if</code> to check a condition. If it‚Äôs true, the block runs. Otherwise, try <code>elif</code> (else if), and finally <code>else</code> if nothing else matches.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß† Operators You‚Äôll Use</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><code>==</code>: Equals</li>\r\n  <li><code>!=</code>: Not equal</li>\r\n  <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>: Comparison</li>\r\n  <li><code>and</code>, <code>or</code>, <code>not</code>: Logical operators</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Real Example</h3>\r\n<p>Let‚Äôs say you‚Äôre checking someone's age to see if they can vote:</p>\r\n        `,\r\n        proTip: 'Keep your indentation consistent! Python relies on it ‚Äî 4 spaces is the standard.',\r\n        codeSamples: [\r\n          {\r\n            language: 'python',\r\n            code: `\r\nage = 20\r\n\r\nif age >= 18:\r\n    print(\"You can vote!\")\r\nelif age > 0:\r\n    print(\"You are too young to vote.\")\r\nelse:\r\n    print(\"Invalid age.\")\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Using multiple conditions\r\nuser = \"admin\"\r\nlogged_in = True\r\n\r\nif user == \"admin\" and logged_in:\r\n    print(\"Welcome, admin!\")\r\nelse:\r\n    print(\"Access denied.\")\r\n            `\r\n          }\r\n        ]\r\n      };\r\n          case 'python-functions':\r\n      return {\r\n        slug: 'python-functions',\r\n        title: 'Functions in Python',\r\n        content: `\r\n<p>Functions are reusable blocks of code that let you group related logic together and give it a name. Instead of repeating code again and again, you define it once as a function and then \"call\" it whenever you need it.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß± Why Use Functions?</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Organize your code</li>\r\n  <li>Avoid repetition (DRY: Don‚Äôt Repeat Yourself)</li>\r\n  <li>Make your program easier to understand and maintain</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîß Defining a Function</h3>\r\n<p>You define a function using the <code>def</code> keyword, followed by a name and parentheses:</p>\r\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def greet():\r\n    print(\"Hello there!\")</code></pre>\r\n\r\n<p>This defines the function. To actually run it, you need to <strong>call</strong> it:</p>\r\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>greet()</code></pre>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ Parameters and Arguments</h3>\r\n<p>Functions can accept inputs (called <strong>parameters</strong>) so they can do more dynamic tasks:</p>\r\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def greet(name):\r\n    print(\"Hello\", name)</code></pre>\r\n<p>Here, <code>name</code> is a parameter. When calling the function, you pass an <strong>argument</strong>:</p>\r\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>greet(\"Alice\")</code></pre>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Returning Values</h3>\r\n<p>Functions can give back a value using the <code>return</code> keyword:</p>\r\n<pre class=\"bg-gray-800 p-2 rounded text-sm text-white\"><code>def add(a, b):\r\n    return a + b\r\n\r\nresult = add(3, 4)\r\nprint(result)  # 7</code></pre>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîê Scope: Local vs Global Variables</h3>\r\n<p>Variables created inside a function only exist there (they‚Äôre <strong>local</strong>). You can‚Äôt use them outside the function.</p>\r\n<p>Variables outside a function are <strong>global</strong> and can be accessed from anywhere ‚Äî but be careful not to overwrite them unintentionally!</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üåü Real-Life Analogy</h3>\r\n<p>Think of a function like a blender ‚Äî you define what it does (blend ingredients), then call it when needed (make a smoothie) and optionally get something back (smoothie üçì).</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ† Advanced (But Useful!) Concepts</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><strong>Default values:</strong> Parameters can have default values</li>\r\n  <li><strong>*args and **kwargs:</strong> Accept flexible numbers of arguments</li>\r\n  <li><strong>Lambda:</strong> One-line anonymous functions for quick tasks</li>\r\n</ul>\r\n        `,\r\n        proTip: 'Always give your functions meaningful names! Instead of \"doStuff()\", use \"calculate_discount()\" or \"fetch_user_data()\" ‚Äî makes your code much clearer.',\r\n        codeSamples: [\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Basic function\r\ndef greet():\r\n    print(\"Hi there!\")\r\n\r\ngreet()\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Function with parameters\r\ndef greet(name):\r\n    print(\"Welcome,\", name)\r\n\r\ngreet(\"Nina\")\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Function with default parameters\r\ndef welcome(user=\"Guest\"):\r\n    print(\"Hello,\", user)\r\n\r\nwelcome()\r\nwelcome(\"Alex\")\r\n            `\r\n          },\r\n          {\r\n            language: 'python',\r\n            code: `\r\n# Lambda (anonymous function)\r\nsquare = lambda x: x * x\r\nprint(square(6))  # 36\r\n            `\r\n          }\r\n        ]\r\n      };\r\n      case 'python-lists-tuples':\r\n  return {\r\n    slug: 'python-lists-tuples',\r\n    title: 'Lists & Tuples',\r\n    content: `\r\n<p>In Python, <strong>lists</strong> and <strong>tuples</strong> are used to store collections of items. They‚Äôre like containers that can hold multiple values ‚Äî great when you want to group things together.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üß∫ What is a List?</h3>\r\n<p>A <strong>list</strong> is a flexible, changeable (mutable) collection. Think of it as a to-do list: you can add, remove, or update items anytime.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">‚úÖ Common List Operations</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Create: <code>fruits = ['apple', 'banana', 'cherry']</code></li>\r\n  <li>Access: <code>fruits[0]</code> ‚Üí 'apple'</li>\r\n  <li>Update: <code>fruits[1] = 'mango'</code></li>\r\n  <li>Add: <code>fruits.append('orange')</code></li>\r\n  <li>Remove: <code>fruits.remove('banana')</code></li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ What is a Tuple?</h3>\r\n<p>A <strong>tuple</strong> is like a list, but <strong>immutable</strong> ‚Äî once created, it can‚Äôt be changed. Use it when the data shouldn‚Äôt be edited (like coordinates).</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîê Tuple Basics</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Create: <code>point = (3, 4)</code></li>\r\n  <li>Access: <code>point[0]</code> ‚Üí 3</li>\r\n  <li>Can‚Äôt modify: <code>point[0] = 10</code> ‚ùå (throws error)</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîç When to Use What?</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>‚úÖ Use <strong>lists</strong> when data will change (shopping carts, scores)</li>\r\n  <li>‚úÖ Use <strong>tuples</strong> when data must stay constant (coordinates, fixed configs)</li>\r\n</ul>\r\n    `,\r\n    proTip: 'If you ever need to convert between them, use list() and tuple(). Like: tuple(my_list) or list(my_tuple)',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `\r\n# List example\r\ngroceries = ['milk', 'eggs', 'bread']\r\ngroceries.append('butter')\r\nprint(groceries)\r\n        `\r\n      },\r\n      {\r\n        language: 'python',\r\n        code: `\r\n# Tuple example\r\nlocation = (52.52, 13.40)\r\nprint(\"Latitude:\", location[0])\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'python-dictionaries':\r\n  return {\r\n    slug: 'python-dictionaries',\r\n    title: 'Dictionaries',\r\n    content: `\r\n<p>In Python, a <strong>dictionary</strong> is like a mini-database that stores data in <strong>key-value</strong> pairs. Instead of using positions like in lists, you use <em>names</em> (keys) to access values.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîë What is a Dictionary?</h3>\r\n<p>Think of it like a real dictionary: you look up a word (key) to get its meaning (value).</p>\r\n<p>Example: <code>{ \"name\": \"Alice\", \"age\": 25 }</code></p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üí° Why Use Dictionaries?</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>They‚Äôre perfect for labeled data ‚Äî like a user profile or config.</li>\r\n  <li>They‚Äôre fast for lookups, updates, and deletions using keys.</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è Common Dictionary Operations</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Create: <code>person = {\"name\": \"Alice\", \"age\": 25}</code></li>\r\n  <li>Access: <code>person[\"name\"]</code> ‚Üí 'Alice'</li>\r\n  <li>Update: <code>person[\"age\"] = 26</code></li>\r\n  <li>Add: <code>person[\"city\"] = \"New York\"</code></li>\r\n  <li>Delete: <code>del person[\"age\"]</code></li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üîÑ Looping Through a Dictionary</h3>\r\n<p>You can loop over keys and values easily:</p>\r\n<pre class=\"bg-gray-800 text-white p-2 rounded text-sm\">for key, value in person.items():\r\n  print(key, \"‚Üí\", value)</pre>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üö´ Safe Access with get()</h3>\r\n<p>Use <code>dict.get(\"key\")</code> to avoid errors if the key doesn‚Äôt exist. It returns <code>None</code> or a default value.</p>\r\n<p>Example: <code>person.get(\"email\", \"Not provided\")</code></p>\r\n    `,\r\n    proTip: 'Dictionaries are unordered in versions below Python 3.7. From Python 3.7+, they preserve insertion order!',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `\r\n# Creating a dictionary\r\nuser = {\r\n  \"username\": \"coolcoder\",\r\n  \"followers\": 120,\r\n  \"verified\": True\r\n}\r\n\r\n# Updating a key\r\nuser[\"followers\"] += 30\r\n\r\n# Safe access\r\nemail = user.get(\"email\", \"Not provided\")\r\nprint(email)\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'python-strings':\r\n  return {\r\n    slug: 'python-strings',\r\n    title: 'Strings in Python',\r\n    content: `\r\n<p>In Python, a <strong>string</strong> is just a sequence of characters ‚Äî like words, sentences, or even emojis! They're one of the most used data types in any program.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßµ What is a String?</h3>\r\n<p>A string is text wrapped in quotes: <code>\"Hello\"</code>, <code>'World'</code>, or even <code>\"\"\"Multi-line string\"\"\"</code>.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üéØ Real-World Use</h3>\r\n<p>Think about user names, messages, tweets, or emails ‚Äî they‚Äôre all stored and handled as strings in code.</p>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üõ†Ô∏è Common String Operations</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li>Concatenation: <code>\"Hello\" + \" World\"</code></li>\r\n  <li>Length: <code>len(\"Hello\")</code> ‚Üí 5</li>\r\n  <li>Access: <code>msg[0]</code> ‚Üí first character</li>\r\n  <li>Slicing: <code>msg[1:4]</code> ‚Üí characters from index 1 to 3</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üßº String Methods</h3>\r\n<ul class=\"list-disc list-inside text-gray-300\">\r\n  <li><code>.lower()</code> ‚Äì Convert to lowercase</li>\r\n  <li><code>.upper()</code> ‚Äì Convert to uppercase</li>\r\n  <li><code>.strip()</code> ‚Äì Remove surrounding spaces</li>\r\n  <li><code>.replace(\"a\", \"b\")</code> ‚Äì Replace characters</li>\r\n  <li><code>.split()</code> ‚Äì Break string into a list</li>\r\n</ul>\r\n\r\n<h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">üì¶ f-Strings: Easy Formatting</h3>\r\n<p>f-Strings let you insert variables into strings easily:</p>\r\n<pre class=\"bg-gray-800 text-white p-2 rounded text-sm\">\r\nname = \"Alice\"\r\nage = 25\r\nprint(f\"My name is {name} and I'm {age} years old.\")\r\n</pre>\r\n    `,\r\n    proTip: 'Strings are immutable ‚Äî you can‚Äôt change a character inside a string, but you can build a new string using slicing or .replace().',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `\r\n# Basic string examples\r\nmessage = \"  Welcome to IgKnight!  \"\r\nprint(message.strip().upper())\r\n\r\n# f-String formatting\r\nuser = \"John\"\r\nscore = 99\r\nprint(f\"Hey {user}, your score is {score}!\")\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'python-modules':\r\n  return {\r\n    slug: 'python-modules',\r\n    title: 'Modules & Packages',\r\n    content: `\r\n      <p>As your Python code grows bigger, you don't want to keep everything in one massive file. That's where <strong>modules</strong> and <strong>packages</strong> come in ‚Äî they're how Python helps you organize your code like a pro.</p>\r\n\r\n      <h3>üîπ What's a Module?</h3>\r\n      <p>A <strong>module</strong> is just a single Python file (.py) that contains variables, functions, or classes you want to reuse elsewhere.</p>\r\n      <p>For example, imagine a file called <code>math_utils.py</code> with this content:</p>\r\n\r\n      <pre><code>def square(x):\r\n    return x * x\r\n\r\npi = 3.14</code></pre>\r\n\r\n      <p>You can use this in another file by importing it:</p>\r\n      <pre><code>import math_utils\r\n\r\nprint(math_utils.square(4))   # ‚û§ 16\r\nprint(math_utils.pi)          # ‚û§ 3.14</code></pre>\r\n\r\n      <h3>üîπ What‚Äôs a Package?</h3>\r\n      <p>A <strong>package</strong> is a folder that contains multiple related modules ‚Äî kind of like a folder of utilities.</p>\r\n      <p>To make a folder a package, you just add a special file called <code>__init__.py</code> inside it. Even if it‚Äôs empty, Python recognizes it as a package.</p>\r\n\r\n      <p>Example structure:</p>\r\n      <pre><code>utilities/\r\n‚îú‚îÄ‚îÄ __init__.py\r\n‚îú‚îÄ‚îÄ math_utils.py\r\n‚îî‚îÄ‚îÄ string_utils.py</code></pre>\r\n\r\n      <p>And you can import like this:</p>\r\n      <pre><code>from utilities import math_utils\r\nprint(math_utils.square(5))</code></pre>\r\n\r\n      <h3>üß† Why Use Them?</h3>\r\n      <ul class=\"list-disc pl-6\">\r\n        <li>Keep your code clean and organized</li>\r\n        <li>Reuse logic across files and projects</li>\r\n        <li>Split features into meaningful chunks (like auth, db, UI, etc.)</li>\r\n      </ul>\r\n\r\n      <h3>üåê Built-in & External Modules</h3>\r\n      <p>Python comes with tons of built-in modules (like <code>math</code>, <code>random</code>, <code>datetime</code>) and you can install external ones using <code>pip</code>.</p>\r\n\r\n      <pre><code>import random\r\nprint(random.randint(1, 10))</code></pre>\r\n\r\n      <p>Want to use an external module?</p>\r\n      <pre><code>pip install requests</code></pre>\r\n      <pre><code>import requests\r\nresponse = requests.get('https://api.example.com')</code></pre>\r\n\r\n      <h3>üì¶ Pro Tip: Use Aliases</h3>\r\n      <pre><code>import math_utils as m\r\nprint(m.square(3))</code></pre>\r\n      <p>Aliases make your imports shorter and cleaner.</p>\r\n    `,\r\n    proTip: 'Use modules and packages early ‚Äî even for small projects. It makes scaling and maintaining your code 10x easier.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `# math_utils.py\r\ndef add(a, b):\r\n    return a + b`\r\n      },\r\n      {\r\n        language: 'python',\r\n        code: `# main.py\r\nimport math_utils\r\n\r\nprint(math_utils.add(10, 5))  # Output: 15`\r\n      }\r\n    ]\r\n  };\r\n  case 'python-files':\r\n  return {\r\n    slug: 'python-files',\r\n    title: 'File Handling',\r\n    content: `\r\n      <p>In real-world apps, you often need to read from or write to files ‚Äî whether it‚Äôs a config file, user data, or logs. Python makes this super easy with built-in file handling tools.</p>\r\n\r\n      <h3>üìÇ Opening a File</h3>\r\n      <p>Use the <code>open()</code> function:</p>\r\n      <pre><code>file = open('notes.txt', 'r')</code></pre>\r\n      <ul class=\"list-disc pl-6\">\r\n        <li><code>'r'</code> ‚Äì Read (default)</li>\r\n        <li><code>'w'</code> ‚Äì Write (overwrites if exists)</li>\r\n        <li><code>'a'</code> ‚Äì Append (adds to end)</li>\r\n        <li><code>'x'</code> ‚Äì Create (fails if exists)</li>\r\n        <li><code>'b'</code> ‚Äì Binary mode (add to above)</li>\r\n      </ul>\r\n\r\n      <h3>üìñ Reading from Files</h3>\r\n      <pre><code>file = open('notes.txt', 'r')\r\ncontent = file.read()\r\nprint(content)\r\nfile.close()</code></pre>\r\n\r\n      <p>Better way? Use <strong><code>with</code></strong> ‚Äî it auto-closes:</p>\r\n      <pre><code>with open('notes.txt', 'r') as file:\r\n    print(file.read())</code></pre>\r\n\r\n      <h3>‚úç Writing to Files</h3>\r\n      <pre><code>with open('notes.txt', 'w') as file:\r\n    file.write('Hello IgKnight!')</code></pre>\r\n\r\n      <p>To add instead of overwrite:</p>\r\n      <pre><code>with open('notes.txt', 'a') as file:\r\n    file.write('\\\\nMore lines...')</code></pre>\r\n\r\n      <h3>üß™ Useful Read Methods</h3>\r\n      <ul class=\"list-disc pl-6\">\r\n        <li><code>read()</code> ‚Äì Entire content</li>\r\n        <li><code>readline()</code> ‚Äì One line</li>\r\n        <li><code>readlines()</code> ‚Äì List of lines</li>\r\n      </ul>\r\n\r\n      <h3>üîê Working with Files Safely</h3>\r\n      <p>Always use <code>with open(...) as file</code> to avoid issues like memory leaks or locked files.</p>\r\n\r\n      <h3>üì¶ Where Files Are Stored?</h3>\r\n      <p>If you use just a filename like <code>'data.txt'</code>, it‚Äôll read/write in the current working directory. Use full paths if needed.</p>\r\n    `,\r\n    proTip: 'Always use the <code>with</code> block when working with files. It saves you from forgetting to close files and prevents resource leaks.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `# Writing to a file\r\nwith open('example.txt', 'w') as f:\r\n    f.write('Hello, IgKnight!')`\r\n      },\r\n      {\r\n        language: 'python',\r\n        code: `# Reading from a file\r\nwith open('example.txt', 'r') as f:\r\n    print(f.read())`\r\n      }\r\n    ]\r\n  };\r\n  case 'python-exceptions':\r\n  return {\r\n    slug: 'python-exceptions',\r\n    title: 'Exception Handling',\r\n    content: `\r\n      <p>When your code runs into unexpected problems ‚Äî like dividing by zero, missing files, or wrong user input ‚Äî Python raises <strong>exceptions</strong>. Instead of crashing, you can handle these errors gracefully using <code>try</code> and <code>except</code>.</p>\r\n\r\n      <h3>‚ö†Ô∏è What Is an Exception?</h3>\r\n      <p>An exception is a runtime error that stops your program unless you handle it. Example:</p>\r\n      <pre><code>num = int(\"abc\")  # This raises a ValueError</code></pre>\r\n\r\n      <h3>‚úÖ Using try-except</h3>\r\n      <p>Wrap risky code in a <code>try</code> block, and handle errors in <code>except</code>:</p>\r\n      <pre><code>try:\r\n    result = 10 / 0\r\nexcept ZeroDivisionError:\r\n    print(\"Can't divide by zero!\")</code></pre>\r\n\r\n      <h3>üéØ Catching Specific Errors</h3>\r\n      <p>You can catch different exceptions separately:</p>\r\n      <pre><code>try:\r\n    x = int(\"abc\")\r\nexcept ValueError:\r\n    print(\"Not a valid number!\")</code></pre>\r\n\r\n      <h3>üì¶ Catch-All (Not Recommended)</h3>\r\n      <p>You can catch anything ‚Äî but don‚Äôt overuse it:</p>\r\n      <pre><code>try:\r\n    risky_code()\r\nexcept Exception as e:\r\n    print(\"Something went wrong:\", e)</code></pre>\r\n\r\n      <h3>üßº Finally Block</h3>\r\n      <p><code>finally</code> runs no matter what ‚Äî great for cleanup:</p>\r\n      <pre><code>try:\r\n    f = open(\"data.txt\")\r\n    # do stuff\r\nexcept FileNotFoundError:\r\n    print(\"File not found.\")\r\nfinally:\r\n    print(\"Done trying.\")</code></pre>\r\n\r\n      <h3>üöÄ Raising Your Own Exceptions</h3>\r\n      <p>You can raise errors manually when something‚Äôs wrong:</p>\r\n      <pre><code>age = -5\r\nif age &lt; 0:\r\n    raise ValueError(\"Age can't be negative!\")</code></pre>\r\n\r\n      <h3>üîç Common Exceptions</h3>\r\n      <ul class=\"list-disc pl-6\">\r\n        <li><code>ZeroDivisionError</code> ‚Äì dividing by zero</li>\r\n        <li><code>ValueError</code> ‚Äì wrong type (e.g. converting \"abc\" to int)</li>\r\n        <li><code>TypeError</code> ‚Äì operation on wrong data types</li>\r\n        <li><code>FileNotFoundError</code> ‚Äì file doesn‚Äôt exist</li>\r\n        <li><code>IndexError</code> ‚Äì accessing out-of-range index</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Don‚Äôt hide all errors with a generic <code>except</code>. Be specific and only catch what you expect ‚Äî that‚Äôs real defensive programming.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `try:\r\n    num = int(input(\"Enter a number: \"))\r\n    print(10 / num)\r\nexcept ValueError:\r\n    print(\"Please enter a valid number.\")\r\nexcept ZeroDivisionError:\r\n    print(\"Can't divide by zero.\")`\r\n      }\r\n    ]\r\n  };\r\n    case 'python-oop':\r\n  return {\r\n    slug: 'python-oop',\r\n    title: 'Object-Oriented Python',\r\n    content: `\r\n      <p>Python isn‚Äôt just about writing simple scripts ‚Äî it also supports <strong>Object-Oriented Programming (OOP)</strong>. This lets you model real-world things using <em>classes</em> and <em>objects</em>. Think of it like building with LEGO ‚Äî each piece (object) has its own shape and job, and together they form a complete system.</p>\r\n\r\n      <h3>üß± Class & Object ‚Äì The Basics</h3>\r\n      <p>A <strong>class</strong> is like a blueprint, and an <strong>object</strong> is a real thing built from that blueprint.</p>\r\n      <pre><code>class Car:\r\n    def __init__(self, brand):\r\n        self.brand = brand\r\n\r\n    def drive(self):\r\n        print(self.brand + \" is driving.\")\r\n\r\n# Create an object\r\nmy_car = Car(\"Tesla\")\r\nmy_car.drive()  # Output: Tesla is driving.\r\n</code></pre>\r\n\r\n      <h3>‚öôÔ∏è The <code>__init__</code> Method</h3>\r\n      <p>This is the constructor. It runs automatically when you create an object and is used to set initial values.</p>\r\n\r\n      <h3>üôã‚Äç‚ôÇÔ∏è The <code>self</code> Parameter</h3>\r\n      <p><code>self</code> refers to the current object. Every instance method must have it as the first parameter.</p>\r\n\r\n      <h3>üîê Encapsulation ‚Äì Protecting Data</h3>\r\n      <p>We use naming conventions to signal how variables should be used:</p>\r\n      <ul class=\"list-disc pl-6\">\r\n        <li><code>self.name</code>: Public ‚Äì can be accessed from outside</li>\r\n        <li><code>self._name</code>: Protected ‚Äì meant for internal use</li>\r\n        <li><code>self.__name</code>: Private ‚Äì not directly accessible</li>\r\n      </ul>\r\n\r\n      <h3>üß¨ Inheritance ‚Äì Reusing Code</h3>\r\n      <p>One class can inherit features from another class. Think of it like a child inheriting traits from a parent.</p>\r\n      <pre><code>class ElectricCar(Car):\r\n    def charge(self):\r\n        print(self.brand + \" is charging.\")\r\n\r\nev = ElectricCar(\"Nissan Leaf\")\r\nev.drive()\r\nev.charge()</code></pre>\r\n\r\n      <h3>üé≠ Method Overriding</h3>\r\n      <p>A subclass can modify methods from the parent class to behave differently.</p>\r\n      <pre><code>class ElectricCar(Car):\r\n    def drive(self):\r\n        print(self.brand + \" drives silently.\")</code></pre>\r\n\r\n      <h3>üìå Check Object Type</h3>\r\n      <p>You can check what class an object belongs to using <code>type()</code> or <code>isinstance()</code>.</p>\r\n      <pre><code>print(isinstance(my_car, Car))  # True</code></pre>\r\n    `,\r\n    proTip: 'Use OOP when your program involves reusable pieces or real-world objects. It helps you write cleaner, more modular code that‚Äôs easier to manage.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `class Animal:\r\n    def speak(self):\r\n        print(\"Animal speaks.\")\r\n\r\nclass Dog(Animal):\r\n    def speak(self):\r\n        print(\"Dog barks.\")\r\n\r\npet = Dog()\r\npet.speak()  # Dog barks.`\r\n      }\r\n    ]\r\n  };\r\n  case 'python-advanced':\r\n  return {\r\n    slug: 'python-advanced',\r\n    title: 'Advanced Python Tips',\r\n    content: `\r\n      <p>Now that you‚Äôve got a strong grip on the basics, let‚Äôs level up your Python skills with some neat tricks and pro-level features you‚Äôll actually use in real projects.</p>\r\n\r\n      <h3>üß† List Comprehensions</h3>\r\n      <p>Write cleaner and faster loops in one line.</p>\r\n      <pre><code>squares = [x*x for x in range(5)]\r\nprint(squares)  # [0, 1, 4, 9, 16]</code></pre>\r\n\r\n      <h3>üß∞ Lambda Functions</h3>\r\n      <p>Quick anonymous functions, great for simple one-liners.</p>\r\n      <pre><code>double = lambda x: x * 2\r\nprint(double(4))  # 8</code></pre>\r\n\r\n      <h3>‚öôÔ∏è *args and **kwargs</h3>\r\n      <p>Pass flexible numbers of arguments to functions.</p>\r\n      <pre><code>def greet(*names):\r\n    for name in names:\r\n        print(\"Hi\", name)\r\n\r\ngreet(\"Alice\", \"Bob\")</code></pre>\r\n\r\n      <pre><code>def info(**data):\r\n    for key, value in data.items():\r\n        print(key, \":\", value)\r\n\r\ninfo(name=\"Python\", version=3.11)</code></pre>\r\n\r\n      <h3>üöÄ Unpacking with *</h3>\r\n      <p>You can use <code>*</code> and <code>**</code> to unpack lists/dicts into function arguments.</p>\r\n      <pre><code>nums = [1, 2, 3]\r\nprint(*nums)  # prints: 1 2 3</code></pre>\r\n\r\n      <h3>üí° Ternary Operators</h3>\r\n      <p>Short if-else logic:</p>\r\n      <pre><code>age = 18\r\nstatus = \"Adult\" if age >= 18 else \"Minor\"</code></pre>\r\n\r\n      <h3>üß± Chaining Comparisons</h3>\r\n      <p>Python lets you write clean range checks:</p>\r\n      <pre><code>x = 15\r\nif 10 &lt; x &lt; 20:\r\n    print(\"In range\")</code></pre>\r\n\r\n      <h3>üîÑ Enumerate & Zip</h3>\r\n      <p>Loop with index using <code>enumerate()</code>, or pair items using <code>zip()</code>:</p>\r\n      <pre><code>colors = ['red', 'green']\r\nfor i, color in enumerate(colors):\r\n    print(i, color)\r\n\r\nnames = ['Alice', 'Bob']\r\nscores = [85, 90]\r\nfor name, score in zip(names, scores):\r\n    print(name, score)</code></pre>\r\n    `,\r\n    proTip: 'Start using list comprehensions, lambda, and unpacking in small scripts to build confidence ‚Äî they make your code look elegant and powerful.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `nums = [1, 2, 3, 4]\r\nsquared = [n*n for n in nums if n % 2 == 0]\r\nprint(squared)  # [4, 16]`\r\n      }\r\n    ]\r\n  };\r\n  case 'python-best-practices':\r\n  return {\r\n    slug: 'python-best-practices',\r\n    title: 'Best Practices',\r\n    content: `\r\n      <p>Writing Python isn‚Äôt just about making things work ‚Äî it‚Äôs about writing clean, efficient, and readable code. Here are some golden rules that‚Äôll make you a Python pro in the real world.</p>\r\n\r\n      <h3>üßº Use Meaningful Variable Names</h3>\r\n      <p>Names like <code>user_age</code> are way better than <code>x</code> or <code>data1</code>. It helps your future self and teammates understand your code faster.</p>\r\n\r\n      <h3>üìè Stick to PEP8</h3>\r\n      <p>PEP8 is Python's official style guide. Use 4 spaces for indentation, limit lines to 79 characters, and add spaces around operators. Use tools like <code>black</code> or <code>flake8</code> to format your code automatically.</p>\r\n\r\n      <h3>üö´ Avoid Using Magic Numbers</h3>\r\n      <p>Hardcoded values make code confusing. Use constants or variables:</p>\r\n      <pre><code>MAX_SCORE = 100\r\nif score &gt; MAX_SCORE:\r\n    print(\"Invalid\")</code></pre>\r\n\r\n      <h3>üì¶ Keep Your Code Modular</h3>\r\n      <p>Break code into small functions. Each function should do one clear task.</p>\r\n\r\n      <h3>üß™ Write Tests</h3>\r\n      <p>Even small scripts benefit from basic tests. Python has a built-in <code>unittest</code> module, and you can also try <code>pytest</code> for more power.</p>\r\n\r\n      <h3>üêç Use Pythonic Idioms</h3>\r\n      <p>Prefer clean, native constructs over verbose code:</p>\r\n      <pre><code># Instead of this\r\nif x == True:\r\n    ...\r\n\r\n# Do this\r\nif x:\r\n    ...</code></pre>\r\n\r\n      <h3>üìÅ Keep File Structure Clean</h3>\r\n      <p>For bigger projects, split your code into modules, packages, and keep config, data, and main logic separate.</p>\r\n\r\n      <h3>üìÑ Document Your Code</h3>\r\n      <p>Use comments only when necessary, but always write docstrings for functions and classes. Describe what it does, what it expects, and what it returns.</p>\r\n      <pre><code>def get_total(price, tax):\r\n    \"\"\"Calculate total price after tax.\"\"\"\r\n    return price + (price * tax)</code></pre>\r\n    `,\r\n    proTip: 'Think about the next person reading your code ‚Äî make it so clear they don‚Äôt need to ask questions. That‚Äôs true professionalism.',\r\n    codeSamples: [\r\n      {\r\n        language: 'python',\r\n        code: `# Bad\r\ndef d(x):\r\n    return x*1.1\r\n\r\n# Good\r\ndef apply_tax(price):\r\n    \"\"\"Apply 10% tax to the price.\"\"\"\r\n    return price * 1.1`\r\n      }\r\n    ]\r\n  };\r\n\r\n      default:\r\n      return undefined;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}