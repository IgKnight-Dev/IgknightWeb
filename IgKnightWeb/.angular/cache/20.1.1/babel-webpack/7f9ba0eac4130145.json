{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport let AbstractGotoLineQuickAccessProvider = /*#__PURE__*/(() => {\n  class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n    static #_ = this.PREFIX = ':';\n    constructor() {\n      super({\n        canAcceptInBackground: true\n      });\n    }\n    provideWithoutTextEditor(picker) {\n      const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n      picker.items = [{\n        label\n      }];\n      picker.ariaLabel = label;\n      return Disposable.None;\n    }\n    provideWithTextEditor(context, picker, token) {\n      const editor = context.editor;\n      const disposables = new DisposableStore();\n      // Goto line once picked\n      disposables.add(picker.onDidAccept(event => {\n        const [item] = picker.selectedItems;\n        if (item) {\n          if (!this.isValidLineNumber(editor, item.lineNumber)) {\n            return;\n          }\n          this.gotoLocation(context, {\n            range: this.toRange(item.lineNumber, item.column),\n            keyMods: picker.keyMods,\n            preserveFocus: event.inBackground\n          });\n          if (!event.inBackground) {\n            picker.hide();\n          }\n        }\n      }));\n      // React to picker changes\n      const updatePickerAndEditor = () => {\n        const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n        const label = this.getPickLabel(editor, position.lineNumber, position.column);\n        // Picker\n        picker.items = [{\n          lineNumber: position.lineNumber,\n          column: position.column,\n          label\n        }];\n        // ARIA Label\n        picker.ariaLabel = label;\n        // Clear decorations for invalid range\n        if (!this.isValidLineNumber(editor, position.lineNumber)) {\n          this.clearDecorations(editor);\n          return;\n        }\n        // Reveal\n        const range = this.toRange(position.lineNumber, position.column);\n        editor.revealRangeInCenter(range, 0 /* ScrollType.Smooth */);\n        // Decorate\n        this.addDecorations(editor, range);\n      };\n      updatePickerAndEditor();\n      disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor()));\n      // Adjust line number visibility as needed\n      const codeEditor = getCodeEditor(editor);\n      if (codeEditor) {\n        const options = codeEditor.getOptions();\n        const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n        if (lineNumbers.renderType === 2 /* RenderLineNumbersType.Relative */) {\n          codeEditor.updateOptions({\n            lineNumbers: 'on'\n          });\n          disposables.add(toDisposable(() => codeEditor.updateOptions({\n            lineNumbers: 'relative'\n          })));\n        }\n      }\n      return disposables;\n    }\n    toRange(lineNumber = 1, column = 1) {\n      return {\n        startLineNumber: lineNumber,\n        startColumn: column,\n        endLineNumber: lineNumber,\n        endColumn: column\n      };\n    }\n    parsePosition(editor, value) {\n      // Support line-col formats of `line,col`, `line:col`, `line#col`\n      const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n      const endLine = this.lineCount(editor) + 1;\n      return {\n        lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n        column: numbers[1]\n      };\n    }\n    getPickLabel(editor, lineNumber, column) {\n      // Location valid: indicate this as picker label\n      if (this.isValidLineNumber(editor, lineNumber)) {\n        if (this.isValidColumn(editor, lineNumber, column)) {\n          return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n        }\n        return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n      }\n      // Location invalid: show generic label\n      const position = editor.getPosition() || {\n        lineNumber: 1,\n        column: 1\n      };\n      const lineCount = this.lineCount(editor);\n      if (lineCount > 1) {\n        return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n      }\n      return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n    }\n    isValidLineNumber(editor, lineNumber) {\n      if (!lineNumber || typeof lineNumber !== 'number') {\n        return false;\n      }\n      return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n    }\n    isValidColumn(editor, lineNumber, column) {\n      if (!column || typeof column !== 'number') {\n        return false;\n      }\n      const model = this.getModel(editor);\n      if (!model) {\n        return false;\n      }\n      const positionCandidate = {\n        lineNumber,\n        column\n      };\n      return model.validatePosition(positionCandidate).equals(positionCandidate);\n    }\n    lineCount(editor) {\n      return this.getModel(editor)?.getLineCount() ?? 0;\n    }\n  }\n  return AbstractGotoLineQuickAccessProvider;\n})();","map":{"version":3,"names":["Disposable","DisposableStore","toDisposable","getCodeEditor","AbstractEditorNavigationQuickAccessProvider","localize","AbstractGotoLineQuickAccessProvider","_","PREFIX","constructor","canAcceptInBackground","provideWithoutTextEditor","picker","label","items","ariaLabel","None","provideWithTextEditor","context","token","editor","disposables","add","onDidAccept","event","item","selectedItems","isValidLineNumber","lineNumber","gotoLocation","range","toRange","column","keyMods","preserveFocus","inBackground","hide","updatePickerAndEditor","position","parsePosition","value","trim","substr","length","getPickLabel","clearDecorations","revealRangeInCenter","addDecorations","onDidChangeValue","codeEditor","options","getOptions","lineNumbers","get","renderType","updateOptions","startLineNumber","startColumn","endLineNumber","endColumn","numbers","split","map","part","parseInt","filter","isNaN","endLine","lineCount","isValidColumn","getPosition","model","getModel","positionCandidate","validatePosition","equals","getLineCount"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n    static { this.PREFIX = ':'; }\n    constructor() {\n        super({ canAcceptInBackground: true });\n    }\n    provideWithoutTextEditor(picker) {\n        const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n        picker.items = [{ label }];\n        picker.ariaLabel = label;\n        return Disposable.None;\n    }\n    provideWithTextEditor(context, picker, token) {\n        const editor = context.editor;\n        const disposables = new DisposableStore();\n        // Goto line once picked\n        disposables.add(picker.onDidAccept(event => {\n            const [item] = picker.selectedItems;\n            if (item) {\n                if (!this.isValidLineNumber(editor, item.lineNumber)) {\n                    return;\n                }\n                this.gotoLocation(context, { range: this.toRange(item.lineNumber, item.column), keyMods: picker.keyMods, preserveFocus: event.inBackground });\n                if (!event.inBackground) {\n                    picker.hide();\n                }\n            }\n        }));\n        // React to picker changes\n        const updatePickerAndEditor = () => {\n            const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n            const label = this.getPickLabel(editor, position.lineNumber, position.column);\n            // Picker\n            picker.items = [{\n                    lineNumber: position.lineNumber,\n                    column: position.column,\n                    label\n                }];\n            // ARIA Label\n            picker.ariaLabel = label;\n            // Clear decorations for invalid range\n            if (!this.isValidLineNumber(editor, position.lineNumber)) {\n                this.clearDecorations(editor);\n                return;\n            }\n            // Reveal\n            const range = this.toRange(position.lineNumber, position.column);\n            editor.revealRangeInCenter(range, 0 /* ScrollType.Smooth */);\n            // Decorate\n            this.addDecorations(editor, range);\n        };\n        updatePickerAndEditor();\n        disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor()));\n        // Adjust line number visibility as needed\n        const codeEditor = getCodeEditor(editor);\n        if (codeEditor) {\n            const options = codeEditor.getOptions();\n            const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n            if (lineNumbers.renderType === 2 /* RenderLineNumbersType.Relative */) {\n                codeEditor.updateOptions({ lineNumbers: 'on' });\n                disposables.add(toDisposable(() => codeEditor.updateOptions({ lineNumbers: 'relative' })));\n            }\n        }\n        return disposables;\n    }\n    toRange(lineNumber = 1, column = 1) {\n        return {\n            startLineNumber: lineNumber,\n            startColumn: column,\n            endLineNumber: lineNumber,\n            endColumn: column\n        };\n    }\n    parsePosition(editor, value) {\n        // Support line-col formats of `line,col`, `line:col`, `line#col`\n        const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n        const endLine = this.lineCount(editor) + 1;\n        return {\n            lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n            column: numbers[1]\n        };\n    }\n    getPickLabel(editor, lineNumber, column) {\n        // Location valid: indicate this as picker label\n        if (this.isValidLineNumber(editor, lineNumber)) {\n            if (this.isValidColumn(editor, lineNumber, column)) {\n                return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n            }\n            return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n        }\n        // Location invalid: show generic label\n        const position = editor.getPosition() || { lineNumber: 1, column: 1 };\n        const lineCount = this.lineCount(editor);\n        if (lineCount > 1) {\n            return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n        }\n        return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n    }\n    isValidLineNumber(editor, lineNumber) {\n        if (!lineNumber || typeof lineNumber !== 'number') {\n            return false;\n        }\n        return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n    }\n    isValidColumn(editor, lineNumber, column) {\n        if (!column || typeof column !== 'number') {\n            return false;\n        }\n        const model = this.getModel(editor);\n        if (!model) {\n            return false;\n        }\n        const positionCandidate = { lineNumber, column };\n        return model.validatePosition(positionCandidate).equals(positionCandidate);\n    }\n    lineCount(editor) {\n        return this.getModel(editor)?.getLineCount() ?? 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}