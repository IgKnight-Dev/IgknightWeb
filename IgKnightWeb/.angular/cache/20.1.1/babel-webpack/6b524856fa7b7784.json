{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport let BracketSelectionRangeProvider = /*#__PURE__*/(() => {\n  class BracketSelectionRangeProvider {\n    provideSelectionRanges(model, positions) {\n      return _asyncToGenerator(function* () {\n        const result = [];\n        for (const position of positions) {\n          const bucket = [];\n          result.push(bucket);\n          const ranges = new Map();\n          yield new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n          yield new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n        }\n        return result;\n      })();\n    }\n    static #_ = this._maxDuration = 30;\n    static #_2 = this._maxRounds = 2;\n    static _bracketsRightYield(resolve, round, model, pos, ranges) {\n      const counts = new Map();\n      const t1 = Date.now();\n      while (true) {\n        if (round >= BracketSelectionRangeProvider._maxRounds) {\n          resolve();\n          break;\n        }\n        if (!pos) {\n          resolve();\n          break;\n        }\n        const bracket = model.bracketPairs.findNextBracket(pos);\n        if (!bracket) {\n          resolve();\n          break;\n        }\n        const d = Date.now() - t1;\n        if (d > BracketSelectionRangeProvider._maxDuration) {\n          setTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n          break;\n        }\n        if (bracket.bracketInfo.isOpeningBracket) {\n          const key = bracket.bracketInfo.bracketText;\n          // wait for closing\n          const val = counts.has(key) ? counts.get(key) : 0;\n          counts.set(key, val + 1);\n        } else {\n          const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n          // process closing\n          let val = counts.has(key) ? counts.get(key) : 0;\n          val -= 1;\n          counts.set(key, Math.max(0, val));\n          if (val < 0) {\n            let list = ranges.get(key);\n            if (!list) {\n              list = new LinkedList();\n              ranges.set(key, list);\n            }\n            list.push(bracket.range);\n          }\n        }\n        pos = bracket.range.getEndPosition();\n      }\n    }\n    static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {\n      const counts = new Map();\n      const t1 = Date.now();\n      while (true) {\n        if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n          resolve();\n          break;\n        }\n        if (!pos) {\n          resolve();\n          break;\n        }\n        const bracket = model.bracketPairs.findPrevBracket(pos);\n        if (!bracket) {\n          resolve();\n          break;\n        }\n        const d = Date.now() - t1;\n        if (d > BracketSelectionRangeProvider._maxDuration) {\n          setTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n          break;\n        }\n        if (!bracket.bracketInfo.isOpeningBracket) {\n          const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n          // wait for opening\n          const val = counts.has(key) ? counts.get(key) : 0;\n          counts.set(key, val + 1);\n        } else {\n          const key = bracket.bracketInfo.bracketText;\n          // opening\n          let val = counts.has(key) ? counts.get(key) : 0;\n          val -= 1;\n          counts.set(key, Math.max(0, val));\n          if (val < 0) {\n            const list = ranges.get(key);\n            if (list) {\n              const closing = list.shift();\n              if (list.size === 0) {\n                ranges.delete(key);\n              }\n              const innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n              const outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n              bucket.push({\n                range: innerBracket\n              });\n              bucket.push({\n                range: outerBracket\n              });\n              BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n            }\n          }\n        }\n        pos = bracket.range.getStartPosition();\n      }\n    }\n    static _addBracketLeading(model, bracket, bucket) {\n      if (bracket.startLineNumber === bracket.endLineNumber) {\n        return;\n      }\n      // xxxxxxxx {\n      //\n      // }\n      const startLine = bracket.startLineNumber;\n      const column = model.getLineFirstNonWhitespaceColumn(startLine);\n      if (column !== 0 && column !== bracket.startColumn) {\n        bucket.push({\n          range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition())\n        });\n        bucket.push({\n          range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition())\n        });\n      }\n      // xxxxxxxx\n      // {\n      //\n      // }\n      const aboveLine = startLine - 1;\n      if (aboveLine > 0) {\n        const column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n        if (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n          bucket.push({\n            range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition())\n          });\n          bucket.push({\n            range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition())\n          });\n        }\n      }\n    }\n  }\n  return BracketSelectionRangeProvider;\n})();","map":{"version":3,"names":["LinkedList","Position","Range","BracketSelectionRangeProvider","provideSelectionRanges","model","positions","_asyncToGenerator","result","position","bucket","push","ranges","Map","Promise","resolve","_bracketsRightYield","_bracketsLeftYield","_","_maxDuration","_2","_maxRounds","round","pos","counts","t1","Date","now","bracket","bracketPairs","findNextBracket","d","setTimeout","bracketInfo","isOpeningBracket","key","bracketText","val","has","get","set","getOpeningBrackets","Math","max","list","range","getEndPosition","size","findPrevBracket","closing","shift","delete","innerBracket","fromPositions","getStartPosition","outerBracket","_addBracketLeading","startLineNumber","endLineNumber","startLine","column","getLineFirstNonWhitespaceColumn","startColumn","aboveLine","getLineLastNonWhitespaceColumn"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/browser/bracketSelections.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport class BracketSelectionRangeProvider {\n    async provideSelectionRanges(model, positions) {\n        const result = [];\n        for (const position of positions) {\n            const bucket = [];\n            result.push(bucket);\n            const ranges = new Map();\n            await new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n            await new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n        }\n        return result;\n    }\n    static { this._maxDuration = 30; }\n    static { this._maxRounds = 2; }\n    static _bracketsRightYield(resolve, round, model, pos, ranges) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            const bracket = model.bracketPairs.findNextBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            const d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n                break;\n            }\n            if (bracket.bracketInfo.isOpeningBracket) {\n                const key = bracket.bracketInfo.bracketText;\n                // wait for closing\n                const val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n                // process closing\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    let list = ranges.get(key);\n                    if (!list) {\n                        list = new LinkedList();\n                        ranges.set(key, list);\n                    }\n                    list.push(bracket.range);\n                }\n            }\n            pos = bracket.range.getEndPosition();\n        }\n    }\n    static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            const bracket = model.bracketPairs.findPrevBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            const d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n                break;\n            }\n            if (!bracket.bracketInfo.isOpeningBracket) {\n                const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n                // wait for opening\n                const val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                const key = bracket.bracketInfo.bracketText;\n                // opening\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    const list = ranges.get(key);\n                    if (list) {\n                        const closing = list.shift();\n                        if (list.size === 0) {\n                            ranges.delete(key);\n                        }\n                        const innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n                        const outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n                        bucket.push({ range: innerBracket });\n                        bucket.push({ range: outerBracket });\n                        BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n                    }\n                }\n            }\n            pos = bracket.range.getStartPosition();\n        }\n    }\n    static _addBracketLeading(model, bracket, bucket) {\n        if (bracket.startLineNumber === bracket.endLineNumber) {\n            return;\n        }\n        // xxxxxxxx {\n        //\n        // }\n        const startLine = bracket.startLineNumber;\n        const column = model.getLineFirstNonWhitespaceColumn(startLine);\n        if (column !== 0 && column !== bracket.startColumn) {\n            bucket.push({ range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition()) });\n            bucket.push({ range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition()) });\n        }\n        // xxxxxxxx\n        // {\n        //\n        // }\n        const aboveLine = startLine - 1;\n        if (aboveLine > 0) {\n            const column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n            if (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition()) });\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition()) });\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}