{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/token.service\";\nimport * as i2 from \"../services/token-refresh.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    tokenService;\n    tokenRefreshService;\n    constructor(tokenService, tokenRefreshService) {\n      this.tokenService = tokenService;\n      this.tokenRefreshService = tokenRefreshService;\n    }\n    intercept(req, next) {\n      const token = this.tokenService.getAccessToken();\n      const authReq = token ? req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      }) : req;\n      return next.handle(authReq).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401 && !authReq.url.includes('/login/auth/refresh-token') // prevent loop\n        ) {\n          return this.tokenRefreshService.refreshToken().pipe(switchMap(newAccessToken => {\n            const cloned = req.clone({\n              headers: req.headers.set('Authorization', `Bearer ${newAccessToken}`)\n            });\n            return next.handle(cloned);\n          }), catchError(refreshError => {\n            this.tokenService.clearTokens(); // logout user\n            window.location.href = '/login'; // optional redirect\n            return throwError(() => refreshError);\n          }));\n        }\n        return throwError(() => error);\n      }));\n    }\n    static ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.TokenRefreshService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":{"version":3,"names":["HttpErrorResponse","catchError","switchMap","throwError","AuthInterceptor","tokenService","tokenRefreshService","constructor","intercept","req","next","token","getAccessToken","authReq","clone","headers","set","handle","pipe","error","status","url","includes","refreshToken","newAccessToken","cloned","refreshError","clearTokens","window","location","href","i0","ɵɵinject","i1","TokenService","i2","TokenRefreshService","factory","ɵfac"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TokenService } from '../services/token.service';\r\nimport { Observable, catchError, switchMap, throwError } from 'rxjs';\r\nimport { TokenRefreshService } from '../services/token-refresh.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private tokenService: TokenService,\r\n    private tokenRefreshService: TokenRefreshService\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.tokenService.getAccessToken();\r\n    const authReq = token\r\n      ? req.clone({\r\n          headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n        })\r\n      : req;\r\n\r\n    return next.handle(authReq).pipe(\r\n      catchError((error) => {\r\n        if (\r\n          error instanceof HttpErrorResponse &&\r\n          error.status === 401 &&\r\n          !authReq.url.includes('/login/auth/refresh-token') // prevent loop\r\n        ) {\r\n          return this.tokenRefreshService.refreshToken().pipe(\r\n            switchMap((newAccessToken: string) => {\r\n              const cloned = req.clone({\r\n                headers: req.headers.set('Authorization', `Bearer ${newAccessToken}`)\r\n              });\r\n              return next.handle(cloned);\r\n            }),\r\n            catchError((refreshError) => {\r\n              this.tokenService.clearTokens(); // logout user\r\n              window.location.href = '/login'; // optional redirect\r\n              return throwError(() => refreshError);\r\n            })\r\n          );\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAKEA,iBAAiB,QACZ,sBAAsB;AAG7B,SAAqBC,UAAU,EAAEC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;AAIpE,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAEhBC,YAAA;IACAC,mBAAA;IAFVC,YACUF,YAA0B,EAC1BC,mBAAwC;MADxC,KAAAD,YAAY,GAAZA,YAAY;MACZ,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAC1B;IAEHE,SAASA,CAACC,GAAqB,EAAEC,IAAiB;MAChD,MAAMC,KAAK,GAAG,IAAI,CAACN,YAAY,CAACO,cAAc,EAAE;MAChD,MAAMC,OAAO,GAAGF,KAAK,GACjBF,GAAG,CAACK,KAAK,CAAC;QACRC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAC5D,CAAC,GACFF,GAAG;MAEP,OAAOC,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9BjB,UAAU,CAAEkB,KAAK,IAAI;QACnB,IACEA,KAAK,YAAYnB,iBAAiB,IAClCmB,KAAK,CAACC,MAAM,KAAK,GAAG,IACpB,CAACP,OAAO,CAACQ,GAAG,CAACC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;QAAA,EACnD;UACA,OAAO,IAAI,CAAChB,mBAAmB,CAACiB,YAAY,EAAE,CAACL,IAAI,CACjDhB,SAAS,CAAEsB,cAAsB,IAAI;YACnC,MAAMC,MAAM,GAAGhB,GAAG,CAACK,KAAK,CAAC;cACvBC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUQ,cAAc,EAAE;aACrE,CAAC;YACF,OAAOd,IAAI,CAACO,MAAM,CAACQ,MAAM,CAAC;UAC5B,CAAC,CAAC,EACFxB,UAAU,CAAEyB,YAAY,IAAI;YAC1B,IAAI,CAACrB,YAAY,CAACsB,WAAW,EAAE,CAAC,CAAC;YACjCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;YACjC,OAAO3B,UAAU,CAAC,MAAMuB,YAAY,CAAC;UACvC,CAAC,CAAC,CACH;QACH;QACA,OAAOvB,UAAU,CAAC,MAAMgB,KAAK,CAAC;MAChC,CAAC,CAAC,CACH;IACH;;uCAtCWf,eAAe,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;;aAAfhC,eAAe;MAAAiC,OAAA,EAAfjC,eAAe,CAAAkC;IAAA;;SAAflC,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}