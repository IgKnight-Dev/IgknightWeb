{"ast":null,"code":"export const TypeScriptTopics = [{\n  id: 'ts-introduction',\n  title: 'What is TypeScript & Why Use It?',\n  slug: 'ts-introduction'\n}, {\n  id: 'ts-types',\n  title: 'Types Made Simple',\n  slug: 'ts-types'\n}, {\n  id: 'ts-interfaces',\n  title: 'Interfaces — Rules for Your Objects',\n  slug: 'ts-interfaces'\n}, {\n  id: 'ts-interfaces-types',\n  title: 'Interfaces vs Types (Like Blueprint vs Label)',\n  slug: 'ts-interfaces-types'\n}, {\n  id: 'ts-functions',\n  title: 'Typed Functions & Parameters',\n  slug: 'ts-functions'\n}, {\n  id: 'ts-unions-generics',\n  title: 'Unions & Generics — Flexible but Safe',\n  slug: 'ts-unions-generics'\n}, {\n  id: 'ts-classes',\n  title: 'Classes & Inheritance (OOP)',\n  slug: 'ts-classes'\n}, {\n  id: 'ts-modules',\n  title: 'Modules & Imports/Exports',\n  slug: 'ts-modules'\n}, {\n  id: 'ts-narrowing-guards',\n  title: 'Type Narrowing & Type Guards',\n  slug: 'ts-narrowing-guards'\n}, {\n  id: 'ts-enums',\n  title: 'Enums Explained Simply',\n  slug: 'ts-enums'\n}, {\n  id: 'ts-utility-types',\n  title: 'Built-in Utility Types (Partial, Pick, etc.)',\n  slug: 'ts-utility-types'\n}, {\n  id: 'ts-errors',\n  title: 'Handling Errors in TypeScript',\n  slug: 'ts-errors'\n}, {\n  id: 'ts-config',\n  title: 'tsconfig.json Demystified',\n  slug: 'ts-config'\n}, {\n  id: 'ts-best-practices',\n  title: 'Best Practices & Real Project Tips',\n  slug: 'ts-best-practices'\n}];\nexport function TypeScriptTopicContent(slug) {\n  switch (slug) {\n    case 'ts-introduction':\n      return {\n        slug: 'ts-introduction',\n        title: 'What is TypeScript & Why Use It?',\n        content: `\n      <p>Imagine JavaScript is like a freehand sketch — flexible, quick, but sometimes a bit messy. TypeScript is like sketching with blueprints — you still draw, but now you have guides that prevent silly mistakes.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 So, What is TypeScript?</h3>\n      <p>TypeScript is a **superset of JavaScript**. That means all valid JavaScript is also valid TypeScript — but TypeScript adds **static typing** and other powerful features on top.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚨 Why JavaScript Alone Can Be Tricky</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>JS won't warn you if you accidentally pass a string when a number is expected.</li>\n        <li>Typos in function names or object properties often go unnoticed… until runtime errors strike.</li>\n        <li>Big codebases can get messy without clear structure or types.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Why TypeScript is a Game-Changer</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>Type Safety:</strong> Catches errors *before* the code even runs.</li>\n        <li><strong>Autocomplete:</strong> Your editor becomes smarter with better suggestions.</li>\n        <li><strong>Better Refactoring:</strong> Rename things with confidence — TypeScript has your back.</li>\n        <li><strong>Docs While You Code:</strong> Hovering over code gives type info and helps you understand it faster.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\n      <p>Think of JavaScript like writing instructions on a sticky note — quick and easy but easy to mess up. TypeScript is like typing a formal document with spell check, grammar check, and structure — a bit more setup, but much more reliable.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Do I Need to Learn TS Right Now?</h3>\n      <p>If you're just starting out with JS, focus on mastering the basics. But once you start building real projects or working with frameworks like Angular, React, or Node.js — TypeScript becomes super helpful (and often essential).</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\n      <p>Don’t be scared by the word “type” — you don’t need to master it all at once. TypeScript grows with you. Start small!</p>\n    `,\n        proTip: 'You don’t need to replace JavaScript with TypeScript. You enhance it — and make your future self say thanks!',\n        codeSamples: [{\n          language: 'typescript',\n          code: `// JavaScript version\nfunction greet(name) {\n  return \"Hello, \" + name;\n}\n\n// TypeScript version\nfunction greet(name: string): string {\n  return \"Hello, \" + name;\n}`\n        }]\n      };\n    case 'ts-types':\n      return {\n        slug: 'ts-types',\n        title: 'Types Made Simple',\n        content: `\n      <p>Types might sound scary if you're coming from JavaScript, but honestly — they’re just labels that help us not mess things up.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔠 What are Types?</h3>\n      <p>Types describe what kind of value a variable can hold. Like:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>string</code> — for text like names, messages, etc.</li>\n        <li><code>number</code> — for prices, ages, scores</li>\n        <li><code>boolean</code> — just <code>true</code> or <code>false</code></li>\n        <li><code>any</code> — (use carefully!) means it can be anything</li>\n        <li><code>unknown</code> — like <code>any</code>, but with extra safety checks</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Why Use Them?</h3>\n      <p>Imagine telling your friend to “bring a number” to your game night — but they bring a banana 🍌. That’s what happens in JavaScript sometimes. Types prevent these mix-ups.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💬 Defining Types in Code</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>Variable:</strong> <code>let age: number = 25;</code></li>\n        <li><strong>Function argument:</strong> <code>function greet(name: string) { ... }</code></li>\n        <li><strong>Return type:</strong> <code>function add(a: number, b: number): number { return a + b; }</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Extra Handy Types</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>Array</code>: <code>string[]</code>, <code>number[]</code></li>\n        <li><code>Tuple</code>: Fixed-size array with known types → <code>[string, number]</code></li>\n        <li><code>Union</code>: <code>string | number</code> — can be either</li>\n        <li><code>Literal</code>: exact values → <code>\"start\" | \"stop\"</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\n      <p>Think of types like labels on food containers. If one says “sugar” and it actually has salt — big problem! Types ensure the right stuff is inside.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\n      <p>Start by typing your function parameters and return values. The rest can grow later as your code grows!</p>\n    `,\n        proTip: 'Using types isn’t about writing more code — it’s about making fewer bugs!',\n        codeSamples: [{\n          language: 'typescript',\n          code: `let username: string = \"Abhinash\";\nlet score: number = 99;\nlet isLoggedIn: boolean = true;\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nlet mixed: string | number = \"IgKnight\";`\n        }]\n      };\n    case 'ts-interfaces-types':\n      return {\n        slug: 'ts-interfaces-types',\n        title: 'Interfaces vs Types (Like Blueprint vs Label)',\n        content: `\n      <p>Both <code>interface</code> and <code>type</code> help you define shapes of objects. They’re like telling your code, “Hey, this thing should look like *this*.”</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\n      <p>Imagine you’re designing a character for a game:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>interface</code> is like the **blueprint** — what properties your character must have.</li>\n        <li><code>type</code> is like a **label** — it can describe objects, combinations, unions, etc.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧰 Interface in Action</h3>\n      <p>Great for defining the structure of objects or classes:</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\">\n<code>interface Player {\n  name: string;\n  score: number;\n  isOnline: boolean;\n}</code></pre>\n\n      <p>You can use it like:</p>\n      <code>const player1: Player = { name: \"Abhi\", score: 100, isOnline: true };</code>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏷️ Type Aliases</h3>\n      <p><code>type</code> can also do the same, and more:</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\">\n<code>type GameStatus = \"started\" | \"paused\" | \"over\";\n\ntype Player = {\n  name: string;\n  score: number;\n};</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤔 So When to Use What?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>Use <code>interface</code></strong> when you're defining the shape of objects or working with classes.</li>\n        <li><strong>Use <code>type</code></strong> when you need to combine things or use unions/intersections.</li>\n        <li><strong>Mix them:</strong> You can even extend one from the other!</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">👀 Good to Know</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>interface</code> is better for object shapes and is more extendable in large codebases.</li>\n        <li><code>type</code> can handle more complex combinations of values and structures.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\n      <p>When starting out — don’t worry too much about the difference. Just pick one and go. They’re like twins with slightly different personalities!</p>\n    `,\n        proTip: 'Use interfaces for structure, and types when combining or tweaking types!',\n        codeSamples: [{\n          language: 'typescript',\n          code: `interface Car {\n  brand: string;\n  speed: number;\n}\n\ntype Truck = {\n  brand: string;\n  loadCapacity: number;\n};\n\nconst swift: Car = { brand: \"Maruti\", speed: 120 };`\n        }, {\n          language: 'typescript',\n          code: `type Status = \"loading\" | \"success\" | \"error\";\n\nfunction updateStatus(status: Status) {\n  console.log(\"Current status:\", status);\n}`\n        }]\n      };\n    case 'ts-interfaces':\n      return {\n        slug: 'ts-interfaces',\n        title: 'Interfaces — Rules for Your Objects',\n        content: `\n      <p>Imagine you're building a LEGO set. The instruction manual tells you what blocks you need and how they should fit. In TypeScript, <strong>interfaces</strong> are like that manual — they define the structure an object should follow.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why Use Interfaces?</h3>\n      <p>They help you define \"what something should look like\". This makes your code more predictable and less error-prone. If someone messes up the shape of an object, TypeScript will catch it before you even run the code!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 A Real-World Example</h3>\n      <p>Let’s say you’re building a profile card:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ninterface UserProfile {\n  name: string;\n  age: number;\n  isActive: boolean;\n}\n\nconst user1: UserProfile = {\n  name: \"Riya\",\n  age: 25,\n  isActive: true,\n};</code></pre>\n\n      <p>If you forget to add <code>isActive</code> or give <code>age</code> as a string, TypeScript will throw an error. That’s the beauty — it’s guarding your code like a bodyguard. 💪</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Key Rules to Know</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>All properties must match</strong> unless marked optional.</li>\n        <li><strong>Use <code>?</code> for optional properties</strong> like: <code>email?: string;</code></li>\n        <li>Interfaces only exist in TypeScript — they don’t become real JavaScript code.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Optional Properties Example</h3>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ninterface BlogPost {\n  title: string;\n  author?: string; // Optional\n}\n\nconst post: BlogPost = {\n  title: \"Learning TS Interfaces\"\n};</code></pre>\n\n      <p>Notice that <code>author</code> is optional, so it's okay if we don’t include it.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\n      <p>Use interfaces to define reusable shapes across your app — from API responses to form data. It keeps your project super clean and consistent.</p>\n    `,\n        proTip: \"Interfaces don't compile to JavaScript — they're purely for your development sanity. Clean, readable, and error-saving.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `interface Product {\n  id: number;\n  name: string;\n  price: number;\n  isAvailable?: boolean; // optional\n}\n\nconst laptop: Product = {\n  id: 1,\n  name: \"Laptop\",\n  price: 75000,\n};`\n        }]\n      };\n    case 'ts-functions':\n      return {\n        slug: 'ts-functions',\n        title: 'Typed Functions & Parameters',\n        content: `\n      <p>Ever ordered food online? You pick a restaurant, select your items, and the app expects your order in a certain format. Functions in TypeScript are similar — they expect inputs (called <strong>parameters</strong>) and return outputs (called <strong>return types</strong>), and with TypeScript, you can make these expectations crystal clear.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🍱 Real-World Analogy</h3>\n      <p>Think of a function like a kitchen — you give it raw materials (ingredients or parameters), and it gives you a final dish (the return value).</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Basic Typed Function</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n</code></pre>\n      <p>Here, <code>a</code> and <code>b</code> must be numbers, and the result returned will also be a number. If someone tries to pass a string — boom 💥 — TypeScript will complain before you even run the code.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Optional & Default Parameters</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction greet(name: string = \"friend\") {\n  console.log(\"Hey \" + name);\n}\n\ngreet(); // \"Hey friend\"\ngreet(\"Riya\"); // \"Hey Riya\"\n</code></pre>\n      <p>You can set default values or make parameters optional using <code>?</code>.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Return Types</h3>\n      <p>You can explicitly tell TypeScript what a function should return:</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n</code></pre>\n      <p>This helps catch silly mistakes like returning a string by accident.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Function Type Aliases</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype MathOperation = (x: number, y: number) => number;\n\nconst multiply: MathOperation = (a, b) => a * b;\n</code></pre>\n      <p>Now you can reuse this function type anywhere without repeating yourself. Neat, right?</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Why It Matters</h3>\n      <p>Typed functions make your code:\n        <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n          <li>More readable</li>\n          <li>Less prone to runtime bugs</li>\n          <li>IntelliSense/autocomplete friendly</li>\n        </ul>\n      </p>\n    `,\n        proTip: \"Don't just type the return — type the parameters too! That’s where most bugs sneak in.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `function getFullName(first: string, last: string): string {\n  return \\`\\${first} \\${last}\\`;\n}\n\nconsole.log(getFullName(\"Riya\", \"Patel\"));`\n        }]\n      };\n    case 'ts-unions-generics':\n      return {\n        slug: 'ts-unions-generics',\n        title: 'Unions & Generics — Flexible but Safe',\n        content: `\n      <p>Let’s talk about flexibility. Sometimes you want your code to be like a Swiss Army knife — able to handle multiple types of input. TypeScript gives you two superpowers for this: <strong>Unions</strong> and <strong>Generics</strong>.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔗 Union Types — Accepting Multiple Types</h3>\n      <p>Union types are like saying: “Hey, I’ll accept this or that.”</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction printId(id: number | string) {\n  console.log(\"Your ID is: \" + id);\n}\n\nprintId(101);        // Okay\nprintId(\"AB-123\");   // Also okay\n</code></pre>\n      <p>You’re telling TypeScript: this variable can be either a number or a string — and it’ll check that you only use it in ways that both types allow.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Type Narrowing</h3>\n      <p>When using unions, you often want to figure out what type it actually is before using it:</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction formatInput(input: string | number) {\n  if (typeof input === \"string\") {\n    return input.toUpperCase();\n  }\n  return input.toFixed(2);\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎒 Generics — Like Reusable Bags</h3>\n      <p>Generics are like saying “I don’t care what type it is now, just make sure it stays consistent.” Great for writing flexible, reusable functions.</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nconst str = identity(\"hello\"); // string\nconst num = identity(42);      // number\n</code></pre>\n\n      <p>Here, <code>&lt;T&gt;</code> is a placeholder for the type that will be determined when the function is used. TypeScript keeps track of it.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧺 Generic with Arrays</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction getFirstItem<T>(arr: T[]): T {\n  return arr[0];\n}\n\nconst first = getFirstItem([100, 200, 300]); // number\nconst name = getFirstItem([\"Alice\", \"Bob\"]); // string\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤝 Unions vs Generics</h3>\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n        <li>Use <strong>unions</strong> when you want to accept multiple known types.</li>\n        <li>Use <strong>generics</strong> when you want to write reusable code that adapts to the type passed in.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ Real-Life Example</h3>\n      <p>Imagine a shopping cart function that works for clothes, groceries, or electronics — generics help you build one flexible function that handles all those types without losing track of what type each item is.</p>\n    `,\n        proTip: \"Use union types for variety, and generics for reusability with safety. They're TypeScript’s dynamic duo!\",\n        codeSamples: [{\n          language: 'ts',\n          code: `function wrapInArray<T>(value: T): T[] {\n  return [value];\n}\n\nconst wrapped = wrapInArray(\"gift\"); // [\"gift\"]`\n        }]\n      };\n    case 'ts-classes':\n      return {\n        slug: 'ts-classes',\n        title: 'Classes & Inheritance (OOP)',\n        content: `\n      <p>If you're coming from Java, C#, or even playing around with OOP concepts, <strong>classes</strong> in TypeScript will feel like your comfy hoodie. But even if you're new — don’t worry, it’s easier than it sounds!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏠 What is a Class?</h3>\n      <p>A class is like a blueprint for an object. Imagine you're building a bunch of houses — all the same layout but with different names, colors, and owners. That blueprint is your class.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nclass Person {\n  name: string;\n  age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(\\`Hello, I'm \\${this.name} and I'm \\${this.age} years old.\\`);\n  }\n}\n\nconst abhi = new Person(\"Abhi\", 22);\nabhi.greet(); // Hello, I'm Abhi and I'm 22 years old.\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What's Going On Here?</h3>\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n        <li><strong>name</strong> and <strong>age</strong> are properties.</li>\n        <li><strong>constructor</strong> is a special method called when a new object is created.</li>\n        <li><strong>greet()</strong> is a method attached to every object from this class.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧬 Inheritance — Like Family Traits</h3>\n      <p>Just like you may inherit your smile from your mom or coding skills from your dad, classes can inherit from other classes!</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nclass Developer extends Person {\n  language: string;\n\n  constructor(name: string, age: number, language: string) {\n    super(name, age); // call parent constructor\n    this.language = language;\n  }\n\n  code() {\n    console.log(\\`\\${this.name} writes code in \\${this.language}.\\`);\n  }\n}\n\nconst dev = new Developer(\"Riya\", 25, \"TypeScript\");\ndev.greet(); // Hello, I'm Riya and I'm 25 years old.\ndev.code();  // Riya writes code in TypeScript.\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Access Modifiers</h3>\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n        <li><code>public</code> – accessible anywhere (default)</li>\n        <li><code>private</code> – only inside the class</li>\n        <li><code>protected</code> – inside the class and subclasses</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nclass SecretAgent {\n  public name: string;\n  private codeName: string;\n\n  constructor(name: string, codeName: string) {\n    this.name = name;\n    this.codeName = codeName;\n  }\n\n  reveal() {\n    return \\`I am \\${this.name}, aka \\${this.codeName}\\`;\n  }\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🪄 Real-Life Analogy</h3>\n      <p>Think of a class as a recipe, and an object as the actual dish made from it. Inheritance is like modifying a basic pizza recipe into a cheesy pizza 🍕. You still use the base but add more features.</p>\n    `,\n        proTip: \"Use classes when building components, services, or models with behaviors. Keep things clean with modifiers and constructors!\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\nclass Car {\n  constructor(public brand: string, public speed: number) {}\n\n  drive() {\n    console.log(\\`\\${this.brand} is driving at \\${this.speed} km/h\\`);\n  }\n}\n\nconst car = new Car(\"Toyota\", 80);\ncar.drive();\n        `\n        }]\n      };\n    case 'ts-modules':\n      return {\n        slug: 'ts-modules',\n        title: 'Modules & Imports/Exports',\n        content: `\n      <p>Ever tried to manage a huge project in one single file? 🥵 It’s chaos. That's where <strong>modules</strong> come in — like drawers in a well-organized cabinet. Each drawer (file/module) holds its own stuff, but you can still access things when needed.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What is a Module?</h3>\n      <p>In TypeScript (and JavaScript), every file is a module. Anything you <code>export</code> from one file can be <code>imported</code> into another file.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Exporting — Sharing Your Stuff</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\n// file: user.ts\nexport const name = \"Abhi\";\nexport function greet() {\n  console.log(\\`Hello, \\${name}!\\`);\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📥 Importing — Getting Stuff</h3>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\n// file: app.ts\nimport { name, greet } from './user';\n\nconsole.log(name); // Abhi\ngreet();           // Hello, Abhi!\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 Default Exports (One Main Thing)</h3>\n      <p>If a module has one primary export, you can use <code>export default</code>.</p>\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\n// file: math.ts\nexport default function add(a: number, b: number) {\n  return a + b;\n}\n\n// file: app.ts\nimport add from './math';\nconsole.log(add(2, 3)); // 5\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧱 Why Use Modules?</h3>\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n        <li>Helps you break code into logical pieces.</li>\n        <li>Makes code reusable and easier to maintain.</li>\n        <li>Avoids variable name conflicts.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\n      <p>Imagine building a house with every tool thrown into one box 🧰. It’s messy! Now imagine tools are sorted into drawers — saws, hammers, screwdrivers — that’s modules. You take what you need, when you need it.</p>\n    `,\n        proTip: \"Use named exports for multiple utilities and default export for single main functionality in a module.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// user.ts\nexport const isLoggedIn = true;\nexport function logout() {\n  console.log(\"Logged out!\");\n}\n\n// app.ts\nimport { isLoggedIn, logout } from './user';\nif (isLoggedIn) logout();\n        `\n        }]\n      };\n    case 'ts-narrowing-guards':\n      return {\n        slug: 'ts-narrowing-guards',\n        title: 'Type Narrowing & Type Guards',\n        content: `\n      <p>Sometimes your variable is like a mystery box — you're not exactly sure what's inside until you check. That's where <strong>type narrowing</strong> and <strong>type guards</strong> help — they let you safely open the box 🎁.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 What is Type Narrowing?</h3>\n      <p>Type narrowing means figuring out the exact type of a variable when it's of multiple possible types (like <code>string | number</code>) — kind of like checking whether a package has books or clothes before opening it.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction printValue(val: string | number) {\n  if (typeof val === \"string\") {\n    console.log(val.toUpperCase()); // string-specific\n  } else {\n    console.log(val.toFixed(2));    // number-specific\n  }\n}\n</code></pre>\n\n      <p><code>typeof</code> helped us \"narrow\" the type to either <code>string</code> or <code>number</code>.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔒 Type Guards: Custom Narrowing</h3>\n      <p>Let’s say you’ve got objects with different shapes — you need to know which is which. You can write custom checks called <strong>type guards</strong>.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Dog = { bark: () => void };\ntype Cat = { meow: () => void };\n\nfunction isDog(pet: Dog | Cat): pet is Dog {\n  return (pet as Dog).bark !== undefined;\n}\n\nfunction makeSound(pet: Dog | Cat) {\n  if (isDog(pet)) {\n    pet.bark();\n  } else {\n    pet.meow();\n  }\n}\n</code></pre>\n\n      <p><code>isDog()</code> is a custom type guard that checks if the object has <code>bark()</code>.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧰 Other Ways to Narrow Types</h3>\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\n        <li><code>typeof</code> — for primitives like string, number, boolean</li>\n        <li><code>instanceof</code> — for classes</li>\n        <li><code>in</code> operator — for checking if a property exists</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nfunction showLength(x: string | string[]) {\n  if (Array.isArray(x)) {\n    console.log(x.length); // array\n  } else {\n    console.log(x.length); // string\n  }\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\n      <p>Imagine getting a parcel labeled “fragile or not fragile.” Before opening, you check if it’s glass or books. That check is a <strong>type guard</strong>, and once you know, you treat it accordingly. Simple, right?</p>\n    `,\n        proTip: \"Use type guards to write cleaner, safer logic when dealing with union types or multiple possible object shapes.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// Narrowing with 'in'\ntype Admin = { role: \"admin\", level: number };\ntype User = { username: string };\n\nfunction checkUser(u: Admin | User) {\n  if (\"role\" in u) {\n    console.log(\\`Admin level: \\${u.level}\\`);\n  } else {\n    console.log(\\`User: \\${u.username}\\`);\n  }\n}\n        `\n        }]\n      };\n    case 'ts-enums':\n      return {\n        slug: 'ts-enums',\n        title: 'Enums Explained Simply',\n        content: `\n      <p>Ever labeled things with a name instead of a number? Like calling Monday \"MON\" instead of 0? That’s exactly what <strong>Enums</strong> do in TypeScript — they give names to values so your code makes way more sense 👇</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📋 Why Enums?</h3>\n      <p>Let’s say you're building a task tracker and want to store task status. You could use numbers, but what does <code>1</code> or <code>2</code> even mean?</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nenum Status {\n  Todo,        // 0\n  InProgress,  // 1\n  Done         // 2\n}\n\nconst taskStatus = Status.InProgress;\n</code></pre>\n\n      <p>This makes your code readable and meaningful. Instead of <code>1</code>, you see <code>Status.InProgress</code> — much better!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 Behind the Scenes</h3>\n      <p>By default, enums assign numbers starting from 0, unless you manually give values:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nenum Priority {\n  Low = 1,\n  Medium = 2,\n  High = 3\n}\n\nconst bug = Priority.High;\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📝 String Enums</h3>\n      <p>Prefer labels over numbers? Go for string enums — super helpful for APIs and debugging.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nenum Role {\n  Admin = \"ADMIN\",\n  Editor = \"EDITOR\",\n  Viewer = \"VIEWER\"\n}\n\nconst userRole = Role.Editor;\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Reverse Mapping</h3>\n      <p>In number enums, you can even get the name from the number:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nenum Direction {\n  North, South, East, West\n}\n\nconsole.log(Direction[0]); // \"North\"\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\n      <p>Think of enums like assigning a label to speed dials 📞 on your phone. Instead of remembering “2 is Mom”, you just press “Mom”. Enums let code do the same — label things clearly!</p>\n    `,\n        proTip: \"Use string enums for clearer debugging and safer API integrations. Use numeric enums for performance-sensitive operations.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// Status enum example\nenum Status {\n  Pending = \"PENDING\",\n  Success = \"SUCCESS\",\n  Failed = \"FAILED\"\n}\n\nfunction handleStatus(s: Status) {\n  if (s === Status.Success) {\n    console.log(\"✅ All good!\");\n  } else {\n    console.log(\"⚠️ Something went wrong.\");\n  }\n}\n        `\n        }]\n      };\n    case 'ts-utility-types':\n      return {\n        slug: 'ts-utility-types',\n        title: 'Built-in Utility Types (Partial, Pick, etc.)',\n        content: `\n      <p>Imagine you're building with Lego blocks — sometimes you want the full set, sometimes just a few pieces. TypeScript’s <strong>utility types</strong> help you do exactly that with your types — reuse, reshape, or reduce them in powerful ways 🧱.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 Partial&lt;T&gt;</h3>\n      <p>Makes all properties of a type optional. Great when you're updating just part of an object.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Profile = {\n  name: string;\n  age: number;\n};\n\nconst updateProfile = (data: Partial<Profile>) => {\n  // Now you can send just name or just age\n};\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Pick&lt;T, K&gt;</h3>\n      <p>Pick only specific properties from a type — like ordering à la carte 🍽️</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n};\n\ntype PublicUser = Pick<User, \"name\" | \"email\">;\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚫 Omit&lt;T, K&gt;</h3>\n      <p>Opposite of Pick — removes certain properties.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype PrivateUser = Omit<User, \"email\">; // no email here\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Readonly&lt;T&gt;</h3>\n      <p>Makes all properties immutable (like freezing an object 🧊).</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Config = {\n  version: string;\n};\n\nconst config: Readonly<Config> = {\n  version: \"1.0\"\n};\n\nconfig.version = \"2.0\"; // ❌ Error: Cannot assign\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📚 Record&lt;K, T&gt;</h3>\n      <p>Create an object type with keys of type <code>K</code> and values of type <code>T</code>.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Role = \"admin\" | \"user\";\n\nconst permissions: Record<Role, boolean> = {\n  admin: true,\n  user: false\n};\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\n      <p>Think of utility types like smart tools in your garage 🧰. Instead of creating new stuff from scratch, you tweak or adjust existing types to save time and avoid bugs. Efficient and clean!</p>\n    `,\n        proTip: \"When building APIs or forms, use utility types like Partial and Pick to make your types flexible and safe at the same time.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// Making a reusable form type\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n};\n\n// Just what's needed for the signup form\ntype SignupForm = Pick<User, \"name\" | \"email\">;\n\n// For updates, make everything optional\ntype UpdateUser = Partial<User>;\n        `\n        }]\n      };\n    case 'ts-errors':\n      return {\n        slug: 'ts-errors',\n        title: 'Handling Errors in TypeScript',\n        content: `\n      <p>Errors are like unexpected potholes while driving 🚗 — you either avoid them or handle them smoothly. TypeScript helps you catch those early and handle them smartly when they show up at runtime.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🪤 Try / Catch — The Classic Net</h3>\n      <p>Use try/catch when you're unsure if something might break at runtime — especially when working with APIs or parsing data:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntry {\n  const data = JSON.parse('{\"name\":\"IgKnight\"}');\n  console.log(data.name);\n} catch (error) {\n  console.error(\"Something went wrong:\", error);\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📏 Strongly Typed Errors (optional but helpful)</h3>\n      <p>In TS, <code>catch</code> doesn't know the exact shape of the error, so if you're accessing specific properties, you should tell TS what the error is:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntry {\n  throw new Error(\"Uh oh!\");\n} catch (error) {\n  if (error instanceof Error) {\n    console.log(error.message);\n  }\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">❗ Custom Error Classes</h3>\n      <p>Need better control? Create your own error classes for specific use-cases.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nclass AuthError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AuthError\";\n  }\n}\n\nthrow new AuthError(\"Invalid credentials\");\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Function Return Types: Error or Value?</h3>\n      <p>Another smart pattern: return either a value or an error manually using <code>Result</code> style types:</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Result = { data: string } | { error: string };\n\nfunction getData(): Result {\n  const success = true;\n  return success ? { data: \"Done\" } : { error: \"Failed to load\" };\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\n      <p>Think of <code>try/catch</code> like wearing a helmet while skating — you hope not to fall, but if you do, you're safe 😅. Same idea in TS: protect the risky parts of your code!</p>\n    `,\n        proTip: \"Don’t overuse try/catch — use TypeScript types to prevent errors in the first place. Reserve try/catch for truly unpredictable operations like user input or network calls.\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// Safer parsing with try/catch\nfunction safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return null;\n  }\n}\n\nconst result = safeJsonParse(\"{ invalid json }\"); // null\n        `\n        }]\n      };\n    case 'ts-config':\n      return {\n        slug: 'ts-config',\n        title: 'tsconfig.json Demystified',\n        content: `\n      <p>If TypeScript was a spaceship 🚀, <code>tsconfig.json</code> would be its control panel — it tells the compiler how to behave, what to include, and how strict to be.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What is tsconfig.json?</h3>\n      <p>It's a simple JSON file that lives in your project root and tells TypeScript how to compile your code. It controls what files are used, what output you get, and how safe you want your code to be.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ Common Settings You’ll See</h3>\n\n      <ul class=\"list-disc pl-6 text-white\">\n        <li><code>\"compilerOptions\"</code>: Where all your rules live</li>\n        <li><code>\"include\"</code>: What files/folders TypeScript should care about</li>\n        <li><code>\"exclude\"</code>: What to ignore (e.g., <code>node_modules</code>)</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES6\", // Convert TS to this version of JS\n    \"module\": \"commonjs\",\n    \"strict\": true, // Enables all strict type checks\n    \"outDir\": \"./dist\", // Where to put compiled JS\n    \"esModuleInterop\": true // Helps with importing CommonJS modules\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔍 Some Handy Compiler Options</h3>\n      <ul class=\"list-disc pl-6 text-white\">\n        <li><code>\"strict\": true</code> — Forces you to write safer code (like no undefined returns, no sloppy nulls)</li>\n        <li><code>\"noImplicitAny\": true</code> — Stops TS from guessing types as <code>any</code></li>\n        <li><code>\"baseUrl\"</code> and <code>\"paths\"</code> — Helps with cleaner imports like <code>@/utils</code></li>\n        <li><code>\"skipLibCheck\"</code> — Skips checking third-party libs, saves build time</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\n      <p><code>tsconfig.json</code> is like customizing your burger order 🍔. You can say: “No onions, extra cheese, gluten-free bun” — and TypeScript listens and builds your code exactly how you want.</p>\n    `,\n        proTip: \"Start with a basic tsconfig, then slowly tighten rules (like turning on strict mode) as you get comfy with TypeScript.\",\n        codeSamples: [{\n          language: 'json',\n          code: `\n// Minimal starter tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"strict\": true\n  },\n  \"include\": [\"src\"]\n}\n        `\n        }]\n      };\n    case 'ts-best-practices':\n      return {\n        slug: 'ts-best-practices',\n        title: 'Best Practices & Real Project Tips',\n        content: `\n      <p>Learning TypeScript is like learning to drive — knowing the rules keeps you safe 🚦. Here are some simple but powerful habits that'll make your code cleaner, safer, and easier to work with in real projects.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 1. Always Define Types Explicitly</h3>\n      <p>Don't let TS guess. Be clear with your types — it's like labeling your food containers 🍱 so you don’t microwave salad by mistake.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\nconst user: { name: string; age: number } = {\n  name: \"Nash\",\n  age: 22,\n};\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 2. Prefer Interfaces for Objects</h3>\n      <p>Interfaces make it easier to structure and reuse object shapes. Use them like a shared blueprint 🏗️.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ninterface Product {\n  name: string;\n  price: number;\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 3. Avoid 'any' Like It's a Black Hole 🕳️</h3>\n      <p><code>any</code> removes all type safety — it’s like saying “I trust everything blindly”. Use <code>unknown</code> or narrow it down properly.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 4. Use Union & Literal Types for Options</h3>\n      <p>Great for dropdowns, themes, or modes — it forces only valid values 🎯</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\ntype Theme = \"light\" | \"dark\";\n\nfunction setTheme(mode: Theme) {\n  console.log(\"Theme set to\", mode);\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 5. Organize Types in a Separate File</h3>\n      <p>For real-world apps, keep all shared types in one folder like <code>types/</code> or <code>models/</code>. Keeps everything clean and easy to maintain.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 6. Enable Strict Mode in tsconfig</h3>\n      <p>This turns on a bunch of safety features — it’s like putting seatbelts on your code 💺.</p>\n\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 7. Start Simple, Grow with Confidence</h3>\n      <p>Don’t try to type every single line from day one. Use basic types at first, and grow them as your app grows 💡.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\n      <p>Think of TypeScript as a co-pilot who points out issues before you crash. Follow best practices and it'll help you avoid a ton of late-night bugs 🐞.</p>\n    `,\n        proTip: \"Your TypeScript journey doesn’t need to be perfect — write code, break stuff, and Google a lot. That’s how real devs level up!\",\n        codeSamples: [{\n          language: 'ts',\n          code: `\n// Example: Reusable interface\ninterface User {\n  id: number;\n  email: string;\n  isAdmin?: boolean;\n}\n\n// Using it\nconst currentUser: User = {\n  id: 1,\n  email: \"user@example.com\",\n};\n        `\n        }]\n      };\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["TypeScriptTopics","id","title","slug","TypeScriptTopicContent","content","proTip","codeSamples","language","code","undefined"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\data\\typescript\\topics-data.ts"],"sourcesContent":["import { Topic, TopicContent } from \"../../../../models/topic.model\";\r\n\r\nexport const TypeScriptTopics: Topic[] = [\r\n  { id: 'ts-introduction', title: 'What is TypeScript & Why Use It?', slug: 'ts-introduction' },\r\n  { id: 'ts-types', title: 'Types Made Simple', slug: 'ts-types' },\r\n  { id: 'ts-interfaces', title: 'Interfaces — Rules for Your Objects', slug: 'ts-interfaces' },\r\n  { id: 'ts-interfaces-types', title: 'Interfaces vs Types (Like Blueprint vs Label)', slug: 'ts-interfaces-types' },\r\n  { id: 'ts-functions', title: 'Typed Functions & Parameters', slug: 'ts-functions' },\r\n  { id: 'ts-unions-generics', title: 'Unions & Generics — Flexible but Safe', slug: 'ts-unions-generics' },\r\n  { id: 'ts-classes', title: 'Classes & Inheritance (OOP)', slug: 'ts-classes' },\r\n  { id: 'ts-modules', title: 'Modules & Imports/Exports', slug: 'ts-modules' },\r\n  { id: 'ts-narrowing-guards', title: 'Type Narrowing & Type Guards', slug: 'ts-narrowing-guards' },\r\n  { id: 'ts-enums', title: 'Enums Explained Simply', slug: 'ts-enums' },\r\n  { id: 'ts-utility-types', title: 'Built-in Utility Types (Partial, Pick, etc.)', slug: 'ts-utility-types' },\r\n  { id: 'ts-errors', title: 'Handling Errors in TypeScript', slug: 'ts-errors' },\r\n  { id: 'ts-config', title: 'tsconfig.json Demystified', slug: 'ts-config' },\r\n  { id: 'ts-best-practices', title: 'Best Practices & Real Project Tips', slug: 'ts-best-practices' }\r\n];\r\n\r\nexport function TypeScriptTopicContent(slug: string): TopicContent | undefined {\r\n  switch (slug) {\r\n    case 'ts-introduction':\r\n  return {\r\n    slug: 'ts-introduction',\r\n    title: 'What is TypeScript & Why Use It?',\r\n    content: `\r\n      <p>Imagine JavaScript is like a freehand sketch — flexible, quick, but sometimes a bit messy. TypeScript is like sketching with blueprints — you still draw, but now you have guides that prevent silly mistakes.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 So, What is TypeScript?</h3>\r\n      <p>TypeScript is a **superset of JavaScript**. That means all valid JavaScript is also valid TypeScript — but TypeScript adds **static typing** and other powerful features on top.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚨 Why JavaScript Alone Can Be Tricky</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>JS won't warn you if you accidentally pass a string when a number is expected.</li>\r\n        <li>Typos in function names or object properties often go unnoticed… until runtime errors strike.</li>\r\n        <li>Big codebases can get messy without clear structure or types.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Why TypeScript is a Game-Changer</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>Type Safety:</strong> Catches errors *before* the code even runs.</li>\r\n        <li><strong>Autocomplete:</strong> Your editor becomes smarter with better suggestions.</li>\r\n        <li><strong>Better Refactoring:</strong> Rename things with confidence — TypeScript has your back.</li>\r\n        <li><strong>Docs While You Code:</strong> Hovering over code gives type info and helps you understand it faster.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\r\n      <p>Think of JavaScript like writing instructions on a sticky note — quick and easy but easy to mess up. TypeScript is like typing a formal document with spell check, grammar check, and structure — a bit more setup, but much more reliable.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Do I Need to Learn TS Right Now?</h3>\r\n      <p>If you're just starting out with JS, focus on mastering the basics. But once you start building real projects or working with frameworks like Angular, React, or Node.js — TypeScript becomes super helpful (and often essential).</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\r\n      <p>Don’t be scared by the word “type” — you don’t need to master it all at once. TypeScript grows with you. Start small!</p>\r\n    `,\r\n    proTip: 'You don’t need to replace JavaScript with TypeScript. You enhance it — and make your future self say thanks!',\r\n    codeSamples: [\r\n      {\r\n        language: 'typescript',\r\n        code: `// JavaScript version\r\nfunction greet(name) {\r\n  return \"Hello, \" + name;\r\n}\r\n\r\n// TypeScript version\r\nfunction greet(name: string): string {\r\n  return \"Hello, \" + name;\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'ts-types':\r\n  return {\r\n    slug: 'ts-types',\r\n    title: 'Types Made Simple',\r\n    content: `\r\n      <p>Types might sound scary if you're coming from JavaScript, but honestly — they’re just labels that help us not mess things up.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔠 What are Types?</h3>\r\n      <p>Types describe what kind of value a variable can hold. Like:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>string</code> — for text like names, messages, etc.</li>\r\n        <li><code>number</code> — for prices, ages, scores</li>\r\n        <li><code>boolean</code> — just <code>true</code> or <code>false</code></li>\r\n        <li><code>any</code> — (use carefully!) means it can be anything</li>\r\n        <li><code>unknown</code> — like <code>any</code>, but with extra safety checks</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Why Use Them?</h3>\r\n      <p>Imagine telling your friend to “bring a number” to your game night — but they bring a banana 🍌. That’s what happens in JavaScript sometimes. Types prevent these mix-ups.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💬 Defining Types in Code</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>Variable:</strong> <code>let age: number = 25;</code></li>\r\n        <li><strong>Function argument:</strong> <code>function greet(name: string) { ... }</code></li>\r\n        <li><strong>Return type:</strong> <code>function add(a: number, b: number): number { return a + b; }</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Extra Handy Types</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>Array</code>: <code>string[]</code>, <code>number[]</code></li>\r\n        <li><code>Tuple</code>: Fixed-size array with known types → <code>[string, number]</code></li>\r\n        <li><code>Union</code>: <code>string | number</code> — can be either</li>\r\n        <li><code>Literal</code>: exact values → <code>\"start\" | \"stop\"</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\r\n      <p>Think of types like labels on food containers. If one says “sugar” and it actually has salt — big problem! Types ensure the right stuff is inside.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\r\n      <p>Start by typing your function parameters and return values. The rest can grow later as your code grows!</p>\r\n    `,\r\n    proTip: 'Using types isn’t about writing more code — it’s about making fewer bugs!',\r\n    codeSamples: [\r\n      {\r\n        language: 'typescript',\r\n        code: `let username: string = \"Abhinash\";\r\nlet score: number = 99;\r\nlet isLoggedIn: boolean = true;\r\n\r\nfunction add(a: number, b: number): number {\r\n  return a + b;\r\n}\r\n\r\nlet mixed: string | number = \"IgKnight\";`\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-interfaces-types':\r\n  return {\r\n    slug: 'ts-interfaces-types',\r\n    title: 'Interfaces vs Types (Like Blueprint vs Label)',\r\n    content: `\r\n      <p>Both <code>interface</code> and <code>type</code> help you define shapes of objects. They’re like telling your code, “Hey, this thing should look like *this*.”</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\r\n      <p>Imagine you’re designing a character for a game:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>interface</code> is like the **blueprint** — what properties your character must have.</li>\r\n        <li><code>type</code> is like a **label** — it can describe objects, combinations, unions, etc.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧰 Interface in Action</h3>\r\n      <p>Great for defining the structure of objects or classes:</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\">\r\n<code>interface Player {\r\n  name: string;\r\n  score: number;\r\n  isOnline: boolean;\r\n}</code></pre>\r\n\r\n      <p>You can use it like:</p>\r\n      <code>const player1: Player = { name: \"Abhi\", score: 100, isOnline: true };</code>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏷️ Type Aliases</h3>\r\n      <p><code>type</code> can also do the same, and more:</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded-lg overflow-auto text-green-400\">\r\n<code>type GameStatus = \"started\" | \"paused\" | \"over\";\r\n\r\ntype Player = {\r\n  name: string;\r\n  score: number;\r\n};</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤔 So When to Use What?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>Use <code>interface</code></strong> when you're defining the shape of objects or working with classes.</li>\r\n        <li><strong>Use <code>type</code></strong> when you need to combine things or use unions/intersections.</li>\r\n        <li><strong>Mix them:</strong> You can even extend one from the other!</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">👀 Good to Know</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>interface</code> is better for object shapes and is more extendable in large codebases.</li>\r\n        <li><code>type</code> can handle more complex combinations of values and structures.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\r\n      <p>When starting out — don’t worry too much about the difference. Just pick one and go. They’re like twins with slightly different personalities!</p>\r\n    `,\r\n    proTip: 'Use interfaces for structure, and types when combining or tweaking types!',\r\n    codeSamples: [\r\n      {\r\n        language: 'typescript',\r\n        code: `interface Car {\r\n  brand: string;\r\n  speed: number;\r\n}\r\n\r\ntype Truck = {\r\n  brand: string;\r\n  loadCapacity: number;\r\n};\r\n\r\nconst swift: Car = { brand: \"Maruti\", speed: 120 };`\r\n      },\r\n      {\r\n        language: 'typescript',\r\n        code: `type Status = \"loading\" | \"success\" | \"error\";\r\n\r\nfunction updateStatus(status: Status) {\r\n  console.log(\"Current status:\", status);\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'ts-interfaces':\r\n  return {\r\n    slug: 'ts-interfaces',\r\n    title: 'Interfaces — Rules for Your Objects',\r\n    content: `\r\n      <p>Imagine you're building a LEGO set. The instruction manual tells you what blocks you need and how they should fit. In TypeScript, <strong>interfaces</strong> are like that manual — they define the structure an object should follow.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why Use Interfaces?</h3>\r\n      <p>They help you define \"what something should look like\". This makes your code more predictable and less error-prone. If someone messes up the shape of an object, TypeScript will catch it before you even run the code!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 A Real-World Example</h3>\r\n      <p>Let’s say you’re building a profile card:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ninterface UserProfile {\r\n  name: string;\r\n  age: number;\r\n  isActive: boolean;\r\n}\r\n\r\nconst user1: UserProfile = {\r\n  name: \"Riya\",\r\n  age: 25,\r\n  isActive: true,\r\n};</code></pre>\r\n\r\n      <p>If you forget to add <code>isActive</code> or give <code>age</code> as a string, TypeScript will throw an error. That’s the beauty — it’s guarding your code like a bodyguard. 💪</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Key Rules to Know</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>All properties must match</strong> unless marked optional.</li>\r\n        <li><strong>Use <code>?</code> for optional properties</strong> like: <code>email?: string;</code></li>\r\n        <li>Interfaces only exist in TypeScript — they don’t become real JavaScript code.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Optional Properties Example</h3>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ninterface BlogPost {\r\n  title: string;\r\n  author?: string; // Optional\r\n}\r\n\r\nconst post: BlogPost = {\r\n  title: \"Learning TS Interfaces\"\r\n};</code></pre>\r\n\r\n      <p>Notice that <code>author</code> is optional, so it's okay if we don’t include it.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Pro Tip</h3>\r\n      <p>Use interfaces to define reusable shapes across your app — from API responses to form data. It keeps your project super clean and consistent.</p>\r\n    `,\r\n    proTip: \"Interfaces don't compile to JavaScript — they're purely for your development sanity. Clean, readable, and error-saving.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `interface Product {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  isAvailable?: boolean; // optional\r\n}\r\n\r\nconst laptop: Product = {\r\n  id: 1,\r\n  name: \"Laptop\",\r\n  price: 75000,\r\n};`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'ts-functions':\r\n  return {\r\n    slug: 'ts-functions',\r\n    title: 'Typed Functions & Parameters',\r\n    content: `\r\n      <p>Ever ordered food online? You pick a restaurant, select your items, and the app expects your order in a certain format. Functions in TypeScript are similar — they expect inputs (called <strong>parameters</strong>) and return outputs (called <strong>return types</strong>), and with TypeScript, you can make these expectations crystal clear.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🍱 Real-World Analogy</h3>\r\n      <p>Think of a function like a kitchen — you give it raw materials (ingredients or parameters), and it gives you a final dish (the return value).</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Basic Typed Function</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction add(a: number, b: number): number {\r\n  return a + b;\r\n}\r\n</code></pre>\r\n      <p>Here, <code>a</code> and <code>b</code> must be numbers, and the result returned will also be a number. If someone tries to pass a string — boom 💥 — TypeScript will complain before you even run the code.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Optional & Default Parameters</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction greet(name: string = \"friend\") {\r\n  console.log(\"Hey \" + name);\r\n}\r\n\r\ngreet(); // \"Hey friend\"\r\ngreet(\"Riya\"); // \"Hey Riya\"\r\n</code></pre>\r\n      <p>You can set default values or make parameters optional using <code>?</code>.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Return Types</h3>\r\n      <p>You can explicitly tell TypeScript what a function should return:</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction isEven(n: number): boolean {\r\n  return n % 2 === 0;\r\n}\r\n</code></pre>\r\n      <p>This helps catch silly mistakes like returning a string by accident.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Function Type Aliases</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype MathOperation = (x: number, y: number) => number;\r\n\r\nconst multiply: MathOperation = (a, b) => a * b;\r\n</code></pre>\r\n      <p>Now you can reuse this function type anywhere without repeating yourself. Neat, right?</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Why It Matters</h3>\r\n      <p>Typed functions make your code:\r\n        <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n          <li>More readable</li>\r\n          <li>Less prone to runtime bugs</li>\r\n          <li>IntelliSense/autocomplete friendly</li>\r\n        </ul>\r\n      </p>\r\n    `,\r\n    proTip: \"Don't just type the return — type the parameters too! That’s where most bugs sneak in.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `function getFullName(first: string, last: string): string {\r\n  return \\`\\${first} \\${last}\\`;\r\n}\r\n\r\nconsole.log(getFullName(\"Riya\", \"Patel\"));`\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-unions-generics':\r\n  return {\r\n    slug: 'ts-unions-generics',\r\n    title: 'Unions & Generics — Flexible but Safe',\r\n    content: `\r\n      <p>Let’s talk about flexibility. Sometimes you want your code to be like a Swiss Army knife — able to handle multiple types of input. TypeScript gives you two superpowers for this: <strong>Unions</strong> and <strong>Generics</strong>.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔗 Union Types — Accepting Multiple Types</h3>\r\n      <p>Union types are like saying: “Hey, I’ll accept this or that.”</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction printId(id: number | string) {\r\n  console.log(\"Your ID is: \" + id);\r\n}\r\n\r\nprintId(101);        // Okay\r\nprintId(\"AB-123\");   // Also okay\r\n</code></pre>\r\n      <p>You’re telling TypeScript: this variable can be either a number or a string — and it’ll check that you only use it in ways that both types allow.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Type Narrowing</h3>\r\n      <p>When using unions, you often want to figure out what type it actually is before using it:</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction formatInput(input: string | number) {\r\n  if (typeof input === \"string\") {\r\n    return input.toUpperCase();\r\n  }\r\n  return input.toFixed(2);\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎒 Generics — Like Reusable Bags</h3>\r\n      <p>Generics are like saying “I don’t care what type it is now, just make sure it stays consistent.” Great for writing flexible, reusable functions.</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction identity<T>(value: T): T {\r\n  return value;\r\n}\r\n\r\nconst str = identity(\"hello\"); // string\r\nconst num = identity(42);      // number\r\n</code></pre>\r\n\r\n      <p>Here, <code>&lt;T&gt;</code> is a placeholder for the type that will be determined when the function is used. TypeScript keeps track of it.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧺 Generic with Arrays</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction getFirstItem<T>(arr: T[]): T {\r\n  return arr[0];\r\n}\r\n\r\nconst first = getFirstItem([100, 200, 300]); // number\r\nconst name = getFirstItem([\"Alice\", \"Bob\"]); // string\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤝 Unions vs Generics</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n        <li>Use <strong>unions</strong> when you want to accept multiple known types.</li>\r\n        <li>Use <strong>generics</strong> when you want to write reusable code that adapts to the type passed in.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ Real-Life Example</h3>\r\n      <p>Imagine a shopping cart function that works for clothes, groceries, or electronics — generics help you build one flexible function that handles all those types without losing track of what type each item is.</p>\r\n    `,\r\n    proTip: \"Use union types for variety, and generics for reusability with safety. They're TypeScript’s dynamic duo!\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `function wrapInArray<T>(value: T): T[] {\r\n  return [value];\r\n}\r\n\r\nconst wrapped = wrapInArray(\"gift\"); // [\"gift\"]`\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-classes':\r\n  return {\r\n    slug: 'ts-classes',\r\n    title: 'Classes & Inheritance (OOP)',\r\n    content: `\r\n      <p>If you're coming from Java, C#, or even playing around with OOP concepts, <strong>classes</strong> in TypeScript will feel like your comfy hoodie. But even if you're new — don’t worry, it’s easier than it sounds!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏠 What is a Class?</h3>\r\n      <p>A class is like a blueprint for an object. Imagine you're building a bunch of houses — all the same layout but with different names, colors, and owners. That blueprint is your class.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nclass Person {\r\n  name: string;\r\n  age: number;\r\n\r\n  constructor(name: string, age: number) {\r\n    this.name = name;\r\n    this.age = age;\r\n  }\r\n\r\n  greet() {\r\n    console.log(\\`Hello, I'm \\${this.name} and I'm \\${this.age} years old.\\`);\r\n  }\r\n}\r\n\r\nconst abhi = new Person(\"Abhi\", 22);\r\nabhi.greet(); // Hello, I'm Abhi and I'm 22 years old.\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What's Going On Here?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n        <li><strong>name</strong> and <strong>age</strong> are properties.</li>\r\n        <li><strong>constructor</strong> is a special method called when a new object is created.</li>\r\n        <li><strong>greet()</strong> is a method attached to every object from this class.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧬 Inheritance — Like Family Traits</h3>\r\n      <p>Just like you may inherit your smile from your mom or coding skills from your dad, classes can inherit from other classes!</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nclass Developer extends Person {\r\n  language: string;\r\n\r\n  constructor(name: string, age: number, language: string) {\r\n    super(name, age); // call parent constructor\r\n    this.language = language;\r\n  }\r\n\r\n  code() {\r\n    console.log(\\`\\${this.name} writes code in \\${this.language}.\\`);\r\n  }\r\n}\r\n\r\nconst dev = new Developer(\"Riya\", 25, \"TypeScript\");\r\ndev.greet(); // Hello, I'm Riya and I'm 25 years old.\r\ndev.code();  // Riya writes code in TypeScript.\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Access Modifiers</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n        <li><code>public</code> – accessible anywhere (default)</li>\r\n        <li><code>private</code> – only inside the class</li>\r\n        <li><code>protected</code> – inside the class and subclasses</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nclass SecretAgent {\r\n  public name: string;\r\n  private codeName: string;\r\n\r\n  constructor(name: string, codeName: string) {\r\n    this.name = name;\r\n    this.codeName = codeName;\r\n  }\r\n\r\n  reveal() {\r\n    return \\`I am \\${this.name}, aka \\${this.codeName}\\`;\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🪄 Real-Life Analogy</h3>\r\n      <p>Think of a class as a recipe, and an object as the actual dish made from it. Inheritance is like modifying a basic pizza recipe into a cheesy pizza 🍕. You still use the base but add more features.</p>\r\n    `,\r\n    proTip: \"Use classes when building components, services, or models with behaviors. Keep things clean with modifiers and constructors!\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\nclass Car {\r\n  constructor(public brand: string, public speed: number) {}\r\n\r\n  drive() {\r\n    console.log(\\`\\${this.brand} is driving at \\${this.speed} km/h\\`);\r\n  }\r\n}\r\n\r\nconst car = new Car(\"Toyota\", 80);\r\ncar.drive();\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-modules':\r\n  return {\r\n    slug: 'ts-modules',\r\n    title: 'Modules & Imports/Exports',\r\n    content: `\r\n      <p>Ever tried to manage a huge project in one single file? 🥵 It’s chaos. That's where <strong>modules</strong> come in — like drawers in a well-organized cabinet. Each drawer (file/module) holds its own stuff, but you can still access things when needed.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What is a Module?</h3>\r\n      <p>In TypeScript (and JavaScript), every file is a module. Anything you <code>export</code> from one file can be <code>imported</code> into another file.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Exporting — Sharing Your Stuff</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\n// file: user.ts\r\nexport const name = \"Abhi\";\r\nexport function greet() {\r\n  console.log(\\`Hello, \\${name}!\\`);\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📥 Importing — Getting Stuff</h3>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\n// file: app.ts\r\nimport { name, greet } from './user';\r\n\r\nconsole.log(name); // Abhi\r\ngreet();           // Hello, Abhi!\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 Default Exports (One Main Thing)</h3>\r\n      <p>If a module has one primary export, you can use <code>export default</code>.</p>\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\n// file: math.ts\r\nexport default function add(a: number, b: number) {\r\n  return a + b;\r\n}\r\n\r\n// file: app.ts\r\nimport add from './math';\r\nconsole.log(add(2, 3)); // 5\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧱 Why Use Modules?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n        <li>Helps you break code into logical pieces.</li>\r\n        <li>Makes code reusable and easier to maintain.</li>\r\n        <li>Avoids variable name conflicts.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\r\n      <p>Imagine building a house with every tool thrown into one box 🧰. It’s messy! Now imagine tools are sorted into drawers — saws, hammers, screwdrivers — that’s modules. You take what you need, when you need it.</p>\r\n    `,\r\n    proTip: \"Use named exports for multiple utilities and default export for single main functionality in a module.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// user.ts\r\nexport const isLoggedIn = true;\r\nexport function logout() {\r\n  console.log(\"Logged out!\");\r\n}\r\n\r\n// app.ts\r\nimport { isLoggedIn, logout } from './user';\r\nif (isLoggedIn) logout();\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-narrowing-guards':\r\n  return {\r\n    slug: 'ts-narrowing-guards',\r\n    title: 'Type Narrowing & Type Guards',\r\n    content: `\r\n      <p>Sometimes your variable is like a mystery box — you're not exactly sure what's inside until you check. That's where <strong>type narrowing</strong> and <strong>type guards</strong> help — they let you safely open the box 🎁.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 What is Type Narrowing?</h3>\r\n      <p>Type narrowing means figuring out the exact type of a variable when it's of multiple possible types (like <code>string | number</code>) — kind of like checking whether a package has books or clothes before opening it.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction printValue(val: string | number) {\r\n  if (typeof val === \"string\") {\r\n    console.log(val.toUpperCase()); // string-specific\r\n  } else {\r\n    console.log(val.toFixed(2));    // number-specific\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <p><code>typeof</code> helped us \"narrow\" the type to either <code>string</code> or <code>number</code>.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔒 Type Guards: Custom Narrowing</h3>\r\n      <p>Let’s say you’ve got objects with different shapes — you need to know which is which. You can write custom checks called <strong>type guards</strong>.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Dog = { bark: () => void };\r\ntype Cat = { meow: () => void };\r\n\r\nfunction isDog(pet: Dog | Cat): pet is Dog {\r\n  return (pet as Dog).bark !== undefined;\r\n}\r\n\r\nfunction makeSound(pet: Dog | Cat) {\r\n  if (isDog(pet)) {\r\n    pet.bark();\r\n  } else {\r\n    pet.meow();\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <p><code>isDog()</code> is a custom type guard that checks if the object has <code>bark()</code>.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧰 Other Ways to Narrow Types</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300 mt-2\">\r\n        <li><code>typeof</code> — for primitives like string, number, boolean</li>\r\n        <li><code>instanceof</code> — for classes</li>\r\n        <li><code>in</code> operator — for checking if a property exists</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nfunction showLength(x: string | string[]) {\r\n  if (Array.isArray(x)) {\r\n    console.log(x.length); // array\r\n  } else {\r\n    console.log(x.length); // string\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\r\n      <p>Imagine getting a parcel labeled “fragile or not fragile.” Before opening, you check if it’s glass or books. That check is a <strong>type guard</strong>, and once you know, you treat it accordingly. Simple, right?</p>\r\n    `,\r\n    proTip: \"Use type guards to write cleaner, safer logic when dealing with union types or multiple possible object shapes.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// Narrowing with 'in'\r\ntype Admin = { role: \"admin\", level: number };\r\ntype User = { username: string };\r\n\r\nfunction checkUser(u: Admin | User) {\r\n  if (\"role\" in u) {\r\n    console.log(\\`Admin level: \\${u.level}\\`);\r\n  } else {\r\n    console.log(\\`User: \\${u.username}\\`);\r\n  }\r\n}\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-enums':\r\n  return {\r\n    slug: 'ts-enums',\r\n    title: 'Enums Explained Simply',\r\n    content: `\r\n      <p>Ever labeled things with a name instead of a number? Like calling Monday \"MON\" instead of 0? That’s exactly what <strong>Enums</strong> do in TypeScript — they give names to values so your code makes way more sense 👇</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📋 Why Enums?</h3>\r\n      <p>Let’s say you're building a task tracker and want to store task status. You could use numbers, but what does <code>1</code> or <code>2</code> even mean?</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nenum Status {\r\n  Todo,        // 0\r\n  InProgress,  // 1\r\n  Done         // 2\r\n}\r\n\r\nconst taskStatus = Status.InProgress;\r\n</code></pre>\r\n\r\n      <p>This makes your code readable and meaningful. Instead of <code>1</code>, you see <code>Status.InProgress</code> — much better!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 Behind the Scenes</h3>\r\n      <p>By default, enums assign numbers starting from 0, unless you manually give values:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nenum Priority {\r\n  Low = 1,\r\n  Medium = 2,\r\n  High = 3\r\n}\r\n\r\nconst bug = Priority.High;\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📝 String Enums</h3>\r\n      <p>Prefer labels over numbers? Go for string enums — super helpful for APIs and debugging.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nenum Role {\r\n  Admin = \"ADMIN\",\r\n  Editor = \"EDITOR\",\r\n  Viewer = \"VIEWER\"\r\n}\r\n\r\nconst userRole = Role.Editor;\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Reverse Mapping</h3>\r\n      <p>In number enums, you can even get the name from the number:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nenum Direction {\r\n  North, South, East, West\r\n}\r\n\r\nconsole.log(Direction[0]); // \"North\"\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\r\n      <p>Think of enums like assigning a label to speed dials 📞 on your phone. Instead of remembering “2 is Mom”, you just press “Mom”. Enums let code do the same — label things clearly!</p>\r\n    `,\r\n    proTip: \"Use string enums for clearer debugging and safer API integrations. Use numeric enums for performance-sensitive operations.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// Status enum example\r\nenum Status {\r\n  Pending = \"PENDING\",\r\n  Success = \"SUCCESS\",\r\n  Failed = \"FAILED\"\r\n}\r\n\r\nfunction handleStatus(s: Status) {\r\n  if (s === Status.Success) {\r\n    console.log(\"✅ All good!\");\r\n  } else {\r\n    console.log(\"⚠️ Something went wrong.\");\r\n  }\r\n}\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-utility-types':\r\n  return {\r\n    slug: 'ts-utility-types',\r\n    title: 'Built-in Utility Types (Partial, Pick, etc.)',\r\n    content: `\r\n      <p>Imagine you're building with Lego blocks — sometimes you want the full set, sometimes just a few pieces. TypeScript’s <strong>utility types</strong> help you do exactly that with your types — reuse, reshape, or reduce them in powerful ways 🧱.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 Partial&lt;T&gt;</h3>\r\n      <p>Makes all properties of a type optional. Great when you're updating just part of an object.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Profile = {\r\n  name: string;\r\n  age: number;\r\n};\r\n\r\nconst updateProfile = (data: Partial<Profile>) => {\r\n  // Now you can send just name or just age\r\n};\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Pick&lt;T, K&gt;</h3>\r\n      <p>Pick only specific properties from a type — like ordering à la carte 🍽️</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype User = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n};\r\n\r\ntype PublicUser = Pick<User, \"name\" | \"email\">;\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚫 Omit&lt;T, K&gt;</h3>\r\n      <p>Opposite of Pick — removes certain properties.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype PrivateUser = Omit<User, \"email\">; // no email here\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Readonly&lt;T&gt;</h3>\r\n      <p>Makes all properties immutable (like freezing an object 🧊).</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Config = {\r\n  version: string;\r\n};\r\n\r\nconst config: Readonly<Config> = {\r\n  version: \"1.0\"\r\n};\r\n\r\nconfig.version = \"2.0\"; // ❌ Error: Cannot assign\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📚 Record&lt;K, T&gt;</h3>\r\n      <p>Create an object type with keys of type <code>K</code> and values of type <code>T</code>.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Role = \"admin\" | \"user\";\r\n\r\nconst permissions: Record<Role, boolean> = {\r\n  admin: true,\r\n  user: false\r\n};\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏗️ Real-Life Analogy</h3>\r\n      <p>Think of utility types like smart tools in your garage 🧰. Instead of creating new stuff from scratch, you tweak or adjust existing types to save time and avoid bugs. Efficient and clean!</p>\r\n    `,\r\n    proTip: \"When building APIs or forms, use utility types like Partial and Pick to make your types flexible and safe at the same time.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// Making a reusable form type\r\ntype User = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n};\r\n\r\n// Just what's needed for the signup form\r\ntype SignupForm = Pick<User, \"name\" | \"email\">;\r\n\r\n// For updates, make everything optional\r\ntype UpdateUser = Partial<User>;\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-errors':\r\n  return {\r\n    slug: 'ts-errors',\r\n    title: 'Handling Errors in TypeScript',\r\n    content: `\r\n      <p>Errors are like unexpected potholes while driving 🚗 — you either avoid them or handle them smoothly. TypeScript helps you catch those early and handle them smartly when they show up at runtime.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🪤 Try / Catch — The Classic Net</h3>\r\n      <p>Use try/catch when you're unsure if something might break at runtime — especially when working with APIs or parsing data:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntry {\r\n  const data = JSON.parse('{\"name\":\"IgKnight\"}');\r\n  console.log(data.name);\r\n} catch (error) {\r\n  console.error(\"Something went wrong:\", error);\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📏 Strongly Typed Errors (optional but helpful)</h3>\r\n      <p>In TS, <code>catch</code> doesn't know the exact shape of the error, so if you're accessing specific properties, you should tell TS what the error is:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntry {\r\n  throw new Error(\"Uh oh!\");\r\n} catch (error) {\r\n  if (error instanceof Error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">❗ Custom Error Classes</h3>\r\n      <p>Need better control? Create your own error classes for specific use-cases.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nclass AuthError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"AuthError\";\r\n  }\r\n}\r\n\r\nthrow new AuthError(\"Invalid credentials\");\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Function Return Types: Error or Value?</h3>\r\n      <p>Another smart pattern: return either a value or an error manually using <code>Result</code> style types:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Result = { data: string } | { error: string };\r\n\r\nfunction getData(): Result {\r\n  const success = true;\r\n  return success ? { data: \"Done\" } : { error: \"Failed to load\" };\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\r\n      <p>Think of <code>try/catch</code> like wearing a helmet while skating — you hope not to fall, but if you do, you're safe 😅. Same idea in TS: protect the risky parts of your code!</p>\r\n    `,\r\n    proTip: \"Don’t overuse try/catch — use TypeScript types to prevent errors in the first place. Reserve try/catch for truly unpredictable operations like user input or network calls.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// Safer parsing with try/catch\r\nfunction safeJsonParse(str: string) {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst result = safeJsonParse(\"{ invalid json }\"); // null\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-config':\r\n  return {\r\n    slug: 'ts-config',\r\n    title: 'tsconfig.json Demystified',\r\n    content: `\r\n      <p>If TypeScript was a spaceship 🚀, <code>tsconfig.json</code> would be its control panel — it tells the compiler how to behave, what to include, and how strict to be.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 What is tsconfig.json?</h3>\r\n      <p>It's a simple JSON file that lives in your project root and tells TypeScript how to compile your code. It controls what files are used, what output you get, and how safe you want your code to be.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ Common Settings You’ll See</h3>\r\n\r\n      <ul class=\"list-disc pl-6 text-white\">\r\n        <li><code>\"compilerOptions\"</code>: Where all your rules live</li>\r\n        <li><code>\"include\"</code>: What files/folders TypeScript should care about</li>\r\n        <li><code>\"exclude\"</code>: What to ignore (e.g., <code>node_modules</code>)</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES6\", // Convert TS to this version of JS\r\n    \"module\": \"commonjs\",\r\n    \"strict\": true, // Enables all strict type checks\r\n    \"outDir\": \"./dist\", // Where to put compiled JS\r\n    \"esModuleInterop\": true // Helps with importing CommonJS modules\r\n  },\r\n  \"include\": [\"src/**/*\"],\r\n  \"exclude\": [\"node_modules\"]\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔍 Some Handy Compiler Options</h3>\r\n      <ul class=\"list-disc pl-6 text-white\">\r\n        <li><code>\"strict\": true</code> — Forces you to write safer code (like no undefined returns, no sloppy nulls)</li>\r\n        <li><code>\"noImplicitAny\": true</code> — Stops TS from guessing types as <code>any</code></li>\r\n        <li><code>\"baseUrl\"</code> and <code>\"paths\"</code> — Helps with cleaner imports like <code>@/utils</code></li>\r\n        <li><code>\"skipLibCheck\"</code> — Skips checking third-party libs, saves build time</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\r\n      <p><code>tsconfig.json</code> is like customizing your burger order 🍔. You can say: “No onions, extra cheese, gluten-free bun” — and TypeScript listens and builds your code exactly how you want.</p>\r\n    `,\r\n    proTip: \"Start with a basic tsconfig, then slowly tighten rules (like turning on strict mode) as you get comfy with TypeScript.\",\r\n    codeSamples: [\r\n      {\r\n        language: 'json',\r\n        code: `\r\n// Minimal starter tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"strict\": true\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n        `\r\n      }\r\n    ]\r\n  };\r\n  case 'ts-best-practices':\r\n  return {\r\n    slug: 'ts-best-practices',\r\n    title: 'Best Practices & Real Project Tips',\r\n    content: `\r\n      <p>Learning TypeScript is like learning to drive — knowing the rules keeps you safe 🚦. Here are some simple but powerful habits that'll make your code cleaner, safer, and easier to work with in real projects.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 1. Always Define Types Explicitly</h3>\r\n      <p>Don't let TS guess. Be clear with your types — it's like labeling your food containers 🍱 so you don’t microwave salad by mistake.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\nconst user: { name: string; age: number } = {\r\n  name: \"Nash\",\r\n  age: 22,\r\n};\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 2. Prefer Interfaces for Objects</h3>\r\n      <p>Interfaces make it easier to structure and reuse object shapes. Use them like a shared blueprint 🏗️.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ninterface Product {\r\n  name: string;\r\n  price: number;\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 3. Avoid 'any' Like It's a Black Hole 🕳️</h3>\r\n      <p><code>any</code> removes all type safety — it’s like saying “I trust everything blindly”. Use <code>unknown</code> or narrow it down properly.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 4. Use Union & Literal Types for Options</h3>\r\n      <p>Great for dropdowns, themes, or modes — it forces only valid values 🎯</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\ntype Theme = \"light\" | \"dark\";\r\n\r\nfunction setTheme(mode: Theme) {\r\n  console.log(\"Theme set to\", mode);\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 5. Organize Types in a Separate File</h3>\r\n      <p>For real-world apps, keep all shared types in one folder like <code>types/</code> or <code>models/</code>. Keeps everything clean and easy to maintain.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 6. Enable Strict Mode in tsconfig</h3>\r\n      <p>This turns on a bunch of safety features — it’s like putting seatbelts on your code 💺.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] p-4 rounded text-green-400 overflow-auto text-sm\"><code>\r\n// tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"strict\": true\r\n  }\r\n}\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✅ 7. Start Simple, Grow with Confidence</h3>\r\n      <p>Don’t try to type every single line from day one. Use basic types at first, and grow them as your app grows 💡.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-Life Analogy</h3>\r\n      <p>Think of TypeScript as a co-pilot who points out issues before you crash. Follow best practices and it'll help you avoid a ton of late-night bugs 🐞.</p>\r\n    `,\r\n    proTip: \"Your TypeScript journey doesn’t need to be perfect — write code, break stuff, and Google a lot. That’s how real devs level up!\",\r\n    codeSamples: [\r\n      {\r\n        language: 'ts',\r\n        code: `\r\n// Example: Reusable interface\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  isAdmin?: boolean;\r\n}\r\n\r\n// Using it\r\nconst currentUser: User = {\r\n  id: 1,\r\n  email: \"user@example.com\",\r\n};\r\n        `\r\n      }\r\n    ]\r\n  };\r\n\r\n\r\n    default:\r\n      return undefined;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}