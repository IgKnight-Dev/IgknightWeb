{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  static #_ = AbstractCommandsQuickAccessProvider_1 = this;\n  static #_2 = this.PREFIX = '>';\n  static #_3 = this.TFIDF_THRESHOLD = 0.5;\n  static #_4 = this.TFIDF_MAX_RESULTS = 5;\n  static #_5 = this.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.dialogService = dialogService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n    this.options = options;\n  }\n  _getPicks(filter, _disposables, token, runOptions) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Ask subclass for all command picks\n      const allCommandPicks = yield _this.getCommandPicks(token);\n      if (token.isCancellationRequested) {\n        return [];\n      }\n      const runTfidf = createSingleCallFunction(() => {\n        const tfidf = new TfIdfCalculator();\n        tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n          key: commandPick.commandId,\n          textChunks: [_this.getTfIdfChunk(commandPick)]\n        })));\n        const result = tfidf.calculateScores(filter, token);\n        return normalizeTfIdfScores(result).filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD).slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n      });\n      // Filter\n      const filteredCommandPicks = [];\n      for (const commandPick of allCommandPicks) {\n        const labelHighlights = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label) ?? undefined;\n        const aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n        // Add if matching in label or alias\n        if (labelHighlights || aliasHighlights) {\n          commandPick.highlights = {\n            label: labelHighlights,\n            detail: _this.options.showAlias ? aliasHighlights : undefined\n          };\n          filteredCommandPicks.push(commandPick);\n        }\n        // Also add if we have a 100% command ID match\n        else if (filter === commandPick.commandId) {\n          filteredCommandPicks.push(commandPick);\n        }\n        // Handle tf-idf scoring for the rest if there's a filter\n        else if (filter.length >= 3) {\n          const tfidf = runTfidf();\n          if (token.isCancellationRequested) {\n            return [];\n          }\n          // Add if we have a tf-idf score\n          const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n          if (tfidfScore) {\n            commandPick.tfIdfScore = tfidfScore.score;\n            filteredCommandPicks.push(commandPick);\n          }\n        }\n      }\n      // Add description to commands that have duplicate labels\n      const mapLabelToCommand = new Map();\n      for (const commandPick of filteredCommandPicks) {\n        const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n        if (existingCommandForLabel) {\n          commandPick.description = commandPick.commandId;\n          existingCommandForLabel.description = existingCommandForLabel.commandId;\n        } else {\n          mapLabelToCommand.set(commandPick.label, commandPick);\n        }\n      }\n      // Sort by MRU order and fallback to name otherwise\n      filteredCommandPicks.sort((commandPickA, commandPickB) => {\n        // If a result came from tf-idf, we want to put that towards the bottom\n        if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n          if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n            return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n          }\n          return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n        } else if (commandPickA.tfIdfScore) {\n          return 1; // first command has a score but other doesn't so other wins\n        } else if (commandPickB.tfIdfScore) {\n          return -1; // other command has a score but first doesn't so first wins\n        }\n        const commandACounter = _this.commandsHistory.peek(commandPickA.commandId);\n        const commandBCounter = _this.commandsHistory.peek(commandPickB.commandId);\n        if (commandACounter && commandBCounter) {\n          return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n        }\n        if (commandACounter) {\n          return -1; // first command was used, so it wins over the non used one\n        }\n        if (commandBCounter) {\n          return 1; // other command was used so it wins over the command\n        }\n        if (_this.options.suggestedCommandIds) {\n          const commandASuggestion = _this.options.suggestedCommandIds.has(commandPickA.commandId);\n          const commandBSuggestion = _this.options.suggestedCommandIds.has(commandPickB.commandId);\n          if (commandASuggestion && commandBSuggestion) {\n            return 0; // honor the order of the array\n          }\n          if (commandASuggestion) {\n            return -1; // first command was suggested, so it wins over the non suggested one\n          }\n          if (commandBSuggestion) {\n            return 1; // other command was suggested so it wins over the command\n          }\n        }\n        // both commands were never used, so we sort by name\n        return commandPickA.label.localeCompare(commandPickB.label);\n      });\n      const commandPicks = [];\n      let addOtherSeparator = false;\n      let addSuggestedSeparator = true;\n      let addCommonlyUsedSeparator = !!_this.options.suggestedCommandIds;\n      for (let i = 0; i < filteredCommandPicks.length; i++) {\n        const commandPick = filteredCommandPicks[i];\n        // Separator: recently used\n        if (i === 0 && _this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('recentlyUsed', \"recently used\")\n          });\n          addOtherSeparator = true;\n        }\n        if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('suggested', \"similar commands\")\n          });\n          addSuggestedSeparator = false;\n        }\n        // Separator: commonly used\n        if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !_this.commandsHistory.peek(commandPick.commandId) && _this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('commonlyUsed', \"commonly used\")\n          });\n          addOtherSeparator = true;\n          addCommonlyUsedSeparator = false;\n        }\n        // Separator: other commands\n        if (addOtherSeparator && commandPick.tfIdfScore === undefined && !_this.commandsHistory.peek(commandPick.commandId) && !_this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('morecCommands', \"other commands\")\n          });\n          addOtherSeparator = false;\n        }\n        // Command\n        commandPicks.push(_this.toCommandPick(commandPick, runOptions));\n      }\n      if (!_this.hasAdditionalCommandPicks(filter, token)) {\n        return commandPicks;\n      }\n      return {\n        picks: commandPicks,\n        additionalPicks: _asyncToGenerator(function* () {\n          const additionalCommandPicks = yield _this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n          if (token.isCancellationRequested) {\n            return [];\n          }\n          const commandPicks = additionalCommandPicks.map(commandPick => _this.toCommandPick(commandPick, runOptions));\n          // Basically, if we haven't already added a separator, we add one before the additional picks so long\n          // as one hasn't been added to the start of the array.\n          if (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n            commandPicks.unshift({\n              type: 'separator',\n              label: localize('suggested', \"similar commands\")\n            });\n          }\n          return commandPicks;\n        })()\n      };\n    })();\n  }\n  toCommandPick(commandPick, runOptions) {\n    var _this2 = this;\n    if (commandPick.type === 'separator') {\n      return commandPick;\n    }\n    const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n    const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n    return {\n      ...commandPick,\n      ariaLabel,\n      detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n      keybinding,\n      accept: function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          // Add to history\n          _this2.commandsHistory.push(commandPick.commandId);\n          // Telementry\n          _this2.telemetryService.publicLog2('workbenchActionExecuted', {\n            id: commandPick.commandId,\n            from: runOptions?.from ?? 'quick open'\n          });\n          // Run\n          try {\n            commandPick.args?.length ? yield _this2.commandService.executeCommand(commandPick.commandId, ...commandPick.args) : yield _this2.commandService.executeCommand(commandPick.commandId);\n          } catch (error) {\n            if (!isCancellationError(error)) {\n              _this2.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n            }\n          }\n        });\n        return function accept() {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    };\n  }\n  // TF-IDF string to be indexed\n  getTfIdfChunk({\n    label,\n    commandAlias,\n    commandDescription\n  }) {\n    let chunk = label;\n    if (commandAlias && commandAlias !== label) {\n      chunk += ` - ${commandAlias}`;\n    }\n    if (commandDescription && commandDescription.value !== label) {\n      // If the original is the same as the value, don't add it\n      chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n    }\n    return chunk;\n  }\n};\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = /*#__PURE__*/(() => {\n  let CommandsHistory = class CommandsHistory extends Disposable {\n    static #_ = CommandsHistory_1 = this;\n    static #_2 = this.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n    static #_3 = this.PREF_KEY_CACHE = 'commandPalette.mru.cache';\n    static #_4 = this.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n    static #_5 = this.counter = 1;\n    static #_6 = this.hasChanges = false;\n    constructor(storageService, configurationService, logService) {\n      super();\n      this.storageService = storageService;\n      this.configurationService = configurationService;\n      this.logService = logService;\n      this.configuredCommandsHistoryLength = 0;\n      this.updateConfiguration();\n      this.load();\n      this.registerListeners();\n    }\n    registerListeners() {\n      this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n      this._register(this.storageService.onWillSaveState(e => {\n        if (e.reason === WillSaveStateReason.SHUTDOWN) {\n          // Commands history is very dynamic and so we limit impact\n          // on storage to only save on shutdown. This helps reduce\n          // the overhead of syncing this data across machines.\n          this.saveState();\n        }\n      }));\n    }\n    updateConfiguration(e) {\n      if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n        return;\n      }\n      this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n      if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n        CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n        CommandsHistory_1.hasChanges = true;\n      }\n    }\n    load() {\n      const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n      let serializedCache;\n      if (raw) {\n        try {\n          serializedCache = JSON.parse(raw);\n        } catch (error) {\n          this.logService.error(`[CommandsHistory] invalid data: ${error}`);\n        }\n      }\n      const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n      if (serializedCache) {\n        let entries;\n        if (serializedCache.usesLRU) {\n          entries = serializedCache.entries;\n        } else {\n          entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n        }\n        entries.forEach(entry => cache.set(entry.key, entry.value));\n      }\n      CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n      if (!CommandsHistory_1.cache) {\n        return;\n      }\n      CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n      CommandsHistory_1.hasChanges = true;\n    }\n    peek(commandId) {\n      return CommandsHistory_1.cache?.peek(commandId);\n    }\n    saveState() {\n      if (!CommandsHistory_1.cache) {\n        return;\n      }\n      if (!CommandsHistory_1.hasChanges) {\n        return;\n      }\n      const serializedCache = {\n        usesLRU: true,\n        entries: []\n      };\n      CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({\n        key,\n        value\n      }));\n      this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n      this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n      CommandsHistory_1.hasChanges = false;\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n      const config = configurationService.getValue();\n      const configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n      if (typeof configuredCommandHistoryLength === 'number') {\n        return configuredCommandHistoryLength;\n      }\n      return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n  };\n  return CommandsHistory;\n})();\nCommandsHistory = CommandsHistory_1 = __decorate([__param(0, IStorageService), __param(1, IConfigurationService), __param(2, ILogService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","AbstractCommandsQuickAccessProvider_1","CommandsHistory_1","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","createSingleCallFunction","Disposable","LRUCache","TfIdfCalculator","normalizeTfIdfScores","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","ILogService","PickerQuickAccessProvider","IStorageService","WillSaveStateReason","ITelemetryService","AbstractCommandsQuickAccessProvider","_","_2","PREFIX","_3","TFIDF_THRESHOLD","_4","TFIDF_MAX_RESULTS","_5","WORD_FILTER","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","commandsHistory","_register","createInstance","CommandsHistory","_getPicks","filter","_disposables","token","runOptions","_this","_asyncToGenerator","allCommandPicks","getCommandPicks","isCancellationRequested","runTfidf","tfidf","updateDocuments","map","commandPick","commandId","textChunks","getTfIdfChunk","result","calculateScores","score","slice","filteredCommandPicks","labelHighlights","label","undefined","aliasHighlights","commandAlias","highlights","detail","showAlias","push","tfidfScore","find","tfIdfScore","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","localeCompare","commandACounter","peek","commandBCounter","suggestedCommandIds","commandASuggestion","has","commandBSuggestion","commandPicks","addOtherSeparator","addSuggestedSeparator","addCommonlyUsedSeparator","type","toCommandPick","hasAdditionalCommandPicks","picks","additionalPicks","additionalCommandPicks","getAdditionalCommandPicks","unshift","_this2","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","accept","_ref2","publicLog2","id","from","args","executeCommand","error","apply","commandDescription","chunk","value","original","DEFAULT_COMMANDS_HISTORY_LENGTH","PREF_KEY_CACHE","PREF_KEY_COUNTER","counter","_6","hasChanges","storageService","configurationService","logService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","e","onWillSaveState","reason","SHUTDOWN","saveState","affectsConfiguration","getConfiguredCommandHistoryLength","cache","limit","raw","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","getNumber","store","stringify","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    static { AbstractCommandsQuickAccessProvider_1 = this; }\n    static { this.PREFIX = '>'; }\n    static { this.TFIDF_THRESHOLD = 0.5; }\n    static { this.TFIDF_MAX_RESULTS = 5; }\n    static { this.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString); }\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    async _getPicks(filter, _disposables, token, runOptions) {\n        // Ask subclass for all command picks\n        const allCommandPicks = await this.getCommandPicks(token);\n        if (token.isCancellationRequested) {\n            return [];\n        }\n        const runTfidf = createSingleCallFunction(() => {\n            const tfidf = new TfIdfCalculator();\n            tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n                key: commandPick.commandId,\n                textChunks: [this.getTfIdfChunk(commandPick)]\n            })));\n            const result = tfidf.calculateScores(filter, token);\n            return normalizeTfIdfScores(result)\n                .filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD)\n                .slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n        });\n        // Filter\n        const filteredCommandPicks = [];\n        for (const commandPick of allCommandPicks) {\n            const labelHighlights = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label) ?? undefined;\n            const aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n            // Add if matching in label or alias\n            if (labelHighlights || aliasHighlights) {\n                commandPick.highlights = {\n                    label: labelHighlights,\n                    detail: this.options.showAlias ? aliasHighlights : undefined\n                };\n                filteredCommandPicks.push(commandPick);\n            }\n            // Also add if we have a 100% command ID match\n            else if (filter === commandPick.commandId) {\n                filteredCommandPicks.push(commandPick);\n            }\n            // Handle tf-idf scoring for the rest if there's a filter\n            else if (filter.length >= 3) {\n                const tfidf = runTfidf();\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                // Add if we have a tf-idf score\n                const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n                if (tfidfScore) {\n                    commandPick.tfIdfScore = tfidfScore.score;\n                    filteredCommandPicks.push(commandPick);\n                }\n            }\n        }\n        // Add description to commands that have duplicate labels\n        const mapLabelToCommand = new Map();\n        for (const commandPick of filteredCommandPicks) {\n            const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n            if (existingCommandForLabel) {\n                commandPick.description = commandPick.commandId;\n                existingCommandForLabel.description = existingCommandForLabel.commandId;\n            }\n            else {\n                mapLabelToCommand.set(commandPick.label, commandPick);\n            }\n        }\n        // Sort by MRU order and fallback to name otherwise\n        filteredCommandPicks.sort((commandPickA, commandPickB) => {\n            // If a result came from tf-idf, we want to put that towards the bottom\n            if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                    return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                }\n                return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n            }\n            else if (commandPickA.tfIdfScore) {\n                return 1; // first command has a score but other doesn't so other wins\n            }\n            else if (commandPickB.tfIdfScore) {\n                return -1; // other command has a score but first doesn't so first wins\n            }\n            const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n            const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n            if (commandACounter && commandBCounter) {\n                return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n            }\n            if (commandACounter) {\n                return -1; // first command was used, so it wins over the non used one\n            }\n            if (commandBCounter) {\n                return 1; // other command was used so it wins over the command\n            }\n            if (this.options.suggestedCommandIds) {\n                const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n                const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n                if (commandASuggestion && commandBSuggestion) {\n                    return 0; // honor the order of the array\n                }\n                if (commandASuggestion) {\n                    return -1; // first command was suggested, so it wins over the non suggested one\n                }\n                if (commandBSuggestion) {\n                    return 1; // other command was suggested so it wins over the command\n                }\n            }\n            // both commands were never used, so we sort by name\n            return commandPickA.label.localeCompare(commandPickB.label);\n        });\n        const commandPicks = [];\n        let addOtherSeparator = false;\n        let addSuggestedSeparator = true;\n        let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n        for (let i = 0; i < filteredCommandPicks.length; i++) {\n            const commandPick = filteredCommandPicks[i];\n            // Separator: recently used\n            if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                addOtherSeparator = true;\n            }\n            if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n                commandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                addSuggestedSeparator = false;\n            }\n            // Separator: commonly used\n            if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n                addOtherSeparator = true;\n                addCommonlyUsedSeparator = false;\n            }\n            // Separator: other commands\n            if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                addOtherSeparator = false;\n            }\n            // Command\n            commandPicks.push(this.toCommandPick(commandPick, runOptions));\n        }\n        if (!this.hasAdditionalCommandPicks(filter, token)) {\n            return commandPicks;\n        }\n        return {\n            picks: commandPicks,\n            additionalPicks: (async () => {\n                const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n                // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                // as one hasn't been added to the start of the array.\n                if (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n                    commandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                }\n                return commandPicks;\n            })()\n        };\n    }\n    toCommandPick(commandPick, runOptions) {\n        if (commandPick.type === 'separator') {\n            return commandPick;\n        }\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ?\n            localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n            commandPick.label;\n        return {\n            ...commandPick,\n            ariaLabel,\n            detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n            keybinding,\n            accept: async () => {\n                // Add to history\n                this.commandsHistory.push(commandPick.commandId);\n                // Telementry\n                this.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: runOptions?.from ?? 'quick open'\n                });\n                // Run\n                try {\n                    commandPick.args?.length\n                        ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n                        : await this.commandService.executeCommand(commandPick.commandId);\n                }\n                catch (error) {\n                    if (!isCancellationError(error)) {\n                        this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n                    }\n                }\n            }\n        };\n    }\n    // TF-IDF string to be indexed\n    getTfIdfChunk({ label, commandAlias, commandDescription }) {\n        let chunk = label;\n        if (commandAlias && commandAlias !== label) {\n            chunk += ` - ${commandAlias}`;\n        }\n        if (commandDescription && commandDescription.value !== label) {\n            // If the original is the same as the value, don't add it\n            chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n        }\n        return chunk;\n    }\n};\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n    static { CommandsHistory_1 = this; }\n    static { this.DEFAULT_COMMANDS_HISTORY_LENGTH = 50; }\n    static { this.PREF_KEY_CACHE = 'commandPalette.mru.cache'; }\n    static { this.PREF_KEY_COUNTER = 'commandPalette.mru.counter'; }\n    static { this.counter = 1; }\n    static { this.hasChanges = false; }\n    constructor(storageService, configurationService, logService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.logService = logService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n        this._register(this.storageService.onWillSaveState(e => {\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\n                // Commands history is very dynamic and so we limit impact\n                // on storage to only save on shutdown. This helps reduce\n                // the overhead of syncing this data across machines.\n                this.saveState();\n            }\n        }));\n    }\n    updateConfiguration(e) {\n        if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n            return;\n        }\n        this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory_1.hasChanges = true;\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                this.logService.error(`[CommandsHistory] invalid data: ${error}`);\n            }\n        }\n        const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n        CommandsHistory_1.hasChanges = true;\n    }\n    peek(commandId) {\n        return CommandsHistory_1.cache?.peek(commandId);\n    }\n    saveState() {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        if (!CommandsHistory_1.hasChanges) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        CommandsHistory_1.hasChanges = false;\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory = CommandsHistory_1 = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService),\n    __param(2, ILogService)\n], CommandsHistory);\nexport { CommandsHistory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}