{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EmbeddedCodeEditorWidget } from '../../../browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditVisible, showNextInlineEditActionId, showPreviousInlineEditActionId } from './consts.js';\nimport { InlineEditsController } from './inlineEditsController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nfunction labelAndAlias(str) {\n  return {\n    label: str.value,\n    alias: str.original\n  };\n}\nexport let ShowNextInlineEditAction = /*#__PURE__*/(() => {\n  class ShowNextInlineEditAction extends EditorAction {\n    static #_ = this.ID = showNextInlineEditActionId;\n    constructor() {\n      super({\n        id: ShowNextInlineEditAction.ID,\n        ...labelAndAlias(nls.localize2('action.inlineEdits.showNext', \"Show Next Inline Edit\")),\n        precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n        kbOpts: {\n          weight: 100,\n          primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n        }\n      });\n    }\n    run(accessor, editor) {\n      return _asyncToGenerator(function* () {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.next();\n      })();\n    }\n  }\n  return ShowNextInlineEditAction;\n})();\nexport let ShowPreviousInlineEditAction = /*#__PURE__*/(() => {\n  class ShowPreviousInlineEditAction extends EditorAction {\n    static #_ = this.ID = showPreviousInlineEditActionId;\n    constructor() {\n      super({\n        id: ShowPreviousInlineEditAction.ID,\n        ...labelAndAlias(nls.localize2('action.inlineEdits.showPrevious', \"Show Previous Inline Edit\")),\n        precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n        kbOpts: {\n          weight: 100,\n          primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n        }\n      });\n    }\n    run(accessor, editor) {\n      return _asyncToGenerator(function* () {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.previous();\n      })();\n    }\n  }\n  return ShowPreviousInlineEditAction;\n})();\nexport class TriggerInlineEditAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineEdits.trigger',\n      ...labelAndAlias(nls.localize2('action.inlineEdits.trigger', \"Trigger Inline Edit\")),\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(accessor, editor) {\n    return _asyncToGenerator(function* () {\n      const controller = InlineEditsController.get(editor);\n      yield asyncTransaction(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (tx) {\n          /** @description triggerExplicitly from command */\n          yield controller?.model.get()?.triggerExplicitly(tx);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\nexport class AcceptInlineEdit extends EditorAction {\n  constructor() {\n    super({\n      id: inlineEditAcceptId,\n      ...labelAndAlias(nls.localize2('action.inlineEdits.accept', \"Accept Inline Edit\")),\n      precondition: inlineEditVisible,\n      menuOpts: {\n        menuId: MenuId.InlineEditsActions,\n        title: nls.localize('inlineEditsActions', \"Accept Inline Edit\"),\n        group: 'primary',\n        order: 1,\n        icon: Codicon.check\n      },\n      kbOpts: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 10 /* KeyCode.Space */,\n        weight: 20000,\n        kbExpr: inlineEditVisible\n      }\n    });\n  }\n  run(accessor, editor) {\n    return _asyncToGenerator(function* () {\n      if (editor instanceof EmbeddedCodeEditorWidget) {\n        editor = editor.getParentEditor();\n      }\n      const controller = InlineEditsController.get(editor);\n      if (controller) {\n        controller.model.get()?.accept(controller.editor);\n        controller.editor.focus();\n      }\n    })();\n  }\n}\n/*\nTODO@hediet\nexport class PinInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.pin',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.pin', \"Pin Inline Edit\")),\n            precondition: undefined,\n            kbOpts: {\n                primary: KeyMod.Shift | KeyCode.Space,\n                weight: 20000,\n            }\n        });\n    }\n\n    public async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.togglePin();\n        }\n    }\n}\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.pin',\n        title: nls.localize('Pin', \"Pin\"),\n        icon: Codicon.pin,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey.negate(),\n});\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.unpin',\n        title: nls.localize('Unpin', \"Unpin\"),\n        icon: Codicon.pinned,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey,\n});*/\nexport let HideInlineEdit = /*#__PURE__*/(() => {\n  class HideInlineEdit extends EditorAction {\n    static #_ = this.ID = 'editor.action.inlineEdits.hide';\n    constructor() {\n      super({\n        id: HideInlineEdit.ID,\n        ...labelAndAlias(nls.localize2('action.inlineEdits.hide', \"Hide Inline Edit\")),\n        precondition: inlineEditVisible,\n        kbOpts: {\n          weight: 100,\n          primary: 9 /* KeyCode.Escape */\n        }\n      });\n    }\n    run(accessor, editor) {\n      return _asyncToGenerator(function* () {\n        const controller = InlineEditsController.get(editor);\n        transaction(tx => {\n          controller?.model.get()?.stop(tx);\n        });\n      })();\n    }\n  }\n  return HideInlineEdit;\n})();","map":{"version":3,"names":["Codicon","transaction","asyncTransaction","EditorAction","EmbeddedCodeEditorWidget","EditorContextKeys","inlineEditAcceptId","inlineEditVisible","showNextInlineEditActionId","showPreviousInlineEditActionId","InlineEditsController","nls","MenuId","ContextKeyExpr","labelAndAlias","str","label","value","alias","original","ShowNextInlineEditAction","_","ID","constructor","id","localize2","precondition","and","writable","kbOpts","weight","primary","run","accessor","editor","_asyncToGenerator","controller","get","model","next","ShowPreviousInlineEditAction","previous","TriggerInlineEditAction","_ref","tx","triggerExplicitly","_x","apply","arguments","AcceptInlineEdit","menuOpts","menuId","InlineEditsActions","title","localize","group","order","icon","check","kbExpr","getParentEditor","accept","focus","HideInlineEdit","stop"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdits/browser/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EmbeddedCodeEditorWidget } from '../../../browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditVisible, showNextInlineEditActionId, showPreviousInlineEditActionId } from './consts.js';\nimport { InlineEditsController } from './inlineEditsController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nfunction labelAndAlias(str) {\n    return {\n        label: str.value,\n        alias: str.original,\n    };\n}\nexport class ShowNextInlineEditAction extends EditorAction {\n    static { this.ID = showNextInlineEditActionId; }\n    constructor() {\n        super({\n            id: ShowNextInlineEditAction.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.showNext', \"Show Next Inline Edit\")),\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.next();\n    }\n}\nexport class ShowPreviousInlineEditAction extends EditorAction {\n    static { this.ID = showPreviousInlineEditActionId; }\n    constructor() {\n        super({\n            id: ShowPreviousInlineEditAction.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.showPrevious', \"Show Previous Inline Edit\")),\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.previous();\n    }\n}\nexport class TriggerInlineEditAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.trigger',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.trigger', \"Trigger Inline Edit\")),\n            precondition: EditorContextKeys.writable\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        await asyncTransaction(async (tx) => {\n            /** @description triggerExplicitly from command */\n            await controller?.model.get()?.triggerExplicitly(tx);\n        });\n    }\n}\nexport class AcceptInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: inlineEditAcceptId,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.accept', \"Accept Inline Edit\")),\n            precondition: inlineEditVisible,\n            menuOpts: {\n                menuId: MenuId.InlineEditsActions,\n                title: nls.localize('inlineEditsActions', \"Accept Inline Edit\"),\n                group: 'primary',\n                order: 1,\n                icon: Codicon.check,\n            },\n            kbOpts: {\n                primary: 2048 /* KeyMod.CtrlCmd */ | 10 /* KeyCode.Space */,\n                weight: 20000,\n                kbExpr: inlineEditVisible,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        if (editor instanceof EmbeddedCodeEditorWidget) {\n            editor = editor.getParentEditor();\n        }\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.accept(controller.editor);\n            controller.editor.focus();\n        }\n    }\n}\n/*\nTODO@hediet\nexport class PinInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.pin',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.pin', \"Pin Inline Edit\")),\n            precondition: undefined,\n            kbOpts: {\n                primary: KeyMod.Shift | KeyCode.Space,\n                weight: 20000,\n            }\n        });\n    }\n\n    public async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.togglePin();\n        }\n    }\n}\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.pin',\n        title: nls.localize('Pin', \"Pin\"),\n        icon: Codicon.pin,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey.negate(),\n});\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.unpin',\n        title: nls.localize('Unpin', \"Unpin\"),\n        icon: Codicon.pinned,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey,\n});*/\nexport class HideInlineEdit extends EditorAction {\n    static { this.ID = 'editor.action.inlineEdits.hide'; }\n    constructor() {\n        super({\n            id: HideInlineEdit.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.hide', \"Hide Inline Edit\")),\n            precondition: inlineEditVisible,\n            kbOpts: {\n                weight: 100,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        transaction(tx => {\n            controller?.model.get()?.stop(tx);\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}