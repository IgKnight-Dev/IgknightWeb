{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { environment } from '../../../../environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/apiservice\";\nexport let OtpApiService = /*#__PURE__*/(() => {\n  class OtpApiService {\n    apiService;\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    baseUrl = environment.loginApiUrl;\n    // Send OTP to user\n    sendEmailOtp(data) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.apiService.post(_this.baseUrl, 'otp/send/email', data);\n      })();\n    }\n    // Verify OTP entered by the user\n    verifyOtp(userId, recipient, recipientType, otpCode) {\n      let params = new HttpParams();\n      if (userId !== null) {\n        params = params.set('userId', userId);\n      }\n      params = params.set('recipient', recipient).set('recipientType', recipientType.toString()).set('otpCode', otpCode);\n      return this.apiService.post(this.baseUrl, 'otp/verify', {}, params);\n    }\n    // Option 2: Return Promise by converting observable to promise\n    getCaptcha() {\n      return this.apiService.get(this.baseUrl, 'captcha');\n    }\n    static ɵfac = function OtpApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || OtpApiService)(i0.ɵɵinject(i1.ApiService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OtpApiService,\n      factory: OtpApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OtpApiService;\n})();","map":{"version":3,"names":["HttpParams","environment","OtpApiService","apiService","constructor","baseUrl","loginApiUrl","sendEmailOtp","data","_this","_asyncToGenerator","post","verifyOtp","userId","recipient","recipientType","otpCode","params","set","toString","getCaptcha","get","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\auth\\services\\otp-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ApiService } from '../../../core/services/apiservice';\r\nimport { OtpRequest } from '../../../models/OtpRequest';\r\nimport { SendEmailOtpRequest } from '../../../models/SendEmailOtpRequest';\r\nimport { CaptchaResponse } from '../../../models/CaptchaResponse ';\r\nimport { RecipientType } from '../../../models/Enums';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { firstValueFrom, Observable } from 'rxjs';\r\nimport { environment } from '../../../../environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OtpApiService {\r\n  constructor(private apiService: ApiService) {}\r\n  private baseUrl = environment.loginApiUrl;\r\n\r\n\r\n  // Send OTP to user\r\n  async sendEmailOtp(data: SendEmailOtpRequest): Promise<void> {\r\n    await this.apiService.post(this.baseUrl, 'otp/send/email', data);\r\n  }\r\n\r\n  // Verify OTP entered by the user\r\n  verifyOtp(userId: string | null, recipient: string, recipientType: RecipientType, otpCode: string ): Promise<any> {\r\n      let params = new HttpParams();\r\n      if (userId !== null) \r\n      {\r\n        params = params.set('userId', userId);\r\n      }\r\n      params = params\r\n        .set('recipient', recipient)\r\n        .set('recipientType', recipientType.toString())\r\n        .set('otpCode', otpCode);\r\n\r\n    return this.apiService.post(this.baseUrl, 'otp/verify', {}, params);\r\n  }\r\n\r\n\r\n  // Option 2: Return Promise by converting observable to promise\r\n  getCaptcha(): Promise<CaptchaResponse> {\r\n      return this.apiService.get<CaptchaResponse>(this.baseUrl, 'captcha');\r\n  }\r\n}\r\n"],"mappings":";AAMA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,WAAW,QAAQ,yBAAyB;;;AAGrD,WAAaC,aAAa;EAApB,MAAOA,aAAa;IACJC,UAAA;IAApBC,YAAoBD,UAAsB;MAAtB,KAAAA,UAAU,GAAVA,UAAU;IAAe;IACrCE,OAAO,GAAGJ,WAAW,CAACK,WAAW;IAGzC;IACMC,YAAYA,CAACC,IAAyB;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA;QAC1C,MAAMD,KAAI,CAACN,UAAU,CAACQ,IAAI,CAACF,KAAI,CAACJ,OAAO,EAAE,gBAAgB,EAAEG,IAAI,CAAC;MAAC;IACnE;IAEA;IACAI,SAASA,CAACC,MAAqB,EAAEC,SAAiB,EAAEC,aAA4B,EAAEC,OAAe;MAC7F,IAAIC,MAAM,GAAG,IAAIjB,UAAU,EAAE;MAC7B,IAAIa,MAAM,KAAK,IAAI,EACnB;QACEI,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEL,MAAM,CAAC;MACvC;MACAI,MAAM,GAAGA,MAAM,CACZC,GAAG,CAAC,WAAW,EAAEJ,SAAS,CAAC,CAC3BI,GAAG,CAAC,eAAe,EAAEH,aAAa,CAACI,QAAQ,EAAE,CAAC,CAC9CD,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;MAE5B,OAAO,IAAI,CAACb,UAAU,CAACQ,IAAI,CAAC,IAAI,CAACN,OAAO,EAAE,YAAY,EAAE,EAAE,EAAEY,MAAM,CAAC;IACrE;IAGA;IACAG,UAAUA,CAAA;MACN,OAAO,IAAI,CAACjB,UAAU,CAACkB,GAAG,CAAkB,IAAI,CAAChB,OAAO,EAAE,SAAS,CAAC;IACxE;;uCA7BWH,aAAa,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAbvB,aAAa;MAAAwB,OAAA,EAAbxB,aAAa,CAAAyB,IAAA;MAAAC,UAAA,EADA;IAAM;;SACnB1B,aAAa;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}