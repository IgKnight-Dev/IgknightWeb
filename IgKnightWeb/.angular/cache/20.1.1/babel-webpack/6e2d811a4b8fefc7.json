{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n  // Intentionally using the `ModesRegistry` here to avoid\n  // instantiating services too quickly in the standalone editor.\n  ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n  let result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId, callback) {\n  return StandaloneServices.withServices(() => {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const disposable = languageService.onDidRequestRichLanguageFeatures(encounteredLanguageId => {\n      if (encounteredLanguageId === languageId) {\n        // stop listening\n        disposable.dispose();\n        // invoke actual listener\n        callback();\n      }\n    });\n    return disposable;\n  });\n}\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId, callback) {\n  return StandaloneServices.withServices(() => {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const disposable = languageService.onDidRequestBasicLanguageFeatures(encounteredLanguageId => {\n      if (encounteredLanguageId === languageId) {\n        // stop listening\n        disposable.dispose();\n        // invoke actual listener\n        callback();\n      }\n    });\n    return disposable;\n  });\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n  }\n  const languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n  return languageConfigurationService.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n  constructor(languageId, actual) {\n    this._languageId = languageId;\n    this._actual = actual;\n  }\n  dispose() {\n    // NOOP\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  tokenize(line, hasEOL, state) {\n    if (typeof this._actual.tokenize === 'function') {\n      return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    throw new Error('Not supported!');\n  }\n  tokenizeEncoded(line, hasEOL, state) {\n    const result = this._actual.tokenizeEncoded(line, state);\n    return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n  }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n  constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n    this._languageId = _languageId;\n    this._actual = _actual;\n    this._languageService = _languageService;\n    this._standaloneThemeService = _standaloneThemeService;\n  }\n  dispose() {\n    // NOOP\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  static _toClassicTokens(tokens, language) {\n    const result = [];\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[i] = new languages.Token(startIndex, t.scopes, language);\n      previousStartIndex = startIndex;\n    }\n    return result;\n  }\n  static adaptTokenize(language, actual, line, state) {\n    const actualResult = actual.tokenize(line, state);\n    const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new languages.TokenizationResult(tokens, endState);\n  }\n  tokenize(line, hasEOL, state) {\n    return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n  }\n  _toBinaryTokens(languageIdCodec, tokens) {\n    const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n    const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n    const result = [];\n    let resultLen = 0;\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      const metadata = tokenTheme.match(languageId, t.scopes) | 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */;\n      if (resultLen > 0 && result[resultLen - 1] === metadata) {\n        // same metadata\n        continue;\n      }\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[resultLen++] = startIndex;\n      result[resultLen++] = metadata;\n      previousStartIndex = startIndex;\n    }\n    const actualResult = new Uint32Array(resultLen);\n    for (let i = 0; i < resultLen; i++) {\n      actualResult[i] = result[i];\n    }\n    return actualResult;\n  }\n  tokenizeEncoded(line, hasEOL, state) {\n    const actualResult = this._actual.tokenize(line, state);\n    const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new languages.EncodedTokenizationResult(tokens, endState);\n  }\n}\nfunction isATokensProvider(provider) {\n  return typeof provider.getInitialState === 'function';\n}\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  if (colorMap) {\n    const result = [null];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n    standaloneThemeService.setColorMapOverride(result);\n  } else {\n    standaloneThemeService.setColorMapOverride(null);\n  }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n  if (isEncodedTokensProvider(provider)) {\n    return new EncodedTokenizationSupportAdapter(languageId, provider);\n  } else {\n    return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n  }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n  const adaptedFactory = new languages.LazyTokenizationSupport(/*#__PURE__*/_asyncToGenerator(function* () {\n    const result = yield Promise.resolve(factory.create());\n    if (!result) {\n      return null;\n    }\n    if (isATokensProvider(result)) {\n      return createTokenizationSupportAdapter(languageId, result);\n    }\n    return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n  }));\n  return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n  }\n  if (isThenable(provider)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => provider\n    });\n  }\n  return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  const create = languageDef => {\n    return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n  };\n  if (isThenable(languageDef)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => languageDef\n    });\n  }\n  return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.hoverProvider.register(languageSelector, {\n    provideHover: function () {\n      var _ref2 = _asyncToGenerator(function* (model, position, token, context) {\n        const word = model.getWordAtPosition(position);\n        return Promise.resolve(provider.provideHover(model, position, token, context)).then(value => {\n          if (!value) {\n            return undefined;\n          }\n          if (!value.range && word) {\n            value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n          }\n          if (!value.range) {\n            value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n          }\n          return value;\n        });\n      });\n      return function provideHover(_x, _x2, _x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector, provider, metadata) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.codeActionProvider.register(languageSelector, {\n    providedCodeActionKinds: metadata?.providedCodeActionKinds,\n    documentation: metadata?.documentation,\n    provideCodeActions: (model, range, context, token) => {\n      const markerService = StandaloneServices.get(IMarkerService);\n      const markers = markerService.read({\n        resource: model.uri\n      }).filter(m => {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers,\n        only: context.only,\n        trigger: context.trigger\n      }, token);\n    },\n    resolveCodeAction: provider.resolveCodeAction\n  });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\nexport function registerInlineEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.inlineEditProvider.register(languageSelector, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    onLanguageEncountered: onLanguageEncountered,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    registerTokensProviderFactory: registerTokensProviderFactory,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerNewSymbolNameProvider: registerNewSymbolNameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n    registerInlineEditProvider: registerInlineEditProvider,\n    registerInlayHintsProvider: registerInlayHintsProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    InlayHintKind: standaloneEnums.InlayHintKind,\n    InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n    InlineEditTriggerKind: standaloneEnums.InlineEditTriggerKind,\n    CodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n    NewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n    NewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n    PartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n    HoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n    // classes\n    FoldingRangeKind: languages.FoldingRangeKind,\n    SelectedSuggestionInfo: languages.SelectedSuggestionInfo\n  };\n}","map":{"version":3,"names":["Color","Range","languages","ILanguageService","ILanguageConfigurationService","ModesRegistry","ILanguageFeaturesService","standaloneEnums","StandaloneServices","compile","MonarchTokenizer","IStandaloneThemeService","IConfigurationService","IMarkerService","register","language","registerLanguage","getLanguages","result","concat","getEncodedLanguageId","languageId","languageService","get","languageIdCodec","encodeLanguageId","onLanguage","callback","withServices","disposable","onDidRequestRichLanguageFeatures","encounteredLanguageId","dispose","onLanguageEncountered","onDidRequestBasicLanguageFeatures","setLanguageConfiguration","configuration","isRegisteredLanguageId","Error","languageConfigurationService","EncodedTokenizationSupportAdapter","constructor","actual","_languageId","_actual","getInitialState","tokenize","line","hasEOL","state","TokenizationSupportAdapter","adaptTokenize","tokenizeEncoded","EncodedTokenizationResult","tokens","endState","_languageService","_standaloneThemeService","_toClassicTokens","previousStartIndex","i","len","length","t","startIndex","Token","scopes","actualResult","equals","TokenizationResult","_toBinaryTokens","tokenTheme","getColorTheme","resultLen","metadata","match","Uint32Array","isATokensProvider","provider","isEncodedTokensProvider","isThenable","obj","then","setColorMap","colorMap","standaloneThemeService","fromHex","setColorMapOverride","createTokenizationSupportAdapter","registerTokensProviderFactory","factory","adaptedFactory","LazyTokenizationSupport","_asyncToGenerator","Promise","resolve","create","TokenizationRegistry","registerFactory","setTokensProvider","setMonarchTokensProvider","languageDef","registerReferenceProvider","languageSelector","languageFeaturesService","referenceProvider","registerRenameProvider","renameProvider","registerNewSymbolNameProvider","newSymbolNamesProvider","registerSignatureHelpProvider","signatureHelpProvider","registerHoverProvider","hoverProvider","provideHover","_ref2","model","position","token","context","word","getWordAtPosition","value","undefined","range","lineNumber","startColumn","endColumn","column","_x","_x2","_x3","_x4","apply","arguments","registerDocumentSymbolProvider","documentSymbolProvider","registerDocumentHighlightProvider","documentHighlightProvider","registerLinkedEditingRangeProvider","linkedEditingRangeProvider","registerDefinitionProvider","definitionProvider","registerImplementationProvider","implementationProvider","registerTypeDefinitionProvider","typeDefinitionProvider","registerCodeLensProvider","codeLensProvider","registerCodeActionProvider","codeActionProvider","providedCodeActionKinds","documentation","provideCodeActions","markerService","markers","read","resource","uri","filter","m","areIntersectingOrTouching","only","trigger","resolveCodeAction","registerDocumentFormattingEditProvider","documentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","documentRangeFormattingEditProvider","registerOnTypeFormattingEditProvider","onTypeFormattingEditProvider","registerLinkProvider","linkProvider","registerCompletionItemProvider","completionProvider","registerColorProvider","colorProvider","registerFoldingRangeProvider","foldingRangeProvider","registerDeclarationProvider","declarationProvider","registerSelectionRangeProvider","selectionRangeProvider","registerDocumentSemanticTokensProvider","documentSemanticTokensProvider","registerDocumentRangeSemanticTokensProvider","documentRangeSemanticTokensProvider","registerInlineCompletionsProvider","inlineCompletionsProvider","registerInlineEditProvider","inlineEditProvider","registerInlayHintsProvider","inlayHintsProvider","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","InlayHintKind","InlineCompletionTriggerKind","InlineEditTriggerKind","CodeActionTriggerType","NewSymbolNameTag","NewSymbolNameTriggerKind","PartialAcceptTriggerKind","HoverVerbosityAction","FoldingRangeKind","SelectedSuggestionInfo"],"sources":["C:/Users/abhis/OneDrive/Desktop/IgKnightWeb/IgKnightWeb/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n    // Intentionally using the `ModesRegistry` here to avoid\n    // instantiating services too quickly in the standalone editor.\n    ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n    let result = [];\n    result = result.concat(ModesRegistry.getLanguages());\n    return result;\n}\nexport function getEncodedLanguageId(languageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId, callback) {\n    return StandaloneServices.withServices(() => {\n        const languageService = StandaloneServices.get(ILanguageService);\n        const disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n            if (encounteredLanguageId === languageId) {\n                // stop listening\n                disposable.dispose();\n                // invoke actual listener\n                callback();\n            }\n        });\n        return disposable;\n    });\n}\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId, callback) {\n    return StandaloneServices.withServices(() => {\n        const languageService = StandaloneServices.get(ILanguageService);\n        const disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n            if (encounteredLanguageId === languageId) {\n                // stop listening\n                disposable.dispose();\n                // invoke actual listener\n                callback();\n            }\n        });\n        return disposable;\n    });\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n    }\n    const languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n    return languageConfigurationService.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n    constructor(languageId, actual) {\n        this._languageId = languageId;\n        this._actual = actual;\n    }\n    dispose() {\n        // NOOP\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state) {\n        if (typeof this._actual.tokenize === 'function') {\n            return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n        }\n        throw new Error('Not supported!');\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const result = this._actual.tokenizeEncoded(line, state);\n        return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n    constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n        this._languageId = _languageId;\n        this._actual = _actual;\n        this._languageService = _languageService;\n        this._standaloneThemeService = _standaloneThemeService;\n    }\n    dispose() {\n        // NOOP\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    static _toClassicTokens(tokens, language) {\n        const result = [];\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[i] = new languages.Token(startIndex, t.scopes, language);\n            previousStartIndex = startIndex;\n        }\n        return result;\n    }\n    static adaptTokenize(language, actual, line, state) {\n        const actualResult = actual.tokenize(line, state);\n        const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.TokenizationResult(tokens, endState);\n    }\n    tokenize(line, hasEOL, state) {\n        return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    _toBinaryTokens(languageIdCodec, tokens) {\n        const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n        const result = [];\n        let resultLen = 0;\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            const metadata = tokenTheme.match(languageId, t.scopes) | 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */;\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\n                // same metadata\n                continue;\n            }\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[resultLen++] = startIndex;\n            result[resultLen++] = metadata;\n            previousStartIndex = startIndex;\n        }\n        const actualResult = new Uint32Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            actualResult[i] = result[i];\n        }\n        return actualResult;\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const actualResult = this._actual.tokenize(line, state);\n        const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.EncodedTokenizationResult(tokens, endState);\n    }\n}\nfunction isATokensProvider(provider) {\n    return (typeof provider.getInitialState === 'function');\n}\nfunction isEncodedTokensProvider(provider) {\n    return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n    return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    if (colorMap) {\n        const result = [null];\n        for (let i = 1, len = colorMap.length; i < len; i++) {\n            result[i] = Color.fromHex(colorMap[i]);\n        }\n        standaloneThemeService.setColorMapOverride(result);\n    }\n    else {\n        standaloneThemeService.setColorMapOverride(null);\n    }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n    if (isEncodedTokensProvider(provider)) {\n        return new EncodedTokenizationSupportAdapter(languageId, provider);\n    }\n    else {\n        return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n    }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n    const adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n        const result = await Promise.resolve(factory.create());\n        if (!result) {\n            return null;\n        }\n        if (isATokensProvider(result)) {\n            return createTokenizationSupportAdapter(languageId, result);\n        }\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n    });\n    return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n    }\n    if (isThenable(provider)) {\n        return registerTokensProviderFactory(languageId, { create: () => provider });\n    }\n    return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n    const create = (languageDef) => {\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n    };\n    if (isThenable(languageDef)) {\n        return registerTokensProviderFactory(languageId, { create: () => languageDef });\n    }\n    return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.hoverProvider.register(languageSelector, {\n        provideHover: async (model, position, token, context) => {\n            const word = model.getWordAtPosition(position);\n            return Promise.resolve(provider.provideHover(model, position, token, context)).then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                if (!value.range && word) {\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                }\n                if (!value.range) {\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n                }\n                return value;\n            });\n        }\n    });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector, provider, metadata) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeActionProvider.register(languageSelector, {\n        providedCodeActionKinds: metadata?.providedCodeActionKinds,\n        documentation: metadata?.documentation,\n        provideCodeActions: (model, range, context, token) => {\n            const markerService = StandaloneServices.get(IMarkerService);\n            const markers = markerService.read({ resource: model.uri }).filter(m => {\n                return Range.areIntersectingOrTouching(m, range);\n            });\n            return provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n        },\n        resolveCodeAction: provider.resolveCodeAction\n    });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\nexport function registerInlineEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlineEditProvider.register(languageSelector, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n    return {\n        register: register,\n        getLanguages: getLanguages,\n        onLanguage: onLanguage,\n        onLanguageEncountered: onLanguageEncountered,\n        getEncodedLanguageId: getEncodedLanguageId,\n        // provider methods\n        setLanguageConfiguration: setLanguageConfiguration,\n        setColorMap: setColorMap,\n        registerTokensProviderFactory: registerTokensProviderFactory,\n        setTokensProvider: setTokensProvider,\n        setMonarchTokensProvider: setMonarchTokensProvider,\n        registerReferenceProvider: registerReferenceProvider,\n        registerRenameProvider: registerRenameProvider,\n        registerNewSymbolNameProvider: registerNewSymbolNameProvider,\n        registerCompletionItemProvider: registerCompletionItemProvider,\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\n        registerHoverProvider: registerHoverProvider,\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n        registerDefinitionProvider: registerDefinitionProvider,\n        registerImplementationProvider: registerImplementationProvider,\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n        registerCodeLensProvider: registerCodeLensProvider,\n        registerCodeActionProvider: registerCodeActionProvider,\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n        registerLinkProvider: registerLinkProvider,\n        registerColorProvider: registerColorProvider,\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\n        registerDeclarationProvider: registerDeclarationProvider,\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n        registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n        registerInlineEditProvider: registerInlineEditProvider,\n        registerInlayHintsProvider: registerInlayHintsProvider,\n        // enums\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n        SymbolKind: standaloneEnums.SymbolKind,\n        SymbolTag: standaloneEnums.SymbolTag,\n        IndentAction: standaloneEnums.IndentAction,\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n        InlayHintKind: standaloneEnums.InlayHintKind,\n        InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n        InlineEditTriggerKind: standaloneEnums.InlineEditTriggerKind,\n        CodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n        NewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n        NewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n        PartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n        HoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n        // classes\n        FoldingRangeKind: languages.FoldingRangeKind,\n        SelectedSuggestionInfo: languages.SelectedSuggestionInfo,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}