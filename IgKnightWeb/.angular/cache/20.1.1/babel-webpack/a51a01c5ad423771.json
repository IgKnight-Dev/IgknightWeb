{"ast":null,"code":"export const JavaScriptTopics = [{\n  id: 'js-introduction',\n  title: 'Introduction to JavaScript',\n  slug: 'js-introduction'\n}, {\n  id: 'js-variables-datatypes',\n  title: 'Variables & Data Types',\n  slug: 'js-variables-datatypes'\n}, {\n  id: 'js-operators',\n  title: 'JavaScript Operators',\n  slug: 'js-operators'\n}, {\n  id: 'js-conditions',\n  title: 'Conditional Statements (if, else, switch)',\n  slug: 'js-conditions'\n}, {\n  id: 'js-loops',\n  title: 'Loops Made Simple',\n  slug: 'js-loops'\n}, {\n  id: 'js-functions',\n  title: 'Functions Explained Like Pizza Orders',\n  slug: 'js-functions'\n}, {\n  id: 'js-arrays',\n  title: 'Arrays & Everyday Lists',\n  slug: 'js-arrays'\n}, {\n  id: 'js-objects',\n  title: 'Objects — Your Data’s Backpack',\n  slug: 'js-objects'\n}, {\n  id: 'js-dom-basics',\n  title: 'DOM Manipulation Basics',\n  slug: 'js-dom-basics'\n}, {\n  id: 'js-events',\n  title: 'Handling Events (Clicks, Keys, etc.)',\n  slug: 'js-events'\n}, {\n  id: 'js-es6',\n  title: 'Modern JavaScript (ES6+)',\n  slug: 'js-es6'\n}, {\n  id: 'js-array-methods',\n  title: 'Smart Array Methods (map, filter, reduce)',\n  slug: 'js-array-methods'\n}, {\n  id: 'js-async',\n  title: 'Async JS: Callbacks, Promises & async/await',\n  slug: 'js-async'\n}, {\n  id: 'js-fetch-api',\n  title: 'Fetching Data with Fetch API',\n  slug: 'js-fetch-api'\n}, {\n  id: 'js-browser-storage',\n  title: 'Browser Storage (localStorage, sessionStorage)',\n  slug: 'js-browser-storage'\n}, {\n  id: 'js-projects',\n  title: 'Mini Projects to Practice',\n  slug: 'js-projects'\n}];\nexport function JavaScriptTopicContent(slug) {\n  switch (slug) {\n    case 'js-introduction':\n      return {\n        slug: 'js-introduction',\n        title: 'Introduction to JavaScript',\n        content: `\n      <p>JavaScript is what makes websites feel alive. While <strong>HTML</strong> builds the structure (like bones 🦴) and <strong>CSS</strong> styles it (like skin 💅), <strong>JavaScript</strong> is the <span class=\"font-semibold text-green-400\">brain and muscles</span> 🧠💪 — it lets websites move, react, and respond.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Real-Life Analogy</h3>\n      <p>Imagine a vending machine:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>HTML:</strong> The physical machine — buttons, slots, and lights</li>\n        <li><strong>CSS:</strong> The design — colors, branding, labels</li>\n        <li><strong>JavaScript:</strong> The brain that listens to button presses, dispenses snacks, and shows the price</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Why Learn JavaScript?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>To make your websites interactive — think sliders, popups, animations, and games</li>\n        <li>To build full apps — from simple calculators to full-stack sites</li>\n        <li>To work with real-time data, user input, and browser storage</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔍 What Can You Build with It?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Todo Apps, Weather Apps, Games</li>\n        <li>Interactive forms and validations</li>\n        <li>Single Page Applications (like this platform!)</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 The Mindset Shift</h3>\n      <p>You’re not just writing code — you’re teaching the browser <em>how to think</em> and <em>what to do</em> when something happens.</p>\n    `,\n        proTip: 'JS is everywhere — from browsers to servers to mobile apps. Learn once, use anywhere!',\n        codeSamples: [{\n          language: 'html',\n          code: `\n<!-- HTML + JavaScript in action -->\n<button onclick=\"alert('Hello from JavaScript!')\">Click Me</button>`\n        }, {\n          language: 'js',\n          code: `\n// Same using JavaScript directly\ndocument.querySelector('button').addEventListener('click', () => {\n  alert('Hello from JS again!');\n});`\n        }]\n      };\n    case 'js-variables-datatypes':\n      return {\n        slug: 'js-variables-datatypes',\n        title: 'Variables & Data Types',\n        content: `\n      <p>In JavaScript, <strong>variables</strong> are like containers 🧺 — they hold stuff. That “stuff” could be text, numbers, lists, or even entire functions!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🥤 Real-Life Analogy</h3>\n      <p>Think of variables as labeled jars in your kitchen. One might hold sugar, another rice, and another cookies. You give them names so you know what's inside.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Declaring Variables</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>let</code> — you can change the value later</li>\n        <li><code>const</code> — value stays constant (can’t reassign)</li>\n        <li><code>var</code> — old-school, mostly avoided now</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\">\n<code>let name = \"IgKnight\";\nconst pi = 3.14;\nvar oldWay = true;</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📊 Types of Data</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>String:</strong> Text like <code>\"hello\"</code></li>\n        <li><strong>Number:</strong> 5, 3.14, -20</li>\n        <li><strong>Boolean:</strong> <code>true</code> or <code>false</code></li>\n        <li><strong>Array:</strong> A list: <code>[1, 2, 3]</code></li>\n        <li><strong>Object:</strong> A group of key-value pairs: <code>{ name: \"IgKnight\", age: 2 }</code></li>\n        <li><strong>Null:</strong> An intentional “nothing”</li>\n        <li><strong>Undefined:</strong> Something hasn’t been given a value yet</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why It Matters</h3>\n      <p>You’ll store user inputs, API data, scores, settings — <em>everything</em> — in variables. Understanding how to create and use them is the foundation of all JS magic.</p>\n    `,\n        proTip: 'Use <code>console.log()</code> to print your variables and check what they hold — it’s your best friend while debugging!',\n        codeSamples: [{\n          language: 'js',\n          code: `let username = \"Abhinash\";\nconst isLoggedIn = true;\nlet scores = [85, 90, 78];\nlet user = { name: \"Abhinash\", role: \"Learner\" };`\n        }]\n      };\n    case 'js-operators':\n      return {\n        slug: 'js-operators',\n        title: 'JavaScript Operators',\n        content: `\n      <p>Operators in JavaScript are like tools in your toolkit 🔧 — you use them to do things like math, comparisons, or combining values.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 Arithmetic Operators</h3>\n      <p>These are the math guys. You’ve seen them before:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>+</code> : Add</li>\n        <li><code>-</code> : Subtract</li>\n        <li><code>*</code> : Multiply</li>\n        <li><code>/</code> : Divide</li>\n        <li><code>%</code> : Remainder</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📏 Comparison Operators</h3>\n      <p>Used to compare values and return <code>true</code> or <code>false</code>:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>==</code> : Equal (loose)</li>\n        <li><code>===</code> : Equal (strict, checks type too)</li>\n        <li><code>!=</code> : Not equal</li>\n        <li><code>&gt;</code> , <code>&lt;</code> : Greater than / Less than</li>\n        <li><code>&gt;=</code> , <code>&lt;=</code> : Greater or equal / Less or equal</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Logical Operators</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>&&</code> : AND — both must be true</li>\n        <li><code>||</code> : OR — at least one must be true</li>\n        <li><code>!</code> : NOT — reverses a value</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">➕ String Concatenation</h3>\n      <p>Combine strings using <code>+</code>:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet greeting = \"Hello\" + \" \" + \"IgKnight!\";</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Tip</h3>\n      <p>If you're checking if a user is logged in AND has access, you'd write something like: <code>if (isLoggedIn && hasPermission)</code></p>\n    `,\n        proTip: 'Always prefer <code>===</code> over <code>==</code> for cleaner, safer comparisons!',\n        codeSamples: [{\n          language: 'js',\n          code: `let age = 18;\nlet isAdult = age >= 18;\n\nlet a = 10;\nlet b = 5;\nlet sum = a + b;\n\nlet isLoggedIn = true;\nlet hasAccess = false;\n\nconsole.log(isLoggedIn && hasAccess); // false`\n        }]\n      };\n    case 'js-conditions':\n      return {\n        slug: 'js-conditions',\n        title: 'Conditional Statements (if, else, switch)',\n        content: `\n      <p>Imagine you're making choices in life — \"If it's raining, take an umbrella. Else, go without it.\" JavaScript lets you make similar decisions in code. 🌧️☂️</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔀 The <code>if</code> Statement</h3>\n      <p>This checks a condition, and if it's true, runs some code:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet age = 18;\n\nif (age >= 18) {\n  console.log(\"You're an adult!\");\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚪 <code>if...else</code> — One Way or the Other</h3>\n      <p>What if the condition is false? Use <code>else</code> to handle that:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet isLoggedIn = false;\n\nif (isLoggedIn) {\n  console.log(\"Welcome back!\");\n} else {\n  console.log(\"Please log in.\");\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 <code>else if</code> — Multiple Conditions</h3>\n      <p>You can check more than one condition with <code>else if</code>:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet score = 75;\n\nif (score >= 90) {\n  console.log(\"A grade\");\n} else if (score >= 75) {\n  console.log(\"B grade\");\n} else {\n  console.log(\"Keep trying!\");\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\n      <p>It's like a flowchart — check the first condition, then the next, and so on. Once a match is found, the rest are skipped.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 <code>switch</code> Statement — When You Have Many Options</h3>\n      <p>Instead of using many <code>else if</code> statements, you can use a <code>switch</code>:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet day = \"Monday\";\n\nswitch (day) {\n  case \"Monday\":\n    console.log(\"Ugh, it's Monday again.\");\n    break;\n  case \"Friday\":\n    console.log(\"Weekend is near!\");\n    break;\n  default:\n    console.log(\"Just another day...\");\n}</code></pre>\n    `,\n        proTip: 'Always use <code>break</code> in a <code>switch</code> case to stop execution after a match!',\n        codeSamples: [{\n          language: 'js',\n          code: `let userRole = \"admin\";\n\nif (userRole === \"admin\") {\n  console.log(\"You can manage everything.\");\n} else if (userRole === \"editor\") {\n  console.log(\"You can edit content.\");\n} else {\n  console.log(\"You can view content.\");\n}`\n        }]\n      };\n    case 'js-loops':\n      return {\n        slug: 'js-loops',\n        title: 'Loops (for, while, do-while)',\n        content: `\n      <p>Loops are like repeating chores — \"Do this 5 times\" or \"Keep doing this until the work is done.\" In JavaScript, loops help you repeat tasks efficiently. 🔁</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 The <code>for</code> Loop</h3>\n      <p>Use this when you know how many times to repeat:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nfor (let i = 1; i <= 5; i++) {\n  console.log(\"Count:\", i);\n}</code></pre>\n      <p>This prints numbers from 1 to 5. Think of it like: Start at 1 → check if it's ≤ 5 → run → increment → repeat.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 The <code>while</code> Loop</h3>\n      <p>Use this when you don't know how many times it should run:</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet x = 1;\n\nwhile (x <= 3) {\n  console.log(\"x is\", x);\n  x++;\n}</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚠️ The <code>do...while</code> Loop</h3>\n      <p>This runs the code once before checking the condition (useful for menus, prompts):</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet y = 5;\n\ndo {\n  console.log(\"Value:\", y);\n  y++;\n} while (y < 5);</code></pre>\n      <p>Even though the condition is false from the start, it runs at least once!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠 Real-World Analogy</h3>\n      <p>For loop is like a checklist: you know you have 5 tasks. While loop is like checking your inbox: keep going until it's empty.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Loop Gotchas</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Make sure your loop condition eventually becomes false, or it’ll loop forever! 🔄♾️</li>\n        <li>Use <code>break</code> to stop a loop early, and <code>continue</code> to skip to the next iteration.</li>\n      </ul>\n    `,\n        proTip: 'Avoid infinite loops! Make sure your counter or condition will eventually stop.',\n        codeSamples: [{\n          language: 'js',\n          code: `const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(\"Fruit:\", fruits[i]);\n}`\n        }]\n      };\n    case 'js-functions':\n      return {\n        slug: 'js-functions',\n        title: 'Functions in JavaScript',\n        content: `\n      <p>Think of functions like recipes 📜 — they let you define a set of instructions once and use them anywhere, anytime, without repeating yourself!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🍳 What is a Function?</h3>\n      <p>A function is a reusable block of code that does something. You define it once, and call it wherever you need it.</p>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"IgKnight\");</code></pre>\n\n      <p>This will print: <code>Hello, IgKnight!</code></p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why Use Functions?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Avoid repeating code (DRY: Don’t Repeat Yourself)</li>\n        <li>Keep code organized and easier to read</li>\n        <li>Break down big tasks into smaller steps</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Function Parameters & Return Values</h3>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nfunction add(a, b) {\n  return a + b;\n}\n\nlet result = add(5, 3); // result = 8</code></pre>\n\n      <p><code>return</code> sends the result back to where the function was called.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Function vs Console.log</h3>\n      <p><code>console.log()</code> is like saying it out loud. <code>return</code> is like handing back the result silently for future use.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Arrow Functions (Modern & Short)</h3>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nconst square = (n) => n * n;\n\nconsole.log(square(4)); // 16</code></pre>\n\n      <p>Arrow functions are shorter and great for simple logic.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\n      <p>A function is like a coffee machine ☕. You give it an input (beans), and it gives you a result (coffee). You don't care how it works inside — you just press the button!</p>\n    `,\n        proTip: 'Name your functions clearly. It should describe what it does — like `calculateTotal()` or `formatDate()`.',\n        codeSamples: [{\n          language: 'js',\n          code: `function isEven(num) {\n  return num % 2 === 0;\n}\n\nconsole.log(isEven(4)); // true`\n        }]\n      };\n    case 'js-arrays':\n      return {\n        slug: 'js-arrays',\n        title: 'Arrays in JavaScript',\n        content: `\n      <p>Imagine a box 📦 that can hold multiple items — that’s an array. It's used to store a list of values in a single variable.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 What is an Array?</h3>\n      <p>An array is a special variable that holds a collection of items — like numbers, strings, or even other arrays!</p>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(fruits[0]); // \"apple\"</code></pre>\n\n      <p>You access array items using their index — starting from 0.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📋 Common Array Methods</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>push()</code> — Add item to the end</li>\n        <li><code>pop()</code> — Remove last item</li>\n        <li><code>shift()</code> — Remove first item</li>\n        <li><code>unshift()</code> — Add item to the beginning</li>\n        <li><code>length</code> — Get total number of items</li>\n        <li><code>includes()</code> — Check if it contains an item</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet tasks = [\"code\", \"eat\"];\ntasks.push(\"sleep\");\nconsole.log(tasks); // [\"code\", \"eat\", \"sleep\"]</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Loops + Arrays = Superpower</h3>\n      <p>You can loop through arrays using <code>for</code> or <code>forEach</code> to perform actions on each item:</p>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nlet scores = [80, 90, 100];\nscores.forEach(score => {\n  console.log(\"Score:\", score);\n});</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\n      <p>An array is like a row of mailboxes 📬. Each has a number (index), and you can store or retrieve items from each one.</p>\n    `,\n        proTip: 'Use plural names for arrays, like `tasks`, `users`, or `scores`. It keeps your code readable and meaningful.',\n        codeSamples: [{\n          language: 'js',\n          code: `const colors = [\"red\", \"green\", \"blue\"];\nconsole.log(colors.length);  // 3\ncolors.push(\"yellow\");\nconsole.log(colors);         // [\"red\", \"green\", \"blue\", \"yellow\"]`\n        }]\n      };\n    case 'js-objects':\n      return {\n        slug: 'js-objects',\n        title: 'Understanding Objects in JavaScript',\n        content: `\n      <p>Think of an object like a **real-world item** — a car, a person, or even a student. Each one has characteristics (properties) and things it can do (methods). That's what JavaScript objects are all about!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚗 A Car as an Object</h3>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nconst car = {\n  brand: \"Tesla\",\n  model: \"Model 3\",\n  color: \"red\",\n  start: function() {\n    console.log(\"Engine started\");\n  }\n};\n</code></pre>\n      <p>Here, <code>brand</code>, <code>model</code>, and <code>color</code> are **properties**, and <code>start()</code> is a **method** (function inside an object).</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Why Use Objects?</h3>\n      <p>Objects group related data and functionality together. It's super useful when you're dealing with complex things like users, posts, or settings.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔑 Accessing Object Data</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>object.property</code> — Dot notation</li>\n        <li><code>object[\"property\"]</code> — Bracket notation</li>\n      </ul>\n\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\nconsole.log(car.brand);      // \"Tesla\"\nconsole.log(car[\"color\"]);   // \"red\"\ncar.start();                 // \"Engine started\"\n</code></pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\n      <p>Imagine a student ID card 🪪. It holds info like name, age, and roll number — just like an object holding key-value pairs.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Bonus: Dynamic Properties</h3>\n      <p>You can even add or update object properties on the fly!</p>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\ncar.year = 2024;\ncar.color = \"blue\";\n</code></pre>\n    `,\n        proTip: 'Always think in terms of “key: value” when working with objects. If you can describe something in real life, you can model it with an object.',\n        codeSamples: [{\n          language: 'js',\n          code: `const user = {\n  name: \"Alex\",\n  email: \"alex@example.com\",\n  login: function() {\n    console.log(\"Logged in!\");\n  }\n};\n\nuser.login();  // \"Logged in!\"\nconsole.log(user.name);`\n        }]\n      };\n    case 'js-dom-basics':\n      return {\n        slug: 'js-dom-basics',\n        title: 'DOM Manipulation Basics',\n        content: `\n      <p>The DOM (Document Object Model) is like the \"live tree\" of your webpage. It’s how JavaScript sees and interacts with your HTML elements. Think of it as a LEGO structure — HTML builds the blocks, and JavaScript moves them around or changes them on the fly.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏠 DOM = Digital House</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>HTML Elements:</strong> These are the rooms and furniture (like <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;button&gt;</code>).</li>\n        <li><strong>JavaScript:</strong> This is the housekeeper — it can change the color of a wall (style), move a chair (element), or add/remove decorations (nodes).</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Common DOM Operations</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>document.getElementById()</code> — grab one element by ID</li>\n        <li><code>document.querySelector()</code> — grab the first match of a CSS selector</li>\n        <li><code>element.textContent</code> — change or read the text inside</li>\n        <li><code>element.style</code> — directly change CSS styles</li>\n        <li><code>element.classList.add()</code> — add a class to apply styles</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤹 Real-Life Example</h3>\n      <p>Imagine you have a light switch (button). When you click it, the light (a div) changes color. That’s DOM in action!</p>\n    `,\n        proTip: 'Use browser DevTools to inspect the DOM and experiment live by editing HTML and CSS!',\n        codeSamples: [{\n          language: 'html',\n          code: `\n<!-- HTML -->\n<p id=\"message\">Hello, IgKnight!</p>\n<button onclick=\"changeText()\">Click Me</button>`\n        }, {\n          language: 'javascript',\n          code: `\n// JavaScript\nfunction changeText() {\n  const msg = document.getElementById('message');\n  msg.textContent = \"You just clicked the button!\";\n}`\n        }]\n      };\n    case 'js-events':\n      return {\n        slug: 'js-events',\n        title: 'Handling Events (Clicks, Keys, etc.)',\n        content: `\n      <p>Events in JavaScript are like reactions — they’re how your webpage *responds* when a user interacts with it. Think of your website as a smart machine that listens and reacts. When you click a button, move your mouse, type something, or even scroll — JavaScript can \"hear\" it and respond!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>🛎️ <strong>Clicking a button</strong> is like ringing a bell — it triggers an action.</li>\n        <li>🎹 <strong>Typing</strong> is like playing a piano — each keypress can trigger a note (event).</li>\n        <li>🧽 <strong>Mouse movement</strong> is like your cursor cleaning the window — JS watches where it goes.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ How Events Work</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>addEventListener()</code> is how JavaScript listens for a specific event.</li>\n        <li>You specify the event type (like <code>'click'</code>, <code>'keydown'</code>, <code>'mouseover'</code>).</li>\n        <li>Then you give it a function — what to do when that event happens.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Common Events</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>click</code> — when you click an element</li>\n        <li><code>input</code> — when user types in a form field</li>\n        <li><code>mouseover</code> — when the mouse enters an element</li>\n        <li><code>keydown</code> — when a key is pressed</li>\n        <li><code>submit</code> — when a form is submitted</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Event Handler = Reaction Function</h3>\n      <p>You create a function to handle the event, and JavaScript runs it when that event occurs.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Event Delegation (Advanced Idea)</h3>\n      <p>Instead of attaching events to many items, attach it to a common parent and let the event bubble up. It's like listening at the hallway instead of putting a microphone in every room.</p>\n    `,\n        proTip: \"Use DevTools → Console → inspect element → Events tab to see what events are bound to any HTML element!\",\n        codeSamples: [{\n          language: 'html',\n          code: `\n<!-- HTML -->\n<button id=\"alertBtn\">Click Me</button>\n<input type=\"text\" id=\"nameInput\" placeholder=\"Type your name\" />`\n        }, {\n          language: 'javascript',\n          code: `\n// JavaScript\ndocument.getElementById(\"alertBtn\").addEventListener(\"click\", function () {\n  alert(\"Button clicked!\");\n});\n\ndocument.getElementById(\"nameInput\").addEventListener(\"input\", function (e) {\n  console.log(\"Typed:\", e.target.value);\n});`\n        }]\n      };\n    case 'js-es6':\n      return {\n        slug: 'js-es6',\n        title: 'Modern JavaScript (ES6+)',\n        content: `\n      <p>JavaScript got a major glow-up with ES6 (also called ECMAScript 2015) and newer versions. Think of it like upgrading from a basic scooter to a Tesla — smoother, faster, and packed with cool features.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Why Learn ES6+?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Cleaner syntax = less code, more power</li>\n        <li>Helps you write code like a pro (modern companies use it!)</li>\n        <li>Makes complex things easier — like functions, objects, and loops</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Key ES6+ Features (Explained Simply)</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong><code>let</code> & <code>const</code></strong> — Like giving variables clear rules: <code>const</code> = locked, <code>let</code> = flexible</li>\n        <li><strong>Arrow Functions</strong> — Short and sweet way to write functions: <code>(a, b) =&gt; a + b</code></li>\n        <li><strong>Template Literals</strong> — Write strings with variables easily using backticks: <code>\\`Hello, \\${name}!\\`</code></li>\n        <li><strong>Destructuring</strong> — Unpack values from arrays or objects like unboxing a gift</li>\n        <li><strong>Spread Operator</strong> — Combine or copy arrays/objects like magic: <code>...arr</code></li>\n        <li><strong>Default Parameters</strong> — Set default values in functions</li>\n        <li><strong>Modules</strong> — Use <code>import</code> and <code>export</code> to split your code into clean files</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">👀 Example: Traditional vs ES6</h3>\n      <p>Old style:</p>\n      <pre class=\"bg-black text-white p-2 rounded\">function greet(name) {\n  return \"Hello, \" + name;\n}</pre>\n      <p>Modern ES6 style:</p>\n      <pre class=\"bg-black text-white p-2 rounded\">const greet = (name) => \\`Hello, \\${name}\\`;</pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Bonus: Imports & Exports</h3>\n      <p>Now you can split your code into modules:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>export const name = 'IgKnight'</code></li>\n        <li><code>import { name } from './file.js'</code></li>\n      </ul>\n    `,\n        proTip: 'Most modern browsers and tools support ES6+, but use Babel if you want to support older ones.',\n        codeSamples: [{\n          language: 'javascript',\n          code: `// Arrow function + template string\nconst greet = (name) => \\`Hello, \\${name}!\\`;\n\nconsole.log(greet(\"Abhinash\")); // Hello, Abhinash!\n\n// Destructuring\nconst user = { username: \"IgKnight\", age: 25 };\nconst { username } = user;\n\nconsole.log(username); // IgKnight`\n        }]\n      };\n    case 'js-array-methods':\n      return {\n        slug: 'js-array-methods',\n        title: 'Smart Array Methods (map, filter, reduce)',\n        content: `\n      <p>Let’s level up your array skills! Arrays aren’t just boring lists — they become powerful when you use methods like <code>map</code>, <code>filter</code>, and <code>reduce</code>. These are your toolbox for transforming and working with data easily.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>map:</strong> Like a chef preparing each item in a list of ingredients — gives back a new list.</li>\n        <li><strong>filter:</strong> Like sorting your laundry — keeps only what matches (e.g. only whites).</li>\n        <li><strong>reduce:</strong> Like collecting coins — adds up or combines values into one result.</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ .map()</h3>\n      <p>Used to change every item in an array and return a new one.</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst nums = [1, 2, 3];\nconst doubled = nums.map(n => n * 2);\nconsole.log(doubled); // [2, 4, 6]\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧹 .filter()</h3>\n      <p>Used to keep only the items that match a condition.</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst nums = [1, 2, 3, 4];\nconst even = nums.filter(n => n % 2 === 0);\nconsole.log(even); // [2, 4]\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">➕ .reduce()</h3>\n      <p>Used to combine all values into a single result (sum, max, average... anything!)</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst nums = [1, 2, 3, 4];\nconst sum = nums.reduce((acc, cur) => acc + cur, 0);\nconsole.log(sum); // 10\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 When to Use Them?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>map:</strong> When you want to change values</li>\n        <li><strong>filter:</strong> When you want to pick only some</li>\n        <li><strong>reduce:</strong> When you want one result out of many</li>\n      </ul>\n    `,\n        proTip: 'These methods do not change the original array — they return a brand-new one. Chain them together for powerful combos!',\n        codeSamples: [{\n          language: 'javascript',\n          code: `const students = [\n  { name: \"Ravi\", marks: 85 },\n  { name: \"Anu\", marks: 92 },\n  { name: \"Jay\", marks: 67 }\n];\n\n// Get names only\nconst names = students.map(s => s.name);\nconsole.log(names); // [\"Ravi\", \"Anu\", \"Jay\"]\n\n// Filter passed students\nconst passed = students.filter(s => s.marks > 70);\nconsole.log(passed); // [{ name: \"Ravi\", ...}, { name: \"Anu\", ...}]\n\n// Average marks\nconst total = students.reduce((sum, s) => sum + s.marks, 0);\nconst average = total / students.length;\nconsole.log(average); // 81.33\n`\n        }]\n      };\n    case 'js-async':\n      return {\n        slug: 'js-async',\n        title: 'Async JS: Callbacks, Promises & async/await',\n        content: `\n      <p>JavaScript is single-threaded — it does one thing at a time. But what if you need to wait for something (like fetching data)? That's where <strong>asynchronous</strong> JavaScript comes in — it lets you wait without freezing everything else.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⏳ Real-World Analogy</h3>\n      <p>Imagine you order food at a restaurant. You don’t just stand there until it's ready — you continue chatting or scrolling your phone. Then when food is ready, the waiter brings it to you. That’s async!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 1. Callbacks</h3>\n      <p>A function passed to another function — gets called when something finishes.</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nfunction getData(callback) {\n  setTimeout(() => {\n    callback(\"Data loaded!\");\n  }, 2000);\n}\n\ngetData((data) => {\n  console.log(data); // after 2 seconds: \"Data loaded!\"\n});\n      </pre>\n      <p class=\"mt-2 text-yellow-300\">⚠️ But callbacks can get messy — callback hell!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤝 2. Promises</h3>\n      <p>A Promise says: \"I promise I’ll give you data... later.\"</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst fetchData = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Here is your data!\");\n    }, 2000);\n  });\n};\n\nfetchData().then(data => console.log(data));\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ 3. async / await</h3>\n      <p>Modern, cleaner way to write async code. Like saying: \"Hey JS, pause here until I get the result.\"</p>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst fetchData = () => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(\"Done!\"), 2000);\n  });\n};\n\nasync function getInfo() {\n  const result = await fetchData();\n  console.log(result); // Done!\n}\n\ngetInfo();\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📚 Use Cases</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Fetching API data (e.g. weather, news, etc.)</li>\n        <li>Reading files, timers, animations</li>\n        <li>Anything that takes time!</li>\n      </ul>\n    `,\n        proTip: 'Use try/catch with async/await to handle errors — just like try/catch in real life when things go wrong.',\n        codeSamples: [{\n          language: 'javascript',\n          code: `const fakeFetch = () => {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(\"✅ Data loaded\"), 1500);\n  });\n};\n\nasync function load() {\n  try {\n    const data = await fakeFetch();\n    console.log(data); // ✅ Data loaded\n  } catch (err) {\n    console.error(\"❌ Failed!\", err);\n  }\n}\n\nload();`\n        }]\n      };\n    case 'js-fetch-api':\n      return {\n        slug: 'js-fetch-api',\n        title: 'Fetching Data with Fetch API',\n        content: `\n      <p>So now you know how async works... but what’s the most common thing we wait for? 🔥<strong>Fetching data from the internet</strong> — like weather info, jokes, news, etc.</p>\n\n      <p>The <code>fetch()</code> function helps us make HTTP requests (like GET or POST) to any API and receive data — usually in <code>JSON</code> format.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🌍 Real-World Analogy</h3>\n      <p>Imagine fetch like placing an online order — you send the request, wait a bit, and the delivery (data) arrives! 📦</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Basic Usage</h3>\n      <pre class=\"bg-black text-white p-2 rounded\">\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ With async/await</h3>\n      <pre class=\"bg-black text-white p-2 rounded\">\nasync function getData() {\n  try {\n    const res = await fetch('https://api.example.com/data');\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error('Something went wrong:', err);\n  }\n}\ngetData();\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📬 What Can You Do With It?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Get random jokes or quotes</li>\n        <li>Show live weather</li>\n        <li>Build search bars using public APIs</li>\n        <li>Connect frontend with your backend server</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 Free Practice APIs</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" class=\"text-blue-400\">JSONPlaceholder</a> – Fake data</li>\n        <li><a href=\"https://api.github.com/users\" target=\"_blank\" class=\"text-blue-400\">GitHub API</a> – Public user data</li>\n        <li><a href=\"https://icanhazdadjoke.com/api\" target=\"_blank\" class=\"text-blue-400\">Joke API</a> – For fun 😂</li>\n      </ul>\n    `,\n        proTip: 'Always check if the response is OK using <code>response.ok</code> before calling <code>.json()</code>. And don’t forget error handling!',\n        codeSamples: [{\n          language: 'javascript',\n          code: `async function getJoke() {\n  const res = await fetch('https://icanhazdadjoke.com/', {\n    headers: { Accept: 'application/json' }\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch\");\n\n  const data = await res.json();\n  console.log(data.joke);\n}\n\ngetJoke();`\n        }]\n      };\n    case 'js-browser-storage':\n      return {\n        slug: 'js-browser-storage',\n        title: 'Browser Storage (localStorage, sessionStorage)',\n        content: `\n      <p>Ever visited a site and it remembered your theme, login info, or even your last score? That’s possible because of <strong>browser storage</strong>.</p>\n\n      <p>JavaScript gives us 2 awesome tools to store small pieces of data on the user’s browser:</p>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><code>localStorage</code> — stays even after closing the browser</li>\n        <li><code>sessionStorage</code> — disappears when tab/browser is closed</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\n      <p>Think of <code>localStorage</code> like saving something to a sticky note and pinning it on your monitor. It's there tomorrow too. <code>sessionStorage</code> is like writing on a whiteboard — it's gone when the meeting (session) ends.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 localStorage Basics</h3>\n      <pre class=\"bg-black text-white p-2 rounded\">\n// Store\nlocalStorage.setItem('name', 'Abhinash');\n\n// Retrieve\nconst user = localStorage.getItem('name');\nconsole.log(user); // Abhinash\n\n// Remove\nlocalStorage.removeItem('name');\n\n// Clear everything\nlocalStorage.clear();\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 sessionStorage Works the Same</h3>\n      <p>Just replace <code>localStorage</code> with <code>sessionStorage</code> and you're good!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Important Tips</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li>Storage only saves strings — use <code>JSON.stringify()</code> for objects</li>\n        <li>Don’t store passwords or sensitive info!</li>\n        <li>Great for saving dark mode, quiz answers, or user preferences</li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Store Objects</h3>\n      <pre class=\"bg-black text-white p-2 rounded\">\nconst user = { name: 'Abhinash', score: 95 };\n\nlocalStorage.setItem('user', JSON.stringify(user));\n\nconst saved = JSON.parse(localStorage.getItem('user'));\nconsole.log(saved.name); // Abhinash\n      </pre>\n    `,\n        proTip: 'Use localStorage for things like themes, settings, or last visited tab. Use sessionStorage for temporary data like quiz progress!',\n        codeSamples: [{\n          language: 'javascript',\n          code: `// Save user's preferred theme\nlocalStorage.setItem(\"theme\", \"dark\");\n\n// Later when the site loads\nconst theme = localStorage.getItem(\"theme\");\ndocument.body.classList.add(theme);`\n        }]\n      };\n    case 'js-projects':\n      return {\n        slug: 'js-projects',\n        title: 'Mini Projects to Practice',\n        content: `\n      <p>Alright! You’ve learned the syntax, logic, and tricks… now it’s time to build something cool! 🧠💻</p>\n      <p>Practicing by building real mini-projects is the best way to make JavaScript feel natural and FUN.</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠 What Can You Build?</h3>\n      <ul class=\"list-disc list-inside text-gray-300\">\n        <li><strong>To-Do List</strong> — Add, mark as done, delete tasks</li>\n        <li><strong>Quiz App</strong> — Ask questions and show scores</li>\n        <li><strong>Weather App</strong> — Fetch weather using APIs</li>\n        <li><strong>Random Joke Generator</strong> — Fetch jokes from a joke API</li>\n        <li><strong>Typing Speed Test</strong> — Measure how fast you can type</li>\n        <li><strong>Image Slider</strong> — Simple photo slideshow with arrows</li>\n        <li><strong>Digital Clock</strong> — Real-time clock using <code>Date</code></li>\n      </ul>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Real-World Tip</h3>\n      <p>Pick a small project. Don’t aim for perfection. Get it working first, then make it pretty. The goal is to get your hands dirty!</p>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Starter Template</h3>\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;My JS Project&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    // Start here!\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n      </pre>\n\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Let’s Build Something</h3>\n      <p>You don't have to know everything. Start building, Google stuff along the way, and just keep improving.</p>\n    `,\n        proTip: 'Keep a “Projects” folder on your system. Each project you build adds real experience and can go into your portfolio. Start small, finish fast.',\n        codeSamples: [{\n          language: 'javascript',\n          code: `// Simple digital clock example\nsetInterval(() => {\n  const time = new Date().toLocaleTimeString();\n  document.body.innerHTML = \"<h1>\" + time + \"</h1>\";\n}, 1000);`\n        }]\n      };\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["JavaScriptTopics","id","title","slug","JavaScriptTopicContent","content","proTip","codeSamples","language","code","undefined"],"sources":["C:\\Users\\abhis\\OneDrive\\Desktop\\IgKnightWeb\\IgKnightWeb\\src\\app\\features\\documentation\\data\\javascript\\topics-data.ts"],"sourcesContent":["import { Topic, TopicContent } from \"../../../../models/topic.model\";\r\n\r\nexport const JavaScriptTopics: Topic[] = [\r\n  { id: 'js-introduction', title: 'Introduction to JavaScript', slug: 'js-introduction' },\r\n  { id: 'js-variables-datatypes', title: 'Variables & Data Types', slug: 'js-variables-datatypes' },\r\n  { id: 'js-operators', title: 'JavaScript Operators', slug: 'js-operators' },\r\n  { id: 'js-conditions', title: 'Conditional Statements (if, else, switch)', slug: 'js-conditions' },\r\n  { id: 'js-loops', title: 'Loops Made Simple', slug: 'js-loops' },\r\n  { id: 'js-functions', title: 'Functions Explained Like Pizza Orders', slug: 'js-functions' },\r\n  { id: 'js-arrays', title: 'Arrays & Everyday Lists', slug: 'js-arrays' },\r\n  { id: 'js-objects', title: 'Objects — Your Data’s Backpack', slug: 'js-objects' },\r\n  { id: 'js-dom-basics', title: 'DOM Manipulation Basics', slug: 'js-dom-basics' },\r\n  { id: 'js-events', title: 'Handling Events (Clicks, Keys, etc.)', slug: 'js-events' },\r\n  { id: 'js-es6', title: 'Modern JavaScript (ES6+)', slug: 'js-es6' },\r\n  { id: 'js-array-methods', title: 'Smart Array Methods (map, filter, reduce)', slug: 'js-array-methods' },\r\n  { id: 'js-async', title: 'Async JS: Callbacks, Promises & async/await', slug: 'js-async' },\r\n  { id: 'js-fetch-api', title: 'Fetching Data with Fetch API', slug: 'js-fetch-api' },\r\n  { id: 'js-browser-storage', title: 'Browser Storage (localStorage, sessionStorage)', slug: 'js-browser-storage' },\r\n  { id: 'js-projects', title: 'Mini Projects to Practice', slug: 'js-projects' }\r\n];\r\n\r\nexport function JavaScriptTopicContent(slug: string): TopicContent | undefined {\r\n  switch (slug) {\r\n\r\n    case 'js-introduction':\r\n  return {\r\n    slug: 'js-introduction',\r\n    title: 'Introduction to JavaScript',\r\n    content: `\r\n      <p>JavaScript is what makes websites feel alive. While <strong>HTML</strong> builds the structure (like bones 🦴) and <strong>CSS</strong> styles it (like skin 💅), <strong>JavaScript</strong> is the <span class=\"font-semibold text-green-400\">brain and muscles</span> 🧠💪 — it lets websites move, react, and respond.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Real-Life Analogy</h3>\r\n      <p>Imagine a vending machine:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>HTML:</strong> The physical machine — buttons, slots, and lights</li>\r\n        <li><strong>CSS:</strong> The design — colors, branding, labels</li>\r\n        <li><strong>JavaScript:</strong> The brain that listens to button presses, dispenses snacks, and shows the price</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Why Learn JavaScript?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>To make your websites interactive — think sliders, popups, animations, and games</li>\r\n        <li>To build full apps — from simple calculators to full-stack sites</li>\r\n        <li>To work with real-time data, user input, and browser storage</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔍 What Can You Build with It?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Todo Apps, Weather Apps, Games</li>\r\n        <li>Interactive forms and validations</li>\r\n        <li>Single Page Applications (like this platform!)</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 The Mindset Shift</h3>\r\n      <p>You’re not just writing code — you’re teaching the browser <em>how to think</em> and <em>what to do</em> when something happens.</p>\r\n    `,\r\n    proTip: 'JS is everywhere — from browsers to servers to mobile apps. Learn once, use anywhere!',\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n<!-- HTML + JavaScript in action -->\r\n<button onclick=\"alert('Hello from JavaScript!')\">Click Me</button>`\r\n      },\r\n      {\r\n        language: 'js',\r\n        code: `\r\n// Same using JavaScript directly\r\ndocument.querySelector('button').addEventListener('click', () => {\r\n  alert('Hello from JS again!');\r\n});`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-variables-datatypes':\r\n  return {\r\n    slug: 'js-variables-datatypes',\r\n    title: 'Variables & Data Types',\r\n    content: `\r\n      <p>In JavaScript, <strong>variables</strong> are like containers 🧺 — they hold stuff. That “stuff” could be text, numbers, lists, or even entire functions!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🥤 Real-Life Analogy</h3>\r\n      <p>Think of variables as labeled jars in your kitchen. One might hold sugar, another rice, and another cookies. You give them names so you know what's inside.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Declaring Variables</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>let</code> — you can change the value later</li>\r\n        <li><code>const</code> — value stays constant (can’t reassign)</li>\r\n        <li><code>var</code> — old-school, mostly avoided now</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\">\r\n<code>let name = \"IgKnight\";\r\nconst pi = 3.14;\r\nvar oldWay = true;</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📊 Types of Data</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>String:</strong> Text like <code>\"hello\"</code></li>\r\n        <li><strong>Number:</strong> 5, 3.14, -20</li>\r\n        <li><strong>Boolean:</strong> <code>true</code> or <code>false</code></li>\r\n        <li><strong>Array:</strong> A list: <code>[1, 2, 3]</code></li>\r\n        <li><strong>Object:</strong> A group of key-value pairs: <code>{ name: \"IgKnight\", age: 2 }</code></li>\r\n        <li><strong>Null:</strong> An intentional “nothing”</li>\r\n        <li><strong>Undefined:</strong> Something hasn’t been given a value yet</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why It Matters</h3>\r\n      <p>You’ll store user inputs, API data, scores, settings — <em>everything</em> — in variables. Understanding how to create and use them is the foundation of all JS magic.</p>\r\n    `,\r\n    proTip: 'Use <code>console.log()</code> to print your variables and check what they hold — it’s your best friend while debugging!',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `let username = \"Abhinash\";\r\nconst isLoggedIn = true;\r\nlet scores = [85, 90, 78];\r\nlet user = { name: \"Abhinash\", role: \"Learner\" };`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-operators':\r\n  return {\r\n    slug: 'js-operators',\r\n    title: 'JavaScript Operators',\r\n    content: `\r\n      <p>Operators in JavaScript are like tools in your toolkit 🔧 — you use them to do things like math, comparisons, or combining values.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 Arithmetic Operators</h3>\r\n      <p>These are the math guys. You’ve seen them before:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>+</code> : Add</li>\r\n        <li><code>-</code> : Subtract</li>\r\n        <li><code>*</code> : Multiply</li>\r\n        <li><code>/</code> : Divide</li>\r\n        <li><code>%</code> : Remainder</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📏 Comparison Operators</h3>\r\n      <p>Used to compare values and return <code>true</code> or <code>false</code>:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>==</code> : Equal (loose)</li>\r\n        <li><code>===</code> : Equal (strict, checks type too)</li>\r\n        <li><code>!=</code> : Not equal</li>\r\n        <li><code>&gt;</code> , <code>&lt;</code> : Greater than / Less than</li>\r\n        <li><code>&gt;=</code> , <code>&lt;=</code> : Greater or equal / Less or equal</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Logical Operators</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>&&</code> : AND — both must be true</li>\r\n        <li><code>||</code> : OR — at least one must be true</li>\r\n        <li><code>!</code> : NOT — reverses a value</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">➕ String Concatenation</h3>\r\n      <p>Combine strings using <code>+</code>:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet greeting = \"Hello\" + \" \" + \"IgKnight!\";</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Tip</h3>\r\n      <p>If you're checking if a user is logged in AND has access, you'd write something like: <code>if (isLoggedIn && hasPermission)</code></p>\r\n    `,\r\n    proTip: 'Always prefer <code>===</code> over <code>==</code> for cleaner, safer comparisons!',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `let age = 18;\r\nlet isAdult = age >= 18;\r\n\r\nlet a = 10;\r\nlet b = 5;\r\nlet sum = a + b;\r\n\r\nlet isLoggedIn = true;\r\nlet hasAccess = false;\r\n\r\nconsole.log(isLoggedIn && hasAccess); // false`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-conditions':\r\n  return {\r\n    slug: 'js-conditions',\r\n    title: 'Conditional Statements (if, else, switch)',\r\n    content: `\r\n      <p>Imagine you're making choices in life — \"If it's raining, take an umbrella. Else, go without it.\" JavaScript lets you make similar decisions in code. 🌧️☂️</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔀 The <code>if</code> Statement</h3>\r\n      <p>This checks a condition, and if it's true, runs some code:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet age = 18;\r\n\r\nif (age >= 18) {\r\n  console.log(\"You're an adult!\");\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚪 <code>if...else</code> — One Way or the Other</h3>\r\n      <p>What if the condition is false? Use <code>else</code> to handle that:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet isLoggedIn = false;\r\n\r\nif (isLoggedIn) {\r\n  console.log(\"Welcome back!\");\r\n} else {\r\n  console.log(\"Please log in.\");\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 <code>else if</code> — Multiple Conditions</h3>\r\n      <p>You can check more than one condition with <code>else if</code>:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet score = 75;\r\n\r\nif (score >= 90) {\r\n  console.log(\"A grade\");\r\n} else if (score >= 75) {\r\n  console.log(\"B grade\");\r\n} else {\r\n  console.log(\"Keep trying!\");\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\r\n      <p>It's like a flowchart — check the first condition, then the next, and so on. Once a match is found, the rest are skipped.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 <code>switch</code> Statement — When You Have Many Options</h3>\r\n      <p>Instead of using many <code>else if</code> statements, you can use a <code>switch</code>:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet day = \"Monday\";\r\n\r\nswitch (day) {\r\n  case \"Monday\":\r\n    console.log(\"Ugh, it's Monday again.\");\r\n    break;\r\n  case \"Friday\":\r\n    console.log(\"Weekend is near!\");\r\n    break;\r\n  default:\r\n    console.log(\"Just another day...\");\r\n}</code></pre>\r\n    `,\r\n    proTip: 'Always use <code>break</code> in a <code>switch</code> case to stop execution after a match!',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `let userRole = \"admin\";\r\n\r\nif (userRole === \"admin\") {\r\n  console.log(\"You can manage everything.\");\r\n} else if (userRole === \"editor\") {\r\n  console.log(\"You can edit content.\");\r\n} else {\r\n  console.log(\"You can view content.\");\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-loops':\r\n  return {\r\n    slug: 'js-loops',\r\n    title: 'Loops (for, while, do-while)',\r\n    content: `\r\n      <p>Loops are like repeating chores — \"Do this 5 times\" or \"Keep doing this until the work is done.\" In JavaScript, loops help you repeat tasks efficiently. 🔁</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 The <code>for</code> Loop</h3>\r\n      <p>Use this when you know how many times to repeat:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nfor (let i = 1; i <= 5; i++) {\r\n  console.log(\"Count:\", i);\r\n}</code></pre>\r\n      <p>This prints numbers from 1 to 5. Think of it like: Start at 1 → check if it's ≤ 5 → run → increment → repeat.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 The <code>while</code> Loop</h3>\r\n      <p>Use this when you don't know how many times it should run:</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet x = 1;\r\n\r\nwhile (x <= 3) {\r\n  console.log(\"x is\", x);\r\n  x++;\r\n}</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚠️ The <code>do...while</code> Loop</h3>\r\n      <p>This runs the code once before checking the condition (useful for menus, prompts):</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet y = 5;\r\n\r\ndo {\r\n  console.log(\"Value:\", y);\r\n  y++;\r\n} while (y < 5);</code></pre>\r\n      <p>Even though the condition is false from the start, it runs at least once!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠 Real-World Analogy</h3>\r\n      <p>For loop is like a checklist: you know you have 5 tasks. While loop is like checking your inbox: keep going until it's empty.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Loop Gotchas</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Make sure your loop condition eventually becomes false, or it’ll loop forever! 🔄♾️</li>\r\n        <li>Use <code>break</code> to stop a loop early, and <code>continue</code> to skip to the next iteration.</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Avoid infinite loops! Make sure your counter or condition will eventually stop.',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\r\n\r\nfor (let i = 0; i < fruits.length; i++) {\r\n  console.log(\"Fruit:\", fruits[i]);\r\n}`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-functions':\r\n  return {\r\n    slug: 'js-functions',\r\n    title: 'Functions in JavaScript',\r\n    content: `\r\n      <p>Think of functions like recipes 📜 — they let you define a set of instructions once and use them anywhere, anytime, without repeating yourself!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🍳 What is a Function?</h3>\r\n      <p>A function is a reusable block of code that does something. You define it once, and call it wherever you need it.</p>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nfunction greet(name) {\r\n  console.log(\"Hello, \" + name + \"!\");\r\n}\r\n\r\ngreet(\"IgKnight\");</code></pre>\r\n\r\n      <p>This will print: <code>Hello, IgKnight!</code></p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🎯 Why Use Functions?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Avoid repeating code (DRY: Don’t Repeat Yourself)</li>\r\n        <li>Keep code organized and easier to read</li>\r\n        <li>Break down big tasks into smaller steps</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚡ Function Parameters & Return Values</h3>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nlet result = add(5, 3); // result = 8</code></pre>\r\n\r\n      <p><code>return</code> sends the result back to where the function was called.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Function vs Console.log</h3>\r\n      <p><code>console.log()</code> is like saying it out loud. <code>return</code> is like handing back the result silently for future use.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Arrow Functions (Modern & Short)</h3>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nconst square = (n) => n * n;\r\n\r\nconsole.log(square(4)); // 16</code></pre>\r\n\r\n      <p>Arrow functions are shorter and great for simple logic.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\r\n      <p>A function is like a coffee machine ☕. You give it an input (beans), and it gives you a result (coffee). You don't care how it works inside — you just press the button!</p>\r\n    `,\r\n    proTip: 'Name your functions clearly. It should describe what it does — like `calculateTotal()` or `formatDate()`.',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `function isEven(num) {\r\n  return num % 2 === 0;\r\n}\r\n\r\nconsole.log(isEven(4)); // true`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-arrays':\r\n  return {\r\n    slug: 'js-arrays',\r\n    title: 'Arrays in JavaScript',\r\n    content: `\r\n      <p>Imagine a box 📦 that can hold multiple items — that’s an array. It's used to store a list of values in a single variable.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔢 What is an Array?</h3>\r\n      <p>An array is a special variable that holds a collection of items — like numbers, strings, or even other arrays!</p>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\r\nconsole.log(fruits[0]); // \"apple\"</code></pre>\r\n\r\n      <p>You access array items using their index — starting from 0.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📋 Common Array Methods</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>push()</code> — Add item to the end</li>\r\n        <li><code>pop()</code> — Remove last item</li>\r\n        <li><code>shift()</code> — Remove first item</li>\r\n        <li><code>unshift()</code> — Add item to the beginning</li>\r\n        <li><code>length</code> — Get total number of items</li>\r\n        <li><code>includes()</code> — Check if it contains an item</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet tasks = [\"code\", \"eat\"];\r\ntasks.push(\"sleep\");\r\nconsole.log(tasks); // [\"code\", \"eat\", \"sleep\"]</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Loops + Arrays = Superpower</h3>\r\n      <p>You can loop through arrays using <code>for</code> or <code>forEach</code> to perform actions on each item:</p>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nlet scores = [80, 90, 100];\r\nscores.forEach(score => {\r\n  console.log(\"Score:\", score);\r\n});</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Real-World Analogy</h3>\r\n      <p>An array is like a row of mailboxes 📬. Each has a number (index), and you can store or retrieve items from each one.</p>\r\n    `,\r\n    proTip: 'Use plural names for arrays, like `tasks`, `users`, or `scores`. It keeps your code readable and meaningful.',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `const colors = [\"red\", \"green\", \"blue\"];\r\nconsole.log(colors.length);  // 3\r\ncolors.push(\"yellow\");\r\nconsole.log(colors);         // [\"red\", \"green\", \"blue\", \"yellow\"]`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-objects':\r\n  return {\r\n    slug: 'js-objects',\r\n    title: 'Understanding Objects in JavaScript',\r\n    content: `\r\n      <p>Think of an object like a **real-world item** — a car, a person, or even a student. Each one has characteristics (properties) and things it can do (methods). That's what JavaScript objects are all about!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚗 A Car as an Object</h3>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nconst car = {\r\n  brand: \"Tesla\",\r\n  model: \"Model 3\",\r\n  color: \"red\",\r\n  start: function() {\r\n    console.log(\"Engine started\");\r\n  }\r\n};\r\n</code></pre>\r\n      <p>Here, <code>brand</code>, <code>model</code>, and <code>color</code> are **properties**, and <code>start()</code> is a **method** (function inside an object).</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Why Use Objects?</h3>\r\n      <p>Objects group related data and functionality together. It's super useful when you're dealing with complex things like users, posts, or settings.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔑 Accessing Object Data</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>object.property</code> — Dot notation</li>\r\n        <li><code>object[\"property\"]</code> — Bracket notation</li>\r\n      </ul>\r\n\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\nconsole.log(car.brand);      // \"Tesla\"\r\nconsole.log(car[\"color\"]);   // \"red\"\r\ncar.start();                 // \"Engine started\"\r\n</code></pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\r\n      <p>Imagine a student ID card 🪪. It holds info like name, age, and roll number — just like an object holding key-value pairs.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Bonus: Dynamic Properties</h3>\r\n      <p>You can even add or update object properties on the fly!</p>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\"><code>\r\ncar.year = 2024;\r\ncar.color = \"blue\";\r\n</code></pre>\r\n    `,\r\n    proTip: 'Always think in terms of “key: value” when working with objects. If you can describe something in real life, you can model it with an object.',\r\n    codeSamples: [\r\n      {\r\n        language: 'js',\r\n        code: `const user = {\r\n  name: \"Alex\",\r\n  email: \"alex@example.com\",\r\n  login: function() {\r\n    console.log(\"Logged in!\");\r\n  }\r\n};\r\n\r\nuser.login();  // \"Logged in!\"\r\nconsole.log(user.name);`\r\n      }\r\n    ]\r\n  };\r\n\r\n  case 'js-dom-basics':\r\n  return {\r\n    slug: 'js-dom-basics',\r\n    title: 'DOM Manipulation Basics',\r\n    content: `\r\n      <p>The DOM (Document Object Model) is like the \"live tree\" of your webpage. It’s how JavaScript sees and interacts with your HTML elements. Think of it as a LEGO structure — HTML builds the blocks, and JavaScript moves them around or changes them on the fly.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🏠 DOM = Digital House</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>HTML Elements:</strong> These are the rooms and furniture (like <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;button&gt;</code>).</li>\r\n        <li><strong>JavaScript:</strong> This is the housekeeper — it can change the color of a wall (style), move a chair (element), or add/remove decorations (nodes).</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Common DOM Operations</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>document.getElementById()</code> — grab one element by ID</li>\r\n        <li><code>document.querySelector()</code> — grab the first match of a CSS selector</li>\r\n        <li><code>element.textContent</code> — change or read the text inside</li>\r\n        <li><code>element.style</code> — directly change CSS styles</li>\r\n        <li><code>element.classList.add()</code> — add a class to apply styles</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤹 Real-Life Example</h3>\r\n      <p>Imagine you have a light switch (button). When you click it, the light (a div) changes color. That’s DOM in action!</p>\r\n    `,\r\n    proTip: 'Use browser DevTools to inspect the DOM and experiment live by editing HTML and CSS!',\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n<!-- HTML -->\r\n<p id=\"message\">Hello, IgKnight!</p>\r\n<button onclick=\"changeText()\">Click Me</button>`\r\n      },\r\n      {\r\n        language: 'javascript',\r\n        code: `\r\n// JavaScript\r\nfunction changeText() {\r\n  const msg = document.getElementById('message');\r\n  msg.textContent = \"You just clicked the button!\";\r\n}`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-events':\r\n  return {\r\n    slug: 'js-events',\r\n    title: 'Handling Events (Clicks, Keys, etc.)',\r\n    content: `\r\n      <p>Events in JavaScript are like reactions — they’re how your webpage *responds* when a user interacts with it. Think of your website as a smart machine that listens and reacts. When you click a button, move your mouse, type something, or even scroll — JavaScript can \"hear\" it and respond!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>🛎️ <strong>Clicking a button</strong> is like ringing a bell — it triggers an action.</li>\r\n        <li>🎹 <strong>Typing</strong> is like playing a piano — each keypress can trigger a note (event).</li>\r\n        <li>🧽 <strong>Mouse movement</strong> is like your cursor cleaning the window — JS watches where it goes.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⚙️ How Events Work</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>addEventListener()</code> is how JavaScript listens for a specific event.</li>\r\n        <li>You specify the event type (like <code>'click'</code>, <code>'keydown'</code>, <code>'mouseover'</code>).</li>\r\n        <li>Then you give it a function — what to do when that event happens.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ Common Events</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>click</code> — when you click an element</li>\r\n        <li><code>input</code> — when user types in a form field</li>\r\n        <li><code>mouseover</code> — when the mouse enters an element</li>\r\n        <li><code>keydown</code> — when a key is pressed</li>\r\n        <li><code>submit</code> — when a form is submitted</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Event Handler = Reaction Function</h3>\r\n      <p>You create a function to handle the event, and JavaScript runs it when that event occurs.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔁 Event Delegation (Advanced Idea)</h3>\r\n      <p>Instead of attaching events to many items, attach it to a common parent and let the event bubble up. It's like listening at the hallway instead of putting a microphone in every room.</p>\r\n    `,\r\n    proTip: \"Use DevTools → Console → inspect element → Events tab to see what events are bound to any HTML element!\",\r\n    codeSamples: [\r\n      {\r\n        language: 'html',\r\n        code: `\r\n<!-- HTML -->\r\n<button id=\"alertBtn\">Click Me</button>\r\n<input type=\"text\" id=\"nameInput\" placeholder=\"Type your name\" />`\r\n      },\r\n      {\r\n        language: 'javascript',\r\n        code: `\r\n// JavaScript\r\ndocument.getElementById(\"alertBtn\").addEventListener(\"click\", function () {\r\n  alert(\"Button clicked!\");\r\n});\r\n\r\ndocument.getElementById(\"nameInput\").addEventListener(\"input\", function (e) {\r\n  console.log(\"Typed:\", e.target.value);\r\n});`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-es6':\r\n  return {\r\n    slug: 'js-es6',\r\n    title: 'Modern JavaScript (ES6+)',\r\n    content: `\r\n      <p>JavaScript got a major glow-up with ES6 (also called ECMAScript 2015) and newer versions. Think of it like upgrading from a basic scooter to a Tesla — smoother, faster, and packed with cool features.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Why Learn ES6+?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Cleaner syntax = less code, more power</li>\r\n        <li>Helps you write code like a pro (modern companies use it!)</li>\r\n        <li>Makes complex things easier — like functions, objects, and loops</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ Key ES6+ Features (Explained Simply)</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong><code>let</code> & <code>const</code></strong> — Like giving variables clear rules: <code>const</code> = locked, <code>let</code> = flexible</li>\r\n        <li><strong>Arrow Functions</strong> — Short and sweet way to write functions: <code>(a, b) =&gt; a + b</code></li>\r\n        <li><strong>Template Literals</strong> — Write strings with variables easily using backticks: <code>\\`Hello, \\${name}!\\`</code></li>\r\n        <li><strong>Destructuring</strong> — Unpack values from arrays or objects like unboxing a gift</li>\r\n        <li><strong>Spread Operator</strong> — Combine or copy arrays/objects like magic: <code>...arr</code></li>\r\n        <li><strong>Default Parameters</strong> — Set default values in functions</li>\r\n        <li><strong>Modules</strong> — Use <code>import</code> and <code>export</code> to split your code into clean files</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">👀 Example: Traditional vs ES6</h3>\r\n      <p>Old style:</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">function greet(name) {\r\n  return \"Hello, \" + name;\r\n}</pre>\r\n      <p>Modern ES6 style:</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">const greet = (name) => \\`Hello, \\${name}\\`;</pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Bonus: Imports & Exports</h3>\r\n      <p>Now you can split your code into modules:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>export const name = 'IgKnight'</code></li>\r\n        <li><code>import { name } from './file.js'</code></li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Most modern browsers and tools support ES6+, but use Babel if you want to support older ones.',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `// Arrow function + template string\r\nconst greet = (name) => \\`Hello, \\${name}!\\`;\r\n\r\nconsole.log(greet(\"Abhinash\")); // Hello, Abhinash!\r\n\r\n// Destructuring\r\nconst user = { username: \"IgKnight\", age: 25 };\r\nconst { username } = user;\r\n\r\nconsole.log(username); // IgKnight`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-array-methods':\r\n  return {\r\n    slug: 'js-array-methods',\r\n    title: 'Smart Array Methods (map, filter, reduce)',\r\n    content: `\r\n      <p>Let’s level up your array skills! Arrays aren’t just boring lists — they become powerful when you use methods like <code>map</code>, <code>filter</code>, and <code>reduce</code>. These are your toolbox for transforming and working with data easily.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>map:</strong> Like a chef preparing each item in a list of ingredients — gives back a new list.</li>\r\n        <li><strong>filter:</strong> Like sorting your laundry — keeps only what matches (e.g. only whites).</li>\r\n        <li><strong>reduce:</strong> Like collecting coins — adds up or combines values into one result.</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠️ .map()</h3>\r\n      <p>Used to change every item in an array and return a new one.</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst nums = [1, 2, 3];\r\nconst doubled = nums.map(n => n * 2);\r\nconsole.log(doubled); // [2, 4, 6]\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧹 .filter()</h3>\r\n      <p>Used to keep only the items that match a condition.</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst nums = [1, 2, 3, 4];\r\nconst even = nums.filter(n => n % 2 === 0);\r\nconsole.log(even); // [2, 4]\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">➕ .reduce()</h3>\r\n      <p>Used to combine all values into a single result (sum, max, average... anything!)</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst nums = [1, 2, 3, 4];\r\nconst sum = nums.reduce((acc, cur) => acc + cur, 0);\r\nconsole.log(sum); // 10\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 When to Use Them?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>map:</strong> When you want to change values</li>\r\n        <li><strong>filter:</strong> When you want to pick only some</li>\r\n        <li><strong>reduce:</strong> When you want one result out of many</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'These methods do not change the original array — they return a brand-new one. Chain them together for powerful combos!',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `const students = [\r\n  { name: \"Ravi\", marks: 85 },\r\n  { name: \"Anu\", marks: 92 },\r\n  { name: \"Jay\", marks: 67 }\r\n];\r\n\r\n// Get names only\r\nconst names = students.map(s => s.name);\r\nconsole.log(names); // [\"Ravi\", \"Anu\", \"Jay\"]\r\n\r\n// Filter passed students\r\nconst passed = students.filter(s => s.marks > 70);\r\nconsole.log(passed); // [{ name: \"Ravi\", ...}, { name: \"Anu\", ...}]\r\n\r\n// Average marks\r\nconst total = students.reduce((sum, s) => sum + s.marks, 0);\r\nconst average = total / students.length;\r\nconsole.log(average); // 81.33\r\n`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-async':\r\n  return {\r\n    slug: 'js-async',\r\n    title: 'Async JS: Callbacks, Promises & async/await',\r\n    content: `\r\n      <p>JavaScript is single-threaded — it does one thing at a time. But what if you need to wait for something (like fetching data)? That's where <strong>asynchronous</strong> JavaScript comes in — it lets you wait without freezing everything else.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">⏳ Real-World Analogy</h3>\r\n      <p>Imagine you order food at a restaurant. You don’t just stand there until it's ready — you continue chatting or scrolling your phone. Then when food is ready, the waiter brings it to you. That’s async!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧩 1. Callbacks</h3>\r\n      <p>A function passed to another function — gets called when something finishes.</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nfunction getData(callback) {\r\n  setTimeout(() => {\r\n    callback(\"Data loaded!\");\r\n  }, 2000);\r\n}\r\n\r\ngetData((data) => {\r\n  console.log(data); // after 2 seconds: \"Data loaded!\"\r\n});\r\n      </pre>\r\n      <p class=\"mt-2 text-yellow-300\">⚠️ But callbacks can get messy — callback hell!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🤝 2. Promises</h3>\r\n      <p>A Promise says: \"I promise I’ll give you data... later.\"</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst fetchData = () => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(\"Here is your data!\");\r\n    }, 2000);\r\n  });\r\n};\r\n\r\nfetchData().then(data => console.log(data));\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ 3. async / await</h3>\r\n      <p>Modern, cleaner way to write async code. Like saying: \"Hey JS, pause here until I get the result.\"</p>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst fetchData = () => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(\"Done!\"), 2000);\r\n  });\r\n};\r\n\r\nasync function getInfo() {\r\n  const result = await fetchData();\r\n  console.log(result); // Done!\r\n}\r\n\r\ngetInfo();\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📚 Use Cases</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Fetching API data (e.g. weather, news, etc.)</li>\r\n        <li>Reading files, timers, animations</li>\r\n        <li>Anything that takes time!</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Use try/catch with async/await to handle errors — just like try/catch in real life when things go wrong.',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `const fakeFetch = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(\"✅ Data loaded\"), 1500);\r\n  });\r\n};\r\n\r\nasync function load() {\r\n  try {\r\n    const data = await fakeFetch();\r\n    console.log(data); // ✅ Data loaded\r\n  } catch (err) {\r\n    console.error(\"❌ Failed!\", err);\r\n  }\r\n}\r\n\r\nload();`\r\n      }\r\n    ]\r\n  };\r\n\r\ncase 'js-fetch-api':\r\n  return {\r\n    slug: 'js-fetch-api',\r\n    title: 'Fetching Data with Fetch API',\r\n    content: `\r\n      <p>So now you know how async works... but what’s the most common thing we wait for? 🔥<strong>Fetching data from the internet</strong> — like weather info, jokes, news, etc.</p>\r\n\r\n      <p>The <code>fetch()</code> function helps us make HTTP requests (like GET or POST) to any API and receive data — usually in <code>JSON</code> format.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🌍 Real-World Analogy</h3>\r\n      <p>Imagine fetch like placing an online order — you send the request, wait a bit, and the delivery (data) arrives! 📦</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🔄 Basic Usage</h3>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nfetch('https://api.example.com/data')\r\n  .then(response => response.json())\r\n  .then(data => console.log(data))\r\n  .catch(error => console.error('Error:', error));\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">✨ With async/await</h3>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nasync function getData() {\r\n  try {\r\n    const res = await fetch('https://api.example.com/data');\r\n    const data = await res.json();\r\n    console.log(data);\r\n  } catch (err) {\r\n    console.error('Something went wrong:', err);\r\n  }\r\n}\r\ngetData();\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📬 What Can You Do With It?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Get random jokes or quotes</li>\r\n        <li>Show live weather</li>\r\n        <li>Build search bars using public APIs</li>\r\n        <li>Connect frontend with your backend server</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 Free Practice APIs</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" class=\"text-blue-400\">JSONPlaceholder</a> – Fake data</li>\r\n        <li><a href=\"https://api.github.com/users\" target=\"_blank\" class=\"text-blue-400\">GitHub API</a> – Public user data</li>\r\n        <li><a href=\"https://icanhazdadjoke.com/api\" target=\"_blank\" class=\"text-blue-400\">Joke API</a> – For fun 😂</li>\r\n      </ul>\r\n    `,\r\n    proTip: 'Always check if the response is OK using <code>response.ok</code> before calling <code>.json()</code>. And don’t forget error handling!',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `async function getJoke() {\r\n  const res = await fetch('https://icanhazdadjoke.com/', {\r\n    headers: { Accept: 'application/json' }\r\n  });\r\n\r\n  if (!res.ok) throw new Error(\"Failed to fetch\");\r\n\r\n  const data = await res.json();\r\n  console.log(data.joke);\r\n}\r\n\r\ngetJoke();`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-browser-storage':\r\n  return {\r\n    slug: 'js-browser-storage',\r\n    title: 'Browser Storage (localStorage, sessionStorage)',\r\n    content: `\r\n      <p>Ever visited a site and it remembered your theme, login info, or even your last score? That’s possible because of <strong>browser storage</strong>.</p>\r\n\r\n      <p>JavaScript gives us 2 awesome tools to store small pieces of data on the user’s browser:</p>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><code>localStorage</code> — stays even after closing the browser</li>\r\n        <li><code>sessionStorage</code> — disappears when tab/browser is closed</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧠 Real-World Analogy</h3>\r\n      <p>Think of <code>localStorage</code> like saving something to a sticky note and pinning it on your monitor. It's there tomorrow too. <code>sessionStorage</code> is like writing on a whiteboard — it's gone when the meeting (session) ends.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 localStorage Basics</h3>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\n// Store\r\nlocalStorage.setItem('name', 'Abhinash');\r\n\r\n// Retrieve\r\nconst user = localStorage.getItem('name');\r\nconsole.log(user); // Abhinash\r\n\r\n// Remove\r\nlocalStorage.removeItem('name');\r\n\r\n// Clear everything\r\nlocalStorage.clear();\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🧪 sessionStorage Works the Same</h3>\r\n      <p>Just replace <code>localStorage</code> with <code>sessionStorage</code> and you're good!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📌 Important Tips</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li>Storage only saves strings — use <code>JSON.stringify()</code> for objects</li>\r\n        <li>Don’t store passwords or sensitive info!</li>\r\n        <li>Great for saving dark mode, quiz answers, or user preferences</li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Store Objects</h3>\r\n      <pre class=\"bg-black text-white p-2 rounded\">\r\nconst user = { name: 'Abhinash', score: 95 };\r\n\r\nlocalStorage.setItem('user', JSON.stringify(user));\r\n\r\nconst saved = JSON.parse(localStorage.getItem('user'));\r\nconsole.log(saved.name); // Abhinash\r\n      </pre>\r\n    `,\r\n    proTip: 'Use localStorage for things like themes, settings, or last visited tab. Use sessionStorage for temporary data like quiz progress!',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `// Save user's preferred theme\r\nlocalStorage.setItem(\"theme\", \"dark\");\r\n\r\n// Later when the site loads\r\nconst theme = localStorage.getItem(\"theme\");\r\ndocument.body.classList.add(theme);`\r\n      }\r\n    ]\r\n  };\r\n  case 'js-projects':\r\n  return {\r\n    slug: 'js-projects',\r\n    title: 'Mini Projects to Practice',\r\n    content: `\r\n      <p>Alright! You’ve learned the syntax, logic, and tricks… now it’s time to build something cool! 🧠💻</p>\r\n      <p>Practicing by building real mini-projects is the best way to make JavaScript feel natural and FUN.</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🛠 What Can You Build?</h3>\r\n      <ul class=\"list-disc list-inside text-gray-300\">\r\n        <li><strong>To-Do List</strong> — Add, mark as done, delete tasks</li>\r\n        <li><strong>Quiz App</strong> — Ask questions and show scores</li>\r\n        <li><strong>Weather App</strong> — Fetch weather using APIs</li>\r\n        <li><strong>Random Joke Generator</strong> — Fetch jokes from a joke API</li>\r\n        <li><strong>Typing Speed Test</strong> — Measure how fast you can type</li>\r\n        <li><strong>Image Slider</strong> — Simple photo slideshow with arrows</li>\r\n        <li><strong>Digital Clock</strong> — Real-time clock using <code>Date</code></li>\r\n      </ul>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">💡 Real-World Tip</h3>\r\n      <p>Pick a small project. Don’t aim for perfection. Get it working first, then make it pretty. The goal is to get your hands dirty!</p>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">📦 Starter Template</h3>\r\n      <pre class=\"bg-[#1F2937] text-green-400 p-4 rounded-lg overflow-auto\">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n  &lt;title&gt;My JS Project&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;script&gt;\r\n    // Start here!\r\n  &lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n      </pre>\r\n\r\n      <h3 class=\"text-lg font-semibold mt-4 mb-2 text-white\">🚀 Let’s Build Something</h3>\r\n      <p>You don't have to know everything. Start building, Google stuff along the way, and just keep improving.</p>\r\n    `,\r\n    proTip: 'Keep a “Projects” folder on your system. Each project you build adds real experience and can go into your portfolio. Start small, finish fast.',\r\n    codeSamples: [\r\n      {\r\n        language: 'javascript',\r\n        code: `// Simple digital clock example\r\nsetInterval(() => {\r\n  const time = new Date().toLocaleTimeString();\r\n  document.body.innerHTML = \"<h1>\" + time + \"</h1>\";\r\n}, 1000);`\r\n      }\r\n    ]\r\n  };\r\n\r\n    default:\r\n      return undefined;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}